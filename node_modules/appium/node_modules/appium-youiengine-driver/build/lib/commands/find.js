'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var commands = {};

commands.findElOrEls = function callee$0$0(strategy, selector, mult, context) {
  var createGetElementCommand, result, doFind;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        createGetElementCommand = function createGetElementCommand(strategy, selector, mult, context) {

          if (typeof context === "undefined" || !context) {
            context = '';
          }

          var ext = mult ? 's' : '';
          var commandObject = {
            args: ['' + selector, '' + context]
          };

          switch (strategy) {
            case "name":
              commandObject.name = 'getElement' + ext + 'ByName';
              break;
            case "id":
              commandObject.name = 'getElement' + ext + 'ById';
              break;
            case "class name":
              commandObject.name = 'getElement' + ext + 'ByType';
              break;
            default:
              throw new Error("Unsupported strategy for findElOrEls: " + strategy);
          }

          return JSON.stringify(commandObject);
        };

        result = undefined;

        doFind = function doFind() {
          var findByAxIdCmd, res;
          return _regeneratorRuntime.async(function doFind$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                findByAxIdCmd = createGetElementCommand(strategy, selector, mult, context);
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(this.executeSocketCommand(findByAxIdCmd));

              case 3:
                res = context$2$0.sent;
                context$2$0.prev = 4;

                result = JSON.parse(res);
                context$2$0.next = 11;
                break;

              case 8:
                context$2$0.prev = 8;
                context$2$0.t0 = context$2$0['catch'](4);
                throw new Error("Bad response from findElOrEls");

              case 11:
                if (!(result.value === "")) {
                  context$2$0.next = 13;
                  break;
                }

                return context$2$0.abrupt('return', false);

              case 13:
                return context$2$0.abrupt('return', true);

              case 14:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[4, 8]]);
        };

        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.implicitWaitForCondition(doFind));

      case 6:
        context$1$0.next = 15;
        break;

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](3);

        if (!(context$1$0.t0.message && context$1$0.t0.message.match(/Condition unmet/))) {
          context$1$0.next = 14;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchElementError();

      case 14:
        throw context$1$0.t0;

      case 15:
        return context$1$0.abrupt('return', result.value);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 8]]);
};

exports['default'] = commands;
module.exports = exports['default'];

// parse error

// looks like we have to check the status or resulting value to see that it's not empty.

// condition was not met, throw NoSuchElementError

// some other issue occurred, report it
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9maW5kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2dDQUF1QixvQkFBb0I7O0FBRTNDLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQzs7QUFFbEIsUUFBUSxDQUFDLFdBQVcsR0FBRyxvQkFBZ0IsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTztNQUVsRSx1QkFBdUIsRUE0QnZCLE1BQU0sRUFDTixNQUFNOzs7Ozs7QUE3Qk4sK0JBQXVCLEdBQUcsU0FBMUIsdUJBQXVCLENBQWEsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFOztBQUV6RSxjQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUM5QyxtQkFBTyxHQUFHLEVBQUUsQ0FBQztXQUNkOztBQUVELGNBQUksR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO0FBQzFCLGNBQUksYUFBYSxHQUFHO0FBQ2xCLGdCQUFJLEVBQUUsTUFBSSxRQUFRLE9BQU8sT0FBTyxDQUFHO1dBQ3BDLENBQUM7O0FBRUYsa0JBQVEsUUFBUTtBQUNkLGlCQUFLLE1BQU07QUFDVCwyQkFBYSxDQUFDLElBQUksa0JBQWdCLEdBQUcsV0FBUSxDQUFDO0FBQzlDLG9CQUFNO0FBQUEsQUFDUixpQkFBSyxJQUFJO0FBQ1AsMkJBQWEsQ0FBQyxJQUFJLGtCQUFnQixHQUFHLFNBQU0sQ0FBQztBQUM1QyxvQkFBTTtBQUFBLEFBQ1IsaUJBQUssWUFBWTtBQUNmLDJCQUFhLENBQUMsSUFBSSxrQkFBZ0IsR0FBRyxXQUFRLENBQUM7QUFDOUMsb0JBQU07QUFBQSxBQUNSO0FBQ0Usb0JBQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLEdBQUcsUUFBUSxDQUFDLENBQUM7QUFBQSxXQUN4RTs7QUFFRCxpQkFBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3RDOztBQUVHLGNBQU07O0FBQ04sY0FBTSxHQUFHLFNBQVQsTUFBTTtjQUNKLGFBQWEsRUFFYixHQUFHOzs7O0FBRkgsNkJBQWEsR0FBRyx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUM7O2lEQUU5RCxJQUFJLENBQUMsb0JBQW9CLENBQUMsYUFBYSxDQUFDOzs7QUFBcEQsbUJBQUc7OztBQUdMLHNCQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzs7Ozs7OztzQkFHbkIsSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUM7OztzQkFJOUMsTUFBTSxDQUFDLEtBQUssS0FBSyxFQUFFLENBQUE7Ozs7O29EQUNkLEtBQUs7OztvREFFUCxJQUFJOzs7Ozs7O1NBQ1o7Ozs7eUNBR08sSUFBSSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQzs7Ozs7Ozs7OztjQUV2QyxlQUFJLE9BQU8sSUFBSSxlQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQTs7Ozs7Y0FFL0MsSUFBSSx5QkFBTyxrQkFBa0IsRUFBRTs7Ozs7OzRDQU1sQyxNQUFNLENBQUMsS0FBSzs7Ozs7OztDQUNwQixDQUFDOztxQkFFYSxRQUFRIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9maW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcblxubGV0IGNvbW1hbmRzID0ge307XG5cbmNvbW1hbmRzLmZpbmRFbE9yRWxzID0gYXN5bmMgZnVuY3Rpb24gKHN0cmF0ZWd5LCBzZWxlY3RvciwgbXVsdCwgY29udGV4dCkge1xuXG4gIGxldCBjcmVhdGVHZXRFbGVtZW50Q29tbWFuZCA9IGZ1bmN0aW9uIChzdHJhdGVneSwgc2VsZWN0b3IsIG11bHQsIGNvbnRleHQpIHtcblxuICAgIGlmICh0eXBlb2YgY29udGV4dCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhY29udGV4dCkge1xuICAgICAgY29udGV4dCA9ICcnO1xuICAgIH1cblxuICAgIGxldCBleHQgPSBtdWx0ID8gJ3MnIDogJyc7XG4gICAgdmFyIGNvbW1hbmRPYmplY3QgPSB7XG4gICAgICBhcmdzOiBbYCR7c2VsZWN0b3J9YCwgYCR7Y29udGV4dH1gXVxuICAgIH07XG5cbiAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgICBjYXNlIFwibmFtZVwiOlxuICAgICAgICBjb21tYW5kT2JqZWN0Lm5hbWUgPSBgZ2V0RWxlbWVudCR7ZXh0fUJ5TmFtZWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImlkXCI6XG4gICAgICAgIGNvbW1hbmRPYmplY3QubmFtZSA9IGBnZXRFbGVtZW50JHtleHR9QnlJZGA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImNsYXNzIG5hbWVcIjpcbiAgICAgICAgY29tbWFuZE9iamVjdC5uYW1lID0gYGdldEVsZW1lbnQke2V4dH1CeVR5cGVgO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIHN0cmF0ZWd5IGZvciBmaW5kRWxPckVsczogXCIgKyBzdHJhdGVneSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmplY3QpO1xuICB9O1xuXG4gIGxldCByZXN1bHQ7XG4gIGxldCBkb0ZpbmQgPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGZpbmRCeUF4SWRDbWQgPSBjcmVhdGVHZXRFbGVtZW50Q29tbWFuZChzdHJhdGVneSwgc2VsZWN0b3IsIG11bHQsIGNvbnRleHQpO1xuXG4gICAgbGV0IHJlcyA9IGF3YWl0IHRoaXMuZXhlY3V0ZVNvY2tldENvbW1hbmQoZmluZEJ5QXhJZENtZCk7XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHBhcnNlIGVycm9yXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgcmVzcG9uc2UgZnJvbSBmaW5kRWxPckVsc1wiKTtcbiAgICB9XG5cbiAgICAvLyBsb29rcyBsaWtlIHdlIGhhdmUgdG8gY2hlY2sgdGhlIHN0YXR1cyBvciByZXN1bHRpbmcgdmFsdWUgdG8gc2VlIHRoYXQgaXQncyBub3QgZW1wdHkuXG4gICAgaWYgKHJlc3VsdC52YWx1ZSA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuaW1wbGljaXRXYWl0Rm9yQ29uZGl0aW9uKGRvRmluZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIubWVzc2FnZSAmJiBlcnIubWVzc2FnZS5tYXRjaCgvQ29uZGl0aW9uIHVubWV0LykpIHtcbiAgICAgIC8vIGNvbmRpdGlvbiB3YXMgbm90IG1ldCwgdGhyb3cgTm9TdWNoRWxlbWVudEVycm9yXG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLk5vU3VjaEVsZW1lbnRFcnJvcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzb21lIG90aGVyIGlzc3VlIG9jY3VycmVkLCByZXBvcnQgaXRcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
