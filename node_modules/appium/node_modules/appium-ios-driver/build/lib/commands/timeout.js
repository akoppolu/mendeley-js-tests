'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {},
    helpers = {},
    extensions = {};

commands.timeouts = function callee$0$0(type, duration) {
  var ms;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        ms = this.parseTimeoutArgument(duration);
        context$1$0.t0 = type;
        context$1$0.next = context$1$0.t0 === 'command' ? 4 : context$1$0.t0 === 'implicit' ? 6 : context$1$0.t0 === 'page load' ? 8 : context$1$0.t0 === 'script' ? 10 : 12;
        break;

      case 4:
        this.setNewCommandTimeout(ms);
        return context$1$0.abrupt('break', 13);

      case 6:
        this.setImplicitWait(ms);
        return context$1$0.abrupt('break', 13);

      case 8:
        this.setPageLoadTimeout(ms);
        return context$1$0.abrupt('break', 13);

      case 10:
        this.setAsyncScriptTimeout(ms);
        return context$1$0.abrupt('break', 13);

      case 12:
        throw new Error('Invalid timeout \'' + type + '\'');

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.asyncScriptTimeout = function callee$0$0(ms) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.setAsyncScriptTimeout(this.parseTimeoutArgument(ms));

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.setPageLoadTimeout = function (ms) {
  ms = parseInt(ms, 10);
  this.pageLoadMs = ms;
  if (this.remote) {
    this.remote.pageLoadMs = this.pageLoadMs;
  }
  _logger2['default'].debug('Set page load timeout to ' + ms + 'ms');
};

helpers.setAsyncScriptTimeout = function (ms) {
  this.asyncWaitMs = ms;
  _logger2['default'].debug('Set async script timeout to ' + ms + 'ms');
};

helpers.pageLoadTimeout = function (ms) {
  this.pageLoadMs = ms;

  if (this.remote) {
    this.remote.pageLoadMs = ms;
  }
  _logger2['default'].debug('Set page load timeout to ' + ms + 'ms');
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy90aW1lb3V0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBbUIsV0FBVzs7OztBQUc5QixJQUFJLFFBQVEsR0FBRyxFQUFFO0lBQUUsT0FBTyxHQUFHLEVBQUU7SUFBRSxVQUFVLEdBQUcsRUFBRSxDQUFDOztBQUVqRCxRQUFRLENBQUMsUUFBUSxHQUFHLG9CQUFnQixJQUFJLEVBQUUsUUFBUTtNQUM1QyxFQUFFOzs7O0FBQUYsVUFBRSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUM7eUJBQ3BDLElBQUk7OENBQ0wsU0FBUywwQkFHVCxVQUFVLDBCQUdWLFdBQVcsMEJBR1gsUUFBUTs7OztBQVJYLFlBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQzs7OztBQUc5QixZQUFJLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7O0FBR3pCLFlBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQzs7OztBQUc1QixZQUFJLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLENBQUM7Ozs7Y0FHekIsSUFBSSxLQUFLLHdCQUFxQixJQUFJLFFBQUk7Ozs7Ozs7Q0FFakQsQ0FBQzs7QUFFRixRQUFRLENBQUMsa0JBQWtCLEdBQUcsb0JBQWdCLEVBQUU7Ozs7QUFDOUMsWUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0NBQzNELENBQUM7O0FBRUYsT0FBTyxDQUFDLGtCQUFrQixHQUFHLFVBQVUsRUFBRSxFQUFFO0FBQ3pDLElBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3RCLE1BQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLE1BQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNmLFFBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7R0FDMUM7QUFDRCxzQkFBTyxLQUFLLCtCQUE2QixFQUFFLFFBQUssQ0FBQztDQUNsRCxDQUFDOztBQUVGLE9BQU8sQ0FBQyxxQkFBcUIsR0FBRyxVQUFVLEVBQUUsRUFBRTtBQUM1QyxNQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUN0QixzQkFBTyxLQUFLLGtDQUFnQyxFQUFFLFFBQUssQ0FBQztDQUNyRCxDQUFDOztBQUdGLE9BQU8sQ0FBQyxlQUFlLEdBQUcsVUFBVSxFQUFFLEVBQUU7QUFDdEMsTUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRXJCLE1BQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNmLFFBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztHQUM3QjtBQUNELHNCQUFPLEtBQUssK0JBQTZCLEVBQUUsUUFBSyxDQUFDO0NBQ2xELENBQUM7O0FBR0YsZUFBYyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLFFBQVEsR0FBUixRQUFRO1FBQUUsT0FBTyxHQUFQLE9BQU87cUJBQ1gsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvdGltZW91dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLnRpbWVvdXRzID0gYXN5bmMgZnVuY3Rpb24gKHR5cGUsIGR1cmF0aW9uKSB7XG4gIGxldCBtcyA9IHRoaXMucGFyc2VUaW1lb3V0QXJndW1lbnQoZHVyYXRpb24pO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdjb21tYW5kJzpcbiAgICAgIHRoaXMuc2V0TmV3Q29tbWFuZFRpbWVvdXQobXMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW1wbGljaXQnOlxuICAgICAgdGhpcy5zZXRJbXBsaWNpdFdhaXQobXMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncGFnZSBsb2FkJzpcbiAgICAgIHRoaXMuc2V0UGFnZUxvYWRUaW1lb3V0KG1zKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NjcmlwdCc6XG4gICAgICB0aGlzLnNldEFzeW5jU2NyaXB0VGltZW91dChtcyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHRpbWVvdXQgJyR7dHlwZX0nYCk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLmFzeW5jU2NyaXB0VGltZW91dCA9IGFzeW5jIGZ1bmN0aW9uIChtcykge1xuICB0aGlzLnNldEFzeW5jU2NyaXB0VGltZW91dCh0aGlzLnBhcnNlVGltZW91dEFyZ3VtZW50KG1zKSk7XG59O1xuXG5oZWxwZXJzLnNldFBhZ2VMb2FkVGltZW91dCA9IGZ1bmN0aW9uIChtcykge1xuICBtcyA9IHBhcnNlSW50KG1zLCAxMCk7XG4gIHRoaXMucGFnZUxvYWRNcyA9IG1zO1xuICBpZiAodGhpcy5yZW1vdGUpIHtcbiAgICB0aGlzLnJlbW90ZS5wYWdlTG9hZE1zID0gdGhpcy5wYWdlTG9hZE1zO1xuICB9XG4gIGxvZ2dlci5kZWJ1ZyhgU2V0IHBhZ2UgbG9hZCB0aW1lb3V0IHRvICR7bXN9bXNgKTtcbn07XG5cbmhlbHBlcnMuc2V0QXN5bmNTY3JpcHRUaW1lb3V0ID0gZnVuY3Rpb24gKG1zKSB7XG4gIHRoaXMuYXN5bmNXYWl0TXMgPSBtcztcbiAgbG9nZ2VyLmRlYnVnKGBTZXQgYXN5bmMgc2NyaXB0IHRpbWVvdXQgdG8gJHttc31tc2ApO1xufTtcblxuXG5oZWxwZXJzLnBhZ2VMb2FkVGltZW91dCA9IGZ1bmN0aW9uIChtcykge1xuICB0aGlzLnBhZ2VMb2FkTXMgPSBtcztcblxuICBpZiAodGhpcy5yZW1vdGUpIHtcbiAgICB0aGlzLnJlbW90ZS5wYWdlTG9hZE1zID0gbXM7XG4gIH1cbiAgbG9nZ2VyLmRlYnVnKGBTZXQgcGFnZSBsb2FkIHRpbWVvdXQgdG8gJHttc31tc2ApO1xufTtcblxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
