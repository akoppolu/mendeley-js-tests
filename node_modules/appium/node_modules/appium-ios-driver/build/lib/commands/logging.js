'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _deviceLogIosLog = require('../device-log/ios-log');

var _deviceLogIosLog2 = _interopRequireDefault(_deviceLogIosLog);

var _deviceLogIosCrashLog = require('../device-log/ios-crash-log');

var _deviceLogIosCrashLog2 = _interopRequireDefault(_deviceLogIosCrashLog);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {},
    helpers = {},
    extensions = {};

var SUPPORTED_LOG_TYPES = {
  'syslog': 'System Logs - Device logs for iOS applications on real devices and simulators',
  'crashlog': 'Crash Logs - Crash reports for iOS applications on real devices and simulators',
  'performance': 'Performance Logs - Debug Timelines on real devices and simulators'
};

commands.getLogTypes = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Retrieving supported log types');
        return context$1$0.abrupt('return', _lodash2['default'].keys(SUPPORTED_LOG_TYPES));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getLog = function callee$0$0(logType) {
  var logs;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Retrieving \'' + logType + '\' logs');
        // Check if passed logType is supported

        if (_lodash2['default'].has(SUPPORTED_LOG_TYPES, logType)) {
          context$1$0.next = 3;
          break;
        }

        throw new Error('Unsupported log type \'' + logType + '\' for this device. Supported types : ' + JSON.stringify(SUPPORTED_LOG_TYPES));

      case 3:
        if (!_lodash2['default'].isEmpty(this.logs)) {
          context$1$0.next = 5;
          break;
        }

        throw new Error('No logs currently available. Is the device/simulator started?');

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.logs[logType].getLogs());

      case 7:
        logs = context$1$0.sent;

        if (!logs) {
          context$1$0.next = 12;
          break;
        }

        return context$1$0.abrupt('return', logs);

      case 12:
        throw new Error('No logs of type \'' + logType + '\' found.');

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.startLogCapture = function callee$0$0(sim) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].isEmpty(this.logs)) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].warn("Trying to start iOS log capture but it's already started!");
        return context$1$0.abrupt('return');

      case 3:
        this.logs.crashlog = new _deviceLogIosCrashLog2['default']();
        this.logs.syslog = new _deviceLogIosLog2['default']({
          sim: sim,
          udid: this.opts.udid,
          showLogs: this.opts.showIOSLog
        });
        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.logs.syslog.startCapture());

      case 8:
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](5);

        _logger2['default'].warn("Could not capture logs from device. Continuing without capturing logs.");
        return context$1$0.abrupt('return');

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.logs.crashlog.startCapture());

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 10]]);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports.SUPPORTED_LOG_TYPES = SUPPORTED_LOG_TYPES;
exports['default'] = extensions;

// make sure that we have logs at all
// otherwise it's not been initialized

// If logs captured successfully send response with data, else send error
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2dnaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBYyxRQUFROzs7OytCQUNILHVCQUF1Qjs7OztvQ0FDbEIsNkJBQTZCOzs7O3NCQUNsQyxXQUFXOzs7O0FBRzlCLElBQUksUUFBUSxHQUFHLEVBQUU7SUFBRSxPQUFPLEdBQUcsRUFBRTtJQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRWpELElBQU0sbUJBQW1CLEdBQUc7QUFDMUIsVUFBUSxFQUFFLCtFQUErRTtBQUN6RixZQUFVLEVBQUUsZ0ZBQWdGO0FBQzVGLGVBQWEsRUFBRSxtRUFBbUU7Q0FDbkYsQ0FBQzs7QUFFRixRQUFRLENBQUMsV0FBVyxHQUFHOzs7O0FBQ3JCLDRCQUFPLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDOzRDQUN4QyxvQkFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUM7Ozs7Ozs7Q0FDbkMsQ0FBQzs7QUFFRixRQUFRLENBQUMsTUFBTSxHQUFHLG9CQUFnQixPQUFPO01BY25DLElBQUk7Ozs7QUFiUiw0QkFBTyxLQUFLLG1CQUFnQixPQUFPLGFBQVMsQ0FBQzs7O1lBRXhDLG9CQUFFLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLENBQUM7Ozs7O2NBQ2hDLElBQUksS0FBSyw2QkFBMEIsT0FBTyw4Q0FBd0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFHOzs7YUFLNUgsb0JBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Ozs7O2NBQ2hCLElBQUksS0FBSyxDQUFDLCtEQUErRCxDQUFDOzs7O3lDQUlqRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRTs7O0FBQXpDLFlBQUk7O2FBQ0osSUFBSTs7Ozs7NENBQ0MsSUFBSTs7O2NBRUwsSUFBSSxLQUFLLHdCQUFxQixPQUFPLGVBQVc7Ozs7Ozs7Q0FFekQsQ0FBQzs7QUFFRixPQUFPLENBQUMsZUFBZSxHQUFHLG9CQUFnQixHQUFHOzs7O1lBQ3RDLG9CQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDOzs7OztBQUN2Qiw0QkFBTyxJQUFJLENBQUMsMkRBQTJELENBQUMsQ0FBQzs7OztBQUczRSxZQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyx1Q0FBaUIsQ0FBQztBQUN2QyxZQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxpQ0FBVztBQUM1QixhQUFHLEVBQUgsR0FBRztBQUNILGNBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7QUFDcEIsa0JBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7U0FDL0IsQ0FBQyxDQUFDOzs7eUNBRUssSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFOzs7Ozs7Ozs7O0FBRXJDLDRCQUFPLElBQUksQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDOzs7Ozt5Q0FHbEYsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFOzs7Ozs7O0NBQ3hDLENBQUM7O0FBR0YsZUFBYyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLFFBQVEsR0FBUixRQUFRO1FBQUUsT0FBTyxHQUFQLE9BQU87UUFBRSxtQkFBbUIsR0FBbkIsbUJBQW1CO3FCQUNoQyxVQUFVIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9sb2dnaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBJT1NMb2cgZnJvbSAnLi4vZGV2aWNlLWxvZy9pb3MtbG9nJztcbmltcG9ydCBJT1NDcmFzaExvZyBmcm9tICcuLi9kZXZpY2UtbG9nL2lvcy1jcmFzaC1sb2cnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29uc3QgU1VQUE9SVEVEX0xPR19UWVBFUyA9IHtcbiAgJ3N5c2xvZyc6ICdTeXN0ZW0gTG9ncyAtIERldmljZSBsb2dzIGZvciBpT1MgYXBwbGljYXRpb25zIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycycsXG4gICdjcmFzaGxvZyc6ICdDcmFzaCBMb2dzIC0gQ3Jhc2ggcmVwb3J0cyBmb3IgaU9TIGFwcGxpY2F0aW9ucyBvbiByZWFsIGRldmljZXMgYW5kIHNpbXVsYXRvcnMnLFxuICAncGVyZm9ybWFuY2UnOiAnUGVyZm9ybWFuY2UgTG9ncyAtIERlYnVnIFRpbWVsaW5lcyBvbiByZWFsIGRldmljZXMgYW5kIHNpbXVsYXRvcnMnXG59O1xuXG5jb21tYW5kcy5nZXRMb2dUeXBlcyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbG9nZ2VyLmRlYnVnKCdSZXRyaWV2aW5nIHN1cHBvcnRlZCBsb2cgdHlwZXMnKTtcbiAgcmV0dXJuIF8ua2V5cyhTVVBQT1JURURfTE9HX1RZUEVTKTtcbn07XG5cbmNvbW1hbmRzLmdldExvZyA9IGFzeW5jIGZ1bmN0aW9uIChsb2dUeXBlKSB7XG4gIGxvZ2dlci5kZWJ1ZyhgUmV0cmlldmluZyAnJHtsb2dUeXBlfScgbG9nc2ApO1xuICAvLyBDaGVjayBpZiBwYXNzZWQgbG9nVHlwZSBpcyBzdXBwb3J0ZWRcbiAgaWYgKCFfLmhhcyhTVVBQT1JURURfTE9HX1RZUEVTLCBsb2dUeXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbG9nIHR5cGUgJyR7bG9nVHlwZX0nIGZvciB0aGlzIGRldmljZS4gU3VwcG9ydGVkIHR5cGVzIDogJHtKU09OLnN0cmluZ2lmeShTVVBQT1JURURfTE9HX1RZUEVTKX1gKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB0aGF0IHdlIGhhdmUgbG9ncyBhdCBhbGxcbiAgLy8gb3RoZXJ3aXNlIGl0J3Mgbm90IGJlZW4gaW5pdGlhbGl6ZWRcbiAgaWYgKF8uaXNFbXB0eSh0aGlzLmxvZ3MpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBsb2dzIGN1cnJlbnRseSBhdmFpbGFibGUuIElzIHRoZSBkZXZpY2Uvc2ltdWxhdG9yIHN0YXJ0ZWQ/Jyk7XG4gIH1cblxuICAvLyBJZiBsb2dzIGNhcHR1cmVkIHN1Y2Nlc3NmdWxseSBzZW5kIHJlc3BvbnNlIHdpdGggZGF0YSwgZWxzZSBzZW5kIGVycm9yXG4gIGxldCBsb2dzID0gYXdhaXQgdGhpcy5sb2dzW2xvZ1R5cGVdLmdldExvZ3MoKTtcbiAgaWYgKGxvZ3MpIHtcbiAgICByZXR1cm4gbG9ncztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGxvZ3Mgb2YgdHlwZSAnJHtsb2dUeXBlfScgZm91bmQuYCk7XG4gIH1cbn07XG5cbmhlbHBlcnMuc3RhcnRMb2dDYXB0dXJlID0gYXN5bmMgZnVuY3Rpb24gKHNpbSkge1xuICBpZiAoIV8uaXNFbXB0eSh0aGlzLmxvZ3MpKSB7XG4gICAgbG9nZ2VyLndhcm4oXCJUcnlpbmcgdG8gc3RhcnQgaU9TIGxvZyBjYXB0dXJlIGJ1dCBpdCdzIGFscmVhZHkgc3RhcnRlZCFcIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubG9ncy5jcmFzaGxvZyA9IG5ldyBJT1NDcmFzaExvZygpO1xuICB0aGlzLmxvZ3Muc3lzbG9nID0gbmV3IElPU0xvZyh7XG4gICAgc2ltLFxuICAgIHVkaWQ6IHRoaXMub3B0cy51ZGlkXG4gICwgc2hvd0xvZ3M6IHRoaXMub3B0cy5zaG93SU9TTG9nXG4gIH0pO1xuICB0cnkge1xuICAgIGF3YWl0IHRoaXMubG9ncy5zeXNsb2cuc3RhcnRDYXB0dXJlKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ2dlci53YXJuKFwiQ291bGQgbm90IGNhcHR1cmUgbG9ncyBmcm9tIGRldmljZS4gQ29udGludWluZyB3aXRob3V0IGNhcHR1cmluZyBsb2dzLlwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgYXdhaXQgdGhpcy5sb2dzLmNyYXNobG9nLnN0YXJ0Q2FwdHVyZSgpO1xufTtcblxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzLCBTVVBQT1JURURfTE9HX1RZUEVTIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
