'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var MAX_EVENTS = 5000;

var IOSPerformanceLog = (function () {
  function IOSPerformanceLog(remoteDebugger) {
    var maxEvents = arguments.length <= 1 || arguments[1] === undefined ? MAX_EVENTS : arguments[1];

    _classCallCheck(this, IOSPerformanceLog);

    this.remoteDebugger = remoteDebugger;
    this.maxEvents = parseInt(maxEvents, 10);

    this.timelineEvents = [];
  }

  _createClass(IOSPerformanceLog, [{
    key: 'startCapture',
    value: function startCapture() {
      return _regeneratorRuntime.async(function startCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Starting performance (Timeline) log capture');
            this.timelineEvents = [];
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.remoteDebugger.startTimeline(this.onTimelineEvent.bind(this)));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stopCapture',
    value: function stopCapture() {
      return _regeneratorRuntime.async(function stopCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Stopping performance (Timeline) log capture');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.remoteDebugger.stopTimeline());

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'onTimelineEvent',
    value: function onTimelineEvent(event) {
      _logger2['default'].debug('Received Timeline event: ' + _lodash2['default'].truncate(JSON.stringify(event)));
      this.timelineEvents.push(event);

      // if we have too many, get rid of the oldest log line
      if (this.timelineEvents.length > this.maxEvents) {
        var removedEvent = this.timelineEvents.shift();
        _logger2['default'].warn('Too many Timeline events, removing earliest: ' + _lodash2['default'].truncate(JSON.stringify(removedEvent)));
      }
    }
  }, {
    key: 'getLogs',
    value: function getLogs() {
      var events;
      return _regeneratorRuntime.async(function getLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            events = this.timelineEvents;

            // flush events
            _logger2['default'].debug('Flushing Timeline events');
            this.timelineEvents = [];

            return context$2$0.abrupt('return', events);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getAllLogs',
    value: function getAllLogs() {
      return _regeneratorRuntime.async(function getAllLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', this.getLogs());

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return IOSPerformanceLog;
})();

exports['default'] = IOSPerformanceLog;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL2lvcy1wZXJmb3JtYW5jZS1sb2cuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7c0JBQW1CLFVBQVU7Ozs7c0JBQ2YsUUFBUTs7OztBQUV0QixJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUM7O0lBRWxCLGlCQUFpQjtBQUNULFdBRFIsaUJBQWlCLENBQ1IsY0FBYyxFQUEwQjtRQUF4QixTQUFTLHlEQUFHLFVBQVU7OzBCQUQvQyxpQkFBaUI7O0FBRW5CLFFBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0FBQ3JDLFFBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQzs7QUFFekMsUUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7R0FDMUI7O2VBTkcsaUJBQWlCOztXQVFGOzs7O0FBQ2pCLGdDQUFPLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0FBQzVELGdCQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQzs7NkNBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Ozs7Ozs7Ozs7S0FDaEY7OztXQUVpQjs7OztBQUNoQixnQ0FBTyxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQzs7NkNBQy9DLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFOzs7Ozs7Ozs7O0tBQ2hEOzs7V0FFZSx5QkFBQyxLQUFLLEVBQUU7QUFDdEIsMEJBQU8sS0FBSywrQkFBNkIsb0JBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBRyxDQUFDO0FBQzlFLFVBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDOzs7QUFHaEMsVUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQy9DLFlBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDL0MsNEJBQU8sSUFBSSxtREFBaUQsb0JBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBRyxDQUFDO09BQ3pHO0tBQ0Y7OztXQUVhO1VBQ1IsTUFBTTs7OztBQUFOLGtCQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWM7OztBQUdoQyxnQ0FBTyxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUN6QyxnQkFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7O2dEQUVsQixNQUFNOzs7Ozs7O0tBQ2Q7OztXQUVnQjs7OztnREFDUixJQUFJLENBQUMsT0FBTyxFQUFFOzs7Ozs7O0tBQ3RCOzs7U0ExQ0csaUJBQWlCOzs7cUJBNkNSLGlCQUFpQiIsImZpbGUiOiJsaWIvZGV2aWNlLWxvZy9pb3MtcGVyZm9ybWFuY2UtbG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCBNQVhfRVZFTlRTID0gNTAwMDtcblxuY2xhc3MgSU9TUGVyZm9ybWFuY2VMb2cge1xuICBjb25zdHJ1Y3RvciAocmVtb3RlRGVidWdnZXIsIG1heEV2ZW50cyA9IE1BWF9FVkVOVFMpIHtcbiAgICB0aGlzLnJlbW90ZURlYnVnZ2VyID0gcmVtb3RlRGVidWdnZXI7XG4gICAgdGhpcy5tYXhFdmVudHMgPSBwYXJzZUludChtYXhFdmVudHMsIDEwKTtcblxuICAgIHRoaXMudGltZWxpbmVFdmVudHMgPSBbXTtcbiAgfVxuXG4gIGFzeW5jIHN0YXJ0Q2FwdHVyZSAoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdTdGFydGluZyBwZXJmb3JtYW5jZSAoVGltZWxpbmUpIGxvZyBjYXB0dXJlJyk7XG4gICAgdGhpcy50aW1lbGluZUV2ZW50cyA9IFtdO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnJlbW90ZURlYnVnZ2VyLnN0YXJ0VGltZWxpbmUodGhpcy5vblRpbWVsaW5lRXZlbnQuYmluZCh0aGlzKSk7XG4gIH1cblxuICBhc3luYyBzdG9wQ2FwdHVyZSAoKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdTdG9wcGluZyBwZXJmb3JtYW5jZSAoVGltZWxpbmUpIGxvZyBjYXB0dXJlJyk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucmVtb3RlRGVidWdnZXIuc3RvcFRpbWVsaW5lKCk7XG4gIH1cblxuICBvblRpbWVsaW5lRXZlbnQgKGV2ZW50KSB7XG4gICAgbG9nZ2VyLmRlYnVnKGBSZWNlaXZlZCBUaW1lbGluZSBldmVudDogJHtfLnRydW5jYXRlKEpTT04uc3RyaW5naWZ5KGV2ZW50KSl9YCk7XG4gICAgdGhpcy50aW1lbGluZUV2ZW50cy5wdXNoKGV2ZW50KTtcblxuICAgIC8vIGlmIHdlIGhhdmUgdG9vIG1hbnksIGdldCByaWQgb2YgdGhlIG9sZGVzdCBsb2cgbGluZVxuICAgIGlmICh0aGlzLnRpbWVsaW5lRXZlbnRzLmxlbmd0aCA+IHRoaXMubWF4RXZlbnRzKSB7XG4gICAgICBsZXQgcmVtb3ZlZEV2ZW50ID0gdGhpcy50aW1lbGluZUV2ZW50cy5zaGlmdCgpO1xuICAgICAgbG9nZ2VyLndhcm4oYFRvbyBtYW55IFRpbWVsaW5lIGV2ZW50cywgcmVtb3ZpbmcgZWFybGllc3Q6ICR7Xy50cnVuY2F0ZShKU09OLnN0cmluZ2lmeShyZW1vdmVkRXZlbnQpKX1gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRMb2dzICgpIHtcbiAgICBsZXQgZXZlbnRzID0gdGhpcy50aW1lbGluZUV2ZW50cztcblxuICAgIC8vIGZsdXNoIGV2ZW50c1xuICAgIGxvZ2dlci5kZWJ1ZygnRmx1c2hpbmcgVGltZWxpbmUgZXZlbnRzJyk7XG4gICAgdGhpcy50aW1lbGluZUV2ZW50cyA9IFtdO1xuXG4gICAgcmV0dXJuIGV2ZW50cztcbiAgfVxuXG4gIGFzeW5jIGdldEFsbExvZ3MgKCkge1xuICAgIHJldHVybiB0aGlzLmdldExvZ3MoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJT1NQZXJmb3JtYW5jZUxvZztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
