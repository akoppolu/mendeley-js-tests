'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumIosSimulator = require('appium-ios-simulator');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function checkSimulatorAvailable(opts, sdkVersion, availableDevices) {
  var dString, noDevicesError, sim;
  return _regeneratorRuntime.async(function checkSimulatorAvailable$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(sdkVersion < 7.1)) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].debug('Instruments v < 7.1, not checking device string support');
        return context$1$0.abrupt('return');

      case 3:

        _logger2['default'].debug('Checking whether our device string is supported');

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(getAdjustedDeviceName(opts));

      case 6:
        dString = context$1$0.sent;

        noDevicesError = function noDevicesError() {
          var msg = 'Could not find a device to launch. You requested ' + ('\'' + dString + '\', but the available devices were: ') + JSON.stringify(availableDevices);
          _logger2['default'].errorAndThrow(msg);
        };

        if (!(sdkVersion >= 8)) {
          context$1$0.next = 15;
          break;
        }

        sim = _utils2['default'].getSimForDeviceString(dString, availableDevices);

        if (sim[0] === null || sim[1] === null) {
          noDevicesError();
        }
        _logger2['default'].debug('iOS sim UDID is ' + sim[1]);
        return context$1$0.abrupt('return', sim[1]);

      case 15:
        if (!_lodash2['default'].includes(availableDevices, dString)) {
          noDevicesError();
        }

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getAdjustedDeviceName(opts) {
  return _regeneratorRuntime.async(function getAdjustedDeviceName$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.t0 = opts._adjustedDeviceName;

        if (context$1$0.t0) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _appiumIosSimulator.getDeviceString)(opts));

      case 4:
        context$1$0.t0 = context$1$0.sent;

      case 5:
        opts._adjustedDeviceName = context$1$0.t0;
        return context$1$0.abrupt('return', opts._adjustedDeviceName);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

// TODO: what to do with this?
function moveBuiltInApp() {
  return _regeneratorRuntime.async(function moveBuiltInApp$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/*sim*/
// call sim function once it is in place
function runSimulatorReset(sim, opts, keepApp) {
  return _regeneratorRuntime.async(function runSimulatorReset$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!opts.reset && !opts.fullReset)) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].debug('Reset not set, not ending sim');
        return context$1$0.abrupt('return');

      case 3:

        _logger2['default'].debug('Running ios sim reset flow');

        // The simulator process must be ended before we delete applications.
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(endSimulator(sim));

      case 6:
        if (!opts.fullReset) {
          context$1$0.next = 12;
          break;
        }

        _logger2['default'].debug('Full reset is on, so erasing simulator');
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(fullResetSimulator(sim));

      case 10:
        context$1$0.next = 15;
        break;

      case 12:
        if (!opts.reset) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(resetSimulator(sim, opts, keepApp));

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function fullResetSimulator(sim) {
  return _regeneratorRuntime.async(function fullResetSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Cleaning the simulator');

        if (!sim) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(sim.clean());

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function resetSimulator(sim, opts, keepApp) {
  return _regeneratorRuntime.async(function resetSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (sim) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:

        _logger2['default'].debug('Cleaning sim state.');
        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(clearAppData(sim, opts, keepApp));

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(sim.clean());

      case 8:
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](3);

        _logger2['default'].warn(context$1$0.t0);
        _logger2['default'].warn("Could not reset simulator. Leaving as is.");

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 10]]);
}

function endSimulator(sim) {
  return _regeneratorRuntime.async(function endSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (sim) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:

        _logger2['default'].debug('Killing the simulator');
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(sim.shutdown());

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function isolateSimulatorDevice(sim, opts, sdkVersion) {
  return _regeneratorRuntime.async(function isolateSimulatorDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(opts.isolateSimDevice && sdkVersion >= 8)) {
          context$1$0.next = 3;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(sim.isolateSim());

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function clearAppData(sim, opts, keepApp) {
  return _regeneratorRuntime.async(function clearAppData$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!keepApp && opts.app && opts.bundleId)) {
          context$1$0.next = 3;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(sim.cleanCustomApp(_path2['default'].basename(opts.app), opts.bundleId));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function resetRealDevice(device, opts) {
  var bundleId;
  return _regeneratorRuntime.async(function resetRealDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(opts.bundleId && opts.fullReset)) {
          context$1$0.next = 18;
          break;
        }

        bundleId = opts.bundleId;

        _logger2['default'].debug('Full reset requested. Will try to uninstall the app \'' + bundleId + '\'.');
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(device.isInstalled(bundleId));

      case 5:
        if (context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        _logger2['default'].debug('App not installed. No need to uninstall');
        return context$1$0.abrupt('return');

      case 8:
        context$1$0.prev = 8;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(device.remove(bundleId));

      case 11:
        context$1$0.next = 17;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](8);

        _logger2['default'].error('Could not remove \'' + bundleId + '\' from device');
        throw context$1$0.t0;

      case 17:
        _logger2['default'].debug('Removed ' + bundleId);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 13]]);
}

function runRealDeviceReset(device, opts) {
  return _regeneratorRuntime.async(function runRealDeviceReset$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(opts.reset || opts.fullReset)) {
          context$1$0.next = 7;
          break;
        }

        _logger2['default'].debug("Running ios real device reset flow");

        if (!opts.reset) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(resetRealDevice(device, opts));

      case 5:
        context$1$0.next = 8;
        break;

      case 7:
        _logger2['default'].debug("Reset not set, continuing");

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.runSimulatorReset = runSimulatorReset;
exports.isolateSimulatorDevice = isolateSimulatorDevice;
exports.checkSimulatorAvailable = checkSimulatorAvailable;
exports.moveBuiltInApp = moveBuiltInApp;
exports.getAdjustedDeviceName = getAdjustedDeviceName;
exports.endSimulator = endSimulator;
exports.runRealDeviceReset = runRealDeviceReset;
//# sourceMappingURL=data:application/json;charset=utf8;base64,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QkFBTyxLQUFLLHlCQUFzQixRQUFRLG9CQUFnQixDQUFDOzs7O0FBRzdELDRCQUFPLEtBQUssY0FBWSxRQUFRLENBQUcsQ0FBQzs7Ozs7OztDQUV2Qzs7QUFFRCxTQUFlLGtCQUFrQixDQUFFLE1BQU0sRUFBRSxJQUFJOzs7O2NBQ3pDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQTs7Ozs7QUFDOUIsNEJBQU8sS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7O2FBQy9DLElBQUksQ0FBQyxLQUFLOzs7Ozs7eUNBQ04sZUFBZSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7Ozs7Ozs7QUFHckMsNEJBQU8sS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7Ozs7Ozs7Q0FFN0M7O1FBR1EsaUJBQWlCLEdBQWpCLGlCQUFpQjtRQUFFLHNCQUFzQixHQUF0QixzQkFBc0I7UUFBRSx1QkFBdUIsR0FBdkIsdUJBQXVCO1FBQ2xFLGNBQWMsR0FBZCxjQUFjO1FBQUUscUJBQXFCLEdBQXJCLHFCQUFxQjtRQUFFLFlBQVksR0FBWixZQUFZO1FBQUUsa0JBQWtCLEdBQWxCLGtCQUFrQiIsImZpbGUiOiJsaWIvZGV2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGdldERldmljZVN0cmluZyB9IGZyb20gJ2FwcGl1bS1pb3Mtc2ltdWxhdG9yJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tTaW11bGF0b3JBdmFpbGFibGUgKG9wdHMsIHNka1ZlcnNpb24sIGF2YWlsYWJsZURldmljZXMpIHtcbiAgaWYgKHNka1ZlcnNpb24gPCA3LjEpIHtcbiAgICBsb2dnZXIuZGVidWcoJ0luc3RydW1lbnRzIHYgPCA3LjEsIG5vdCBjaGVja2luZyBkZXZpY2Ugc3RyaW5nIHN1cHBvcnQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsb2dnZXIuZGVidWcoJ0NoZWNraW5nIHdoZXRoZXIgb3VyIGRldmljZSBzdHJpbmcgaXMgc3VwcG9ydGVkJyk7XG5cbiAgbGV0IGRTdHJpbmcgPSBhd2FpdCBnZXRBZGp1c3RlZERldmljZU5hbWUob3B0cyk7XG4gIGxldCBub0RldmljZXNFcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgbXNnID0gYENvdWxkIG5vdCBmaW5kIGEgZGV2aWNlIHRvIGxhdW5jaC4gWW91IHJlcXVlc3RlZCBgICtcbiAgICAgICAgICAgICAgYCcke2RTdHJpbmd9JywgYnV0IHRoZSBhdmFpbGFibGUgZGV2aWNlcyB3ZXJlOiBgICtcbiAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoYXZhaWxhYmxlRGV2aWNlcyk7XG4gICAgbG9nZ2VyLmVycm9yQW5kVGhyb3cobXNnKTtcbiAgfTtcbiAgaWYgKHNka1ZlcnNpb24gPj0gOCkge1xuICAgIGxldCBzaW0gPSB1dGlscy5nZXRTaW1Gb3JEZXZpY2VTdHJpbmcoZFN0cmluZywgYXZhaWxhYmxlRGV2aWNlcyk7XG4gICAgaWYgKHNpbVswXSA9PT0gbnVsbCB8fCBzaW1bMV0gPT09IG51bGwpIHtcbiAgICAgIG5vRGV2aWNlc0Vycm9yKCk7XG4gICAgfVxuICAgIGxvZ2dlci5kZWJ1ZyhgaU9TIHNpbSBVRElEIGlzICR7c2ltWzFdfWApO1xuICAgIHJldHVybiBzaW1bMV07XG4gIH0gZWxzZSBpZiAoIV8uaW5jbHVkZXMoYXZhaWxhYmxlRGV2aWNlcywgZFN0cmluZykpIHtcbiAgICBub0RldmljZXNFcnJvcigpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFkanVzdGVkRGV2aWNlTmFtZSAob3B0cykge1xuICBvcHRzLl9hZGp1c3RlZERldmljZU5hbWUgPSBvcHRzLl9hZGp1c3RlZERldmljZU5hbWUgfHwgYXdhaXQgZ2V0RGV2aWNlU3RyaW5nKG9wdHMpO1xuICByZXR1cm4gb3B0cy5fYWRqdXN0ZWREZXZpY2VOYW1lO1xufVxuXG4vLyBUT0RPOiB3aGF0IHRvIGRvIHdpdGggdGhpcz9cbmFzeW5jIGZ1bmN0aW9uIG1vdmVCdWlsdEluQXBwICgvKnNpbSovKSB7XG4gIC8vIGNhbGwgc2ltIGZ1bmN0aW9uIG9uY2UgaXQgaXMgaW4gcGxhY2Vcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuU2ltdWxhdG9yUmVzZXQgKHNpbSwgb3B0cywga2VlcEFwcCkge1xuICBpZiAoIW9wdHMucmVzZXQgJiYgIW9wdHMuZnVsbFJlc2V0KSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdSZXNldCBub3Qgc2V0LCBub3QgZW5kaW5nIHNpbScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxvZ2dlci5kZWJ1ZygnUnVubmluZyBpb3Mgc2ltIHJlc2V0IGZsb3cnKTtcblxuICAvLyBUaGUgc2ltdWxhdG9yIHByb2Nlc3MgbXVzdCBiZSBlbmRlZCBiZWZvcmUgd2UgZGVsZXRlIGFwcGxpY2F0aW9ucy5cbiAgYXdhaXQgZW5kU2ltdWxhdG9yKHNpbSk7XG5cbiAgaWYgKG9wdHMuZnVsbFJlc2V0KSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdGdWxsIHJlc2V0IGlzIG9uLCBzbyBlcmFzaW5nIHNpbXVsYXRvcicpO1xuICAgIGF3YWl0IGZ1bGxSZXNldFNpbXVsYXRvcihzaW0pO1xuICB9IGVsc2UgaWYgKG9wdHMucmVzZXQpIHtcbiAgICBhd2FpdCByZXNldFNpbXVsYXRvcihzaW0sIG9wdHMsIGtlZXBBcHApO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZ1bGxSZXNldFNpbXVsYXRvciAoc2ltKSB7XG4gIGxvZ2dlci5kZWJ1ZygnQ2xlYW5pbmcgdGhlIHNpbXVsYXRvcicpO1xuICBpZiAoc2ltKSB7XG4gICAgYXdhaXQgc2ltLmNsZWFuKCk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzZXRTaW11bGF0b3IgKHNpbSwgb3B0cywga2VlcEFwcCkge1xuICBpZiAoIXNpbSkgcmV0dXJuO1xuXG4gIGxvZ2dlci5kZWJ1ZygnQ2xlYW5pbmcgc2ltIHN0YXRlLicpO1xuICB0cnkge1xuICAgIGF3YWl0IGNsZWFyQXBwRGF0YShzaW0sIG9wdHMsIGtlZXBBcHApO1xuICAgIGF3YWl0IHNpbS5jbGVhbigpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2dnZXIud2FybihlcnIpO1xuICAgIGxvZ2dlci53YXJuKFwiQ291bGQgbm90IHJlc2V0IHNpbXVsYXRvci4gTGVhdmluZyBhcyBpcy5cIik7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZW5kU2ltdWxhdG9yIChzaW0pIHtcbiAgaWYgKCFzaW0pIHJldHVybjtcblxuICBsb2dnZXIuZGVidWcoJ0tpbGxpbmcgdGhlIHNpbXVsYXRvcicpO1xuICBhd2FpdCBzaW0uc2h1dGRvd24oKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaXNvbGF0ZVNpbXVsYXRvckRldmljZSAoc2ltLCBvcHRzLCBzZGtWZXJzaW9uKSB7XG4gIGlmIChvcHRzLmlzb2xhdGVTaW1EZXZpY2UgJiYgc2RrVmVyc2lvbiA+PSA4KSB7XG4gICAgYXdhaXQgc2ltLmlzb2xhdGVTaW0oKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBjbGVhckFwcERhdGEgIChzaW0sIG9wdHMsIGtlZXBBcHApIHtcbiAgaWYgKCFrZWVwQXBwICYmIG9wdHMuYXBwICYmIG9wdHMuYnVuZGxlSWQpIHtcbiAgICBhd2FpdCBzaW0uY2xlYW5DdXN0b21BcHAocGF0aC5iYXNlbmFtZShvcHRzLmFwcCksIG9wdHMuYnVuZGxlSWQpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc2V0UmVhbERldmljZSAoZGV2aWNlLCBvcHRzKSB7XG4gIGlmIChvcHRzLmJ1bmRsZUlkICYmIG9wdHMuZnVsbFJlc2V0KSB7XG4gICAgbGV0IGJ1bmRsZUlkID0gb3B0cy5idW5kbGVJZDtcbiAgICBsb2dnZXIuZGVidWcoYEZ1bGwgcmVzZXQgcmVxdWVzdGVkLiBXaWxsIHRyeSB0byB1bmluc3RhbGwgdGhlIGFwcCAnJHtidW5kbGVJZH0nLmApO1xuICAgIGlmICghYXdhaXQgZGV2aWNlLmlzSW5zdGFsbGVkKGJ1bmRsZUlkKSkge1xuICAgICAgbG9nZ2VyLmRlYnVnKCdBcHAgbm90IGluc3RhbGxlZC4gTm8gbmVlZCB0byB1bmluc3RhbGwnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRldmljZS5yZW1vdmUoYnVuZGxlSWQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nZ2VyLmVycm9yKGBDb3VsZCBub3QgcmVtb3ZlICcke2J1bmRsZUlkfScgZnJvbSBkZXZpY2VgKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgbG9nZ2VyLmRlYnVnKGBSZW1vdmVkICR7YnVuZGxlSWR9YCk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuUmVhbERldmljZVJlc2V0IChkZXZpY2UsIG9wdHMpIHtcbiAgaWYgKG9wdHMucmVzZXQgfHwgb3B0cy5mdWxsUmVzZXQpIHtcbiAgICBsb2dnZXIuZGVidWcoXCJSdW5uaW5nIGlvcyByZWFsIGRldmljZSByZXNldCBmbG93XCIpO1xuICAgIGlmIChvcHRzLnJlc2V0KSB7XG4gICAgICBhd2FpdCByZXNldFJlYWxEZXZpY2UoZGV2aWNlLCBvcHRzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbG9nZ2VyLmRlYnVnKFwiUmVzZXQgbm90IHNldCwgY29udGludWluZ1wiKTtcbiAgfVxufVxuXG5cbmV4cG9ydCB7IHJ1blNpbXVsYXRvclJlc2V0LCBpc29sYXRlU2ltdWxhdG9yRGV2aWNlLCBjaGVja1NpbXVsYXRvckF2YWlsYWJsZSxcbiAgICAgICAgIG1vdmVCdWlsdEluQXBwLCBnZXRBZGp1c3RlZERldmljZU5hbWUsIGVuZFNpbXVsYXRvciwgcnVuUmVhbERldmljZVJlc2V0IH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
