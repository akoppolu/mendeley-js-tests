'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../..');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

describe('File Movement', function () {
  var driver = undefined;
  before(function () {
    driver = new _.IosDriver();
  });

  describe('pullFolder()', function () {

    it('should pull a folder from filesystem as a base64 zip, extract the zip and have same contents as in filesystem', function callee$2$0() {
      var getSimPathStub, tempPath, zippedData, zippedFilepath, unzippedDir;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            getSimPathStub = _sinon2['default'].stub(driver, 'getSimFileFullPath', function () {
              return tempPath;
            });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.tempDir.openDir());

          case 3:
            tempPath = context$3$0.sent;
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(_path2['default'].resolve(tempPath, 'a.txt'), 'Hello World!'));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.pullFolder('/does/not/matter'));

          case 8:
            zippedData = context$3$0.sent;
            zippedFilepath = _path2['default'].resolve(tempPath, 'zip.zip');
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(zippedFilepath, zippedData, { encoding: 'base64' }));

          case 12:
            unzippedDir = _path2['default'].resolve(tempPath, 'unzipped');
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap(_appiumSupport.zip.extractAllTo(zippedFilepath, unzippedDir));

          case 15:
            context$3$0.next = 17;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(_path2['default'].resolve(unzippedDir, 'a.txt'), { encoding: 'utf8' }).should.eventually.equal('Hello World!'));

          case 17:

            getSimPathStub.restore();

          case 18:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});

// Create a temporary directory with one file in it

// Zip the directory to base64 and write it to 'zip.zip'

// Unzip it and check it matches original file contents
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9maWxlLW1vdmVtZW50LXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2dCQUEwQixPQUFPOztxQkFDZixPQUFPOzs7O29CQUNSLE1BQU07Ozs7NkJBQ1UsZ0JBQWdCOztBQUVqRCxRQUFRLENBQUMsZUFBZSxFQUFFLFlBQU07QUFDOUIsTUFBSSxNQUFNLFlBQUEsQ0FBQztBQUNYLFFBQU0sQ0FBQyxZQUFNO0FBQ1gsVUFBTSxHQUFHLGlCQUFlLENBQUM7R0FDMUIsQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTs7QUFFN0IsTUFBRSxDQUFDLCtHQUErRyxFQUFFO1VBQzVHLGNBQWMsRUFHZCxRQUFRLEVBSVIsVUFBVSxFQUNWLGNBQWMsRUFJZCxXQUFXOzs7O0FBWlgsMEJBQWMsR0FBRyxtQkFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLG9CQUFvQixFQUFFO3FCQUFNLFFBQVE7YUFBQSxDQUFDOzs2Q0FHeEQsdUJBQVEsT0FBTyxFQUFFOzs7QUFBbEMsb0JBQVE7OzZDQUNSLGtCQUFHLFNBQVMsQ0FBQyxrQkFBSyxPQUFPLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLGNBQWMsQ0FBQzs7Ozs2Q0FHMUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQzs7O0FBQXhELHNCQUFVO0FBQ1YsMEJBQWMsR0FBRyxrQkFBSyxPQUFPLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQzs7NkNBQ2xELGtCQUFHLFNBQVMsQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLEVBQUMsUUFBUSxFQUFFLFFBQVEsRUFBQyxDQUFDOzs7QUFHOUQsdUJBQVcsR0FBRyxrQkFBSyxPQUFPLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQzs7NkNBQ2hELG1CQUFJLFlBQVksQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDOzs7OzZDQUM3QyxrQkFBRyxRQUFRLENBQUMsa0JBQUssT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQzs7OztBQUVqSCwwQkFBYyxDQUFDLE9BQU8sRUFBRSxDQUFDOzs7Ozs7O0tBQzFCLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VuaXQvZmlsZS1tb3ZlbWVudC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvc0RyaXZlciB9IGZyb20gJy4uLy4uJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHRlbXBEaXIsIGZzLCB6aXAgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cbmRlc2NyaWJlKCdGaWxlIE1vdmVtZW50JywgKCkgPT4ge1xuICBsZXQgZHJpdmVyO1xuICBiZWZvcmUoKCkgPT4ge1xuICAgIGRyaXZlciA9IG5ldyBJb3NEcml2ZXIoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3B1bGxGb2xkZXIoKScsICgpID0+IHtcblxuICAgIGl0KCdzaG91bGQgcHVsbCBhIGZvbGRlciBmcm9tIGZpbGVzeXN0ZW0gYXMgYSBiYXNlNjQgemlwLCBleHRyYWN0IHRoZSB6aXAgYW5kIGhhdmUgc2FtZSBjb250ZW50cyBhcyBpbiBmaWxlc3lzdGVtJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZ2V0U2ltUGF0aFN0dWIgPSBzaW5vbi5zdHViKGRyaXZlciwgJ2dldFNpbUZpbGVGdWxsUGF0aCcsICgpID0+IHRlbXBQYXRoKTtcblxuICAgICAgLy8gQ3JlYXRlIGEgdGVtcG9yYXJ5IGRpcmVjdG9yeSB3aXRoIG9uZSBmaWxlIGluIGl0XG4gICAgICBjb25zdCB0ZW1wUGF0aCA9IGF3YWl0IHRlbXBEaXIub3BlbkRpcigpO1xuICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKHBhdGgucmVzb2x2ZSh0ZW1wUGF0aCwgJ2EudHh0JyksICdIZWxsbyBXb3JsZCEnKTtcblxuICAgICAgLy8gWmlwIHRoZSBkaXJlY3RvcnkgdG8gYmFzZTY0IGFuZCB3cml0ZSBpdCB0byAnemlwLnppcCdcbiAgICAgIGNvbnN0IHppcHBlZERhdGEgPSBhd2FpdCBkcml2ZXIucHVsbEZvbGRlcignL2RvZXMvbm90L21hdHRlcicpO1xuICAgICAgY29uc3QgemlwcGVkRmlsZXBhdGggPSBwYXRoLnJlc29sdmUodGVtcFBhdGgsICd6aXAuemlwJyk7XG4gICAgICBhd2FpdCBmcy53cml0ZUZpbGUoemlwcGVkRmlsZXBhdGgsIHppcHBlZERhdGEsIHtlbmNvZGluZzogJ2Jhc2U2NCd9KTtcblxuICAgICAgLy8gVW56aXAgaXQgYW5kIGNoZWNrIGl0IG1hdGNoZXMgb3JpZ2luYWwgZmlsZSBjb250ZW50c1xuICAgICAgY29uc3QgdW56aXBwZWREaXIgPSBwYXRoLnJlc29sdmUodGVtcFBhdGgsICd1bnppcHBlZCcpO1xuICAgICAgYXdhaXQgemlwLmV4dHJhY3RBbGxUbyh6aXBwZWRGaWxlcGF0aCwgdW56aXBwZWREaXIpO1xuICAgICAgYXdhaXQgZnMucmVhZEZpbGUocGF0aC5yZXNvbHZlKHVuemlwcGVkRGlyLCAnYS50eHQnKSwge2VuY29kaW5nOiAndXRmOCd9KS5zaG91bGQuZXZlbnR1YWxseS5lcXVhbCgnSGVsbG8gV29ybGQhJyk7XG5cbiAgICAgIGdldFNpbVBhdGhTdHViLnJlc3RvcmUoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
