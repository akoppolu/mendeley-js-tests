require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumTestSupport = require('appium-test-support');

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _appiumSupport = require('appium-support');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('driver', function () {
  it('should instantiate class', function () {
    var driver = new _2['default']();
    driver.should.exist;
  });

  describe('unsupported infrastructure', (0, _appiumTestSupport.withMocks)({ xcode: _appiumXcode2['default'] }, function (mocks) {
    var driver = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']();

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should throw an error for Xcode version 8+', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.xcode.expects('getVersion').once().returns({
              versionString: '8.0.0',
              versionFloat: 8.0,
              major: 8,
              minor: 0,
              patch: 0
            });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.createSession({
              platformName: 'iOS',
              deviceName: 'iPhone Simulator',
              app: '/path/to/app'
            }).should.eventually.be.rejectedWith(/Appium's IosDriver does not support xcode version 8.0.0/));

          case 3:
            mocks.xcode.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));

  describe('timeouts', function () {
    var driver = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']();
            // await driver.createSession({});

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    describe('command', function () {
      it('should exist by default', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              driver.newCommandTimeoutMs.should.equal(60000);

            case 1:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should be settable through `timeouts`', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.timeouts('command', 20));

            case 2:
              driver.newCommandTimeoutMs.should.equal(20);

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });
    describe('implicit', function () {
      it('should not exist by default', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              driver.implicitWaitMs.should.equal(0);

            case 1:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should be settable through `timeouts`', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.timeouts('implicit', 20));

            case 2:
              driver.implicitWaitMs.should.equal(20);

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });
    describe('page load', function () {
      it('should be settable through `timeouts`', function callee$3$0() {
        var to;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              to = driver.pageLoadMs;
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(driver.timeouts('page load', to + 20));

            case 3:
              driver.pageLoadMs.should.equal(to + 20);

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });
    describe('script', function () {
      it('should be settable through `timeouts`', function callee$3$0() {
        var to;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              to = driver.asyncWaitMs;
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(driver.timeouts('script', to + 20));

            case 3:
              driver.asyncWaitMs.should.equal(to + 20);

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should be settable through asyncScriptTimeout', function callee$3$0() {
        var to;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              to = driver.asyncWaitMs;
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(driver.asyncScriptTimeout(to + 20));

            case 3:
              driver.asyncWaitMs.should.equal(to + 20);

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });
  });
});

describe('getDeviceTime', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs, teen_process: teen_process }, function (mocks) {
  it('should call idevicedate on real device', function callee$1$0() {
    var udid, date, idevicedatePath, driver;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          udid = 'some-udid';
          date = new Date().toString();
          idevicedatePath = '/path/to/idevicedate';

          mocks.fs.expects('which').once().returns(idevicedatePath);
          mocks.teen_process.expects('exec').once().withExactArgs(idevicedatePath, ['-u', udid]).returns({ stdout: date });
          driver = new _2['default']();

          driver.opts = { udid: udid };

          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(driver.getDeviceTime());

        case 9:
          context$2$0.t0 = date;
          context$2$0.sent.should.equal(context$2$0.t0);

          mocks.fs.verify();
          mocks.teen_process.verify();

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should throw an error when idevicedate cannot be found', function callee$1$0() {
    var udid, driver;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          udid = 'some-udid';

          mocks.fs.expects('which').once().throws();
          driver = new _2['default']();

          driver.opts = { udid: udid };
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(driver.getDeviceTime().should.eventually.be.rejectedWith("Could not capture device date and time"));

        case 6:

          mocks.fs.verify();

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should throw an error when idevicedate fails', function callee$1$0() {
    var udid, idevicedatePath, driver;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          udid = 'some-udid';
          idevicedatePath = '/path/to/idevicedate';

          mocks.fs.expects('which').once().returns(idevicedatePath);
          mocks.teen_process.expects("exec").once().withExactArgs(idevicedatePath, ['-u', udid]).throws("ENOENT");
          driver = new _2['default']();

          driver.opts = { udid: udid };
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(driver.getDeviceTime().should.eventually.be.rejectedWith("Could not capture device date and time"));

        case 8:

          mocks.fs.verify();
          mocks.teen_process.verify();

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should return system date on simulator', function callee$1$0() {
    var driver;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.teen_process.expects("exec").never();
          driver = new _2['default']();
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(driver.getDeviceTime());

        case 4:
          context$2$0.t0 = context$2$0.sent.should.be.an;
          context$2$0.t1 = String;
          context$2$0.t0 instanceof context$2$0.t1;

          mocks.teen_process.verify();

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
