require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../..');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libDeviceLogLogger = require('../../lib/device-log/logger');

var _libDeviceLogLogger2 = _interopRequireDefault(_libDeviceLogLogger);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var LOG_DIR = _path2['default'].resolve('test', 'assets', 'logs');

describe('system logs', function () {
  var tmpSystemLog = undefined;
  var sim = undefined;
  beforeEach(function callee$1$0() {
    var fixSystemLog;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          // get the simulator, and stub what will be called
          sim = {
            udid: 'fake-udid',
            getLogDir: function getLogDir() {},
            getPlatformVersion: function getPlatformVersion() {}
          };
          _sinon2['default'].stub(sim, 'getLogDir').returns(LOG_DIR);
          _sinon2['default'].stub(sim, 'getPlatformVersion').returns('8.4');

          // copy the file into a temporary location, so we can muck with it
          fixSystemLog = _path2['default'].resolve(LOG_DIR, 'system.log.fixture');

          tmpSystemLog = _path2['default'].resolve(LOG_DIR, 'system.log');
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(fixSystemLog, tmpSystemLog));

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(tmpSystemLog));

        case 2:
          if (!context$2$0.sent) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(tmpSystemLog));

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should begin log capture', function callee$1$0() {
    var log, spy, message;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          log = new _.IOSLog({ sim: sim, showLogs: true });
          spy = _sinon2['default'].spy(_libDeviceLogLogger2['default'], 'info');
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(log.startCapture());

        case 4:
          message = 'This is a test log line';
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tmpSystemLog, message + '\n', { flag: 'a' }));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

        case 9:

          spy.calledWith('[IOS_SYSLOG_ROW] ' + message).should.be['true'];

          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(log.stopCapture());

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should rotate log buffer', function callee$1$0() {
    var maxBufferSize, sliceSizeLimit, logRecordsCount, log, recentLogs, i, previousRecentLogs, reminder, firstBufferMessage, lastBufferMessage;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          maxBufferSize = 10;
          sliceSizeLimit = maxBufferSize / 2;

          sliceSizeLimit.should.be.below(maxBufferSize);
          logRecordsCount = maxBufferSize * 2;

          logRecordsCount.should.be.above(maxBufferSize);

          log = new _.IOSLog({ sim: sim, showLogs: false });

          log.maxBufferSize = maxBufferSize;
          log.logIdxSinceLastRequest.should.be.below(0);
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(log.getLogs());

        case 10:
          recentLogs = context$2$0.sent;

          recentLogs.should.have.lengthOf(0);
          log.logIdxSinceLastRequest.should.be.below(0);

          i = 1;

        case 14:
          if (!(i <= logRecordsCount)) {
            context$2$0.next = 30;
            break;
          }

          log.logRow = i + '\n';
          log.onOutput();

          if (!(i >= sliceSizeLimit && i % sliceSizeLimit === 0)) {
            context$2$0.next = 26;
            break;
          }

          previousRecentLogs = recentLogs;
          context$2$0.next = 21;
          return _regeneratorRuntime.awrap(log.getLogs());

        case 21:
          recentLogs = context$2$0.sent;

          if (previousRecentLogs.length && recentLogs.length) {
            previousRecentLogs[0].message.should.not.be.equal(recentLogs[0].message);
          }
          recentLogs.should.have.lengthOf(sliceSizeLimit);
          reminder = log.logIdxSinceLastRequest % sliceSizeLimit;

          reminder.should.equal(0);

        case 26:
          log.logs.should.have.lengthOf(i < maxBufferSize ? i : maxBufferSize);

        case 27:
          ++i;
          context$2$0.next = 14;
          break;

        case 30:
          firstBufferMessage = parseInt(log.logs[0].message, 10);

          firstBufferMessage.should.be.equal(logRecordsCount - log.logs.length + 1);
          lastBufferMessage = parseInt(log.logs[log.logs.length - 1].message, 10);

          lastBufferMessage.should.be.equal(logRecordsCount);

        case 34:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});

// on some slow system (e.g., Travis) need a moment
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9pb3MtbG9nLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Z0JBRXVCLE9BQU87O3FCQUNaLE9BQU87Ozs7NkJBQ04sZ0JBQWdCOztvQkFDbEIsTUFBTTs7OztrQ0FDSiw2QkFBNkI7Ozs7b0JBQy9CLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3dCQUMvQixVQUFVOzs7O0FBR3hCLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsSUFBTSxPQUFPLEdBQUcsa0JBQUssT0FBTyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRXZELFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBTTtBQUM1QixNQUFJLFlBQVksWUFBQSxDQUFDO0FBQ2pCLE1BQUksR0FBRyxZQUFBLENBQUM7QUFDUixZQUFVLENBQUM7UUFXTCxZQUFZOzs7OztBQVRoQixhQUFHLEdBQUc7QUFDSixnQkFBSSxFQUFFLFdBQVc7QUFDakIscUJBQVMsRUFBRSxxQkFBTSxFQUFFO0FBQ25CLDhCQUFrQixFQUFFLDhCQUFNLEVBQUU7V0FDN0IsQ0FBQztBQUNGLDZCQUFNLElBQUksQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlDLDZCQUFNLElBQUksQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7OztBQUdqRCxzQkFBWSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxPQUFPLEVBQUUsb0JBQW9CLENBQUM7O0FBQzlELHNCQUFZLEdBQUcsa0JBQUssT0FBTyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQzs7MkNBQzdDLGtCQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDOzs7Ozs7O0dBQzlDLENBQUMsQ0FBQztBQUNILFdBQVMsQ0FBQzs7Ozs7MkNB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Y0FBYzs7QUFDMUQsa0JBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7QUFFM0IsYUFBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsYUFBYSxHQUFHLENBQUMsR0FBRyxhQUFhLENBQUMsQ0FBQzs7O0FBYmpDLFlBQUUsQ0FBQzs7Ozs7QUFnQm5DLDRCQUFrQixHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7O0FBQzVELDRCQUFrQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNwRSwyQkFBaUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDOztBQUM3RSwyQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQzs7Ozs7OztHQUNwRCxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2lvcy1sb2ctc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IHsgSU9TTG9nIH0gZnJvbSAnLi4vLi4nO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCB7IGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uLy4uL2xpYi9kZXZpY2UtbG9nL2xvZ2dlcic7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5jb25zdCBMT0dfRElSID0gcGF0aC5yZXNvbHZlKCd0ZXN0JywgJ2Fzc2V0cycsICdsb2dzJyk7XG5cbmRlc2NyaWJlKCdzeXN0ZW0gbG9ncycsICgpID0+IHtcbiAgbGV0IHRtcFN5c3RlbUxvZztcbiAgbGV0IHNpbTtcbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgLy8gZ2V0IHRoZSBzaW11bGF0b3IsIGFuZCBzdHViIHdoYXQgd2lsbCBiZSBjYWxsZWRcbiAgICBzaW0gPSB7XG4gICAgICB1ZGlkOiAnZmFrZS11ZGlkJyxcbiAgICAgIGdldExvZ0RpcjogKCkgPT4ge30sXG4gICAgICBnZXRQbGF0Zm9ybVZlcnNpb246ICgpID0+IHt9XG4gICAgfTtcbiAgICBzaW5vbi5zdHViKHNpbSwgJ2dldExvZ0RpcicpLnJldHVybnMoTE9HX0RJUik7XG4gICAgc2lub24uc3R1YihzaW0sICdnZXRQbGF0Zm9ybVZlcnNpb24nKS5yZXR1cm5zKCc4LjQnKTtcblxuICAgIC8vIGNvcHkgdGhlIGZpbGUgaW50byBhIHRlbXBvcmFyeSBsb2NhdGlvbiwgc28gd2UgY2FuIG11Y2sgd2l0aCBpdFxuICAgIGxldCBmaXhTeXN0ZW1Mb2cgPSBwYXRoLnJlc29sdmUoTE9HX0RJUiwgJ3N5c3RlbS5sb2cuZml4dHVyZScpO1xuICAgIHRtcFN5c3RlbUxvZyA9IHBhdGgucmVzb2x2ZShMT0dfRElSLCAnc3lzdGVtLmxvZycpO1xuICAgIGF3YWl0IGZzLmNvcHlGaWxlKGZpeFN5c3RlbUxvZywgdG1wU3lzdGVtTG9nKTtcbiAgfSk7XG4gIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgaWYgKGF3YWl0IGZzLmV4aXN0cyh0bXBTeXN0ZW1Mb2cpKSB7XG4gICAgICBhd2FpdCBmcy51bmxpbmsodG1wU3lzdGVtTG9nKTtcbiAgICB9XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmVnaW4gbG9nIGNhcHR1cmUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGxvZyA9IG5ldyBJT1NMb2coe3NpbSwgc2hvd0xvZ3M6IHRydWV9KTtcbiAgICBsZXQgc3B5ID0gc2lub24uc3B5KGxvZ2dlciwgJ2luZm8nKTtcblxuICAgIGF3YWl0IGxvZy5zdGFydENhcHR1cmUoKTtcblxuICAgIGxldCBtZXNzYWdlID0gJ1RoaXMgaXMgYSB0ZXN0IGxvZyBsaW5lJztcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUodG1wU3lzdGVtTG9nLCBgJHttZXNzYWdlfVxcbmAsIHtmbGFnOiAnYSd9KTtcblxuICAgIC8vIG9uIHNvbWUgc2xvdyBzeXN0ZW0gKGUuZy4sIFRyYXZpcykgbmVlZCBhIG1vbWVudFxuICAgIGF3YWl0IEIuZGVsYXkoNTAwKTtcblxuICAgIHNweS5jYWxsZWRXaXRoKGBbSU9TX1NZU0xPR19ST1ddICR7bWVzc2FnZX1gKS5zaG91bGQuYmUudHJ1ZTtcblxuICAgIGF3YWl0IGxvZy5zdG9wQ2FwdHVyZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJvdGF0ZSBsb2cgYnVmZmVyJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IG1heEJ1ZmZlclNpemUgPSAxMDtcbiAgICBjb25zdCBzbGljZVNpemVMaW1pdCA9IG1heEJ1ZmZlclNpemUgLyAyO1xuICAgIHNsaWNlU2l6ZUxpbWl0LnNob3VsZC5iZS5iZWxvdyhtYXhCdWZmZXJTaXplKTtcbiAgICBjb25zdCBsb2dSZWNvcmRzQ291bnQgPSBtYXhCdWZmZXJTaXplICogMjtcbiAgICBsb2dSZWNvcmRzQ291bnQuc2hvdWxkLmJlLmFib3ZlKG1heEJ1ZmZlclNpemUpO1xuXG4gICAgbGV0IGxvZyA9IG5ldyBJT1NMb2coe3NpbSwgc2hvd0xvZ3M6IGZhbHNlfSk7XG4gICAgbG9nLm1heEJ1ZmZlclNpemUgPSBtYXhCdWZmZXJTaXplO1xuICAgIGxvZy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0LnNob3VsZC5iZS5iZWxvdygwKTtcbiAgICBsZXQgcmVjZW50TG9ncyA9IGF3YWl0IGxvZy5nZXRMb2dzKCk7XG4gICAgcmVjZW50TG9ncy5zaG91bGQuaGF2ZS5sZW5ndGhPZigwKTtcbiAgICBsb2cubG9nSWR4U2luY2VMYXN0UmVxdWVzdC5zaG91bGQuYmUuYmVsb3coMCk7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBsb2dSZWNvcmRzQ291bnQ7ICsraSkge1xuICAgICAgbG9nLmxvZ1JvdyA9IGAke2l9XFxuYDtcbiAgICAgIGxvZy5vbk91dHB1dCgpO1xuICAgICAgaWYgKGkgPj0gc2xpY2VTaXplTGltaXQgJiYgaSAlIHNsaWNlU2l6ZUxpbWl0ID09PSAwKSB7XG4gICAgICAgIGxldCBwcmV2aW91c1JlY2VudExvZ3MgPSByZWNlbnRMb2dzO1xuICAgICAgICByZWNlbnRMb2dzID0gYXdhaXQgbG9nLmdldExvZ3MoKTtcbiAgICAgICAgaWYgKHByZXZpb3VzUmVjZW50TG9ncy5sZW5ndGggJiYgcmVjZW50TG9ncy5sZW5ndGgpIHtcbiAgICAgICAgICBwcmV2aW91c1JlY2VudExvZ3NbMF0ubWVzc2FnZS5zaG91bGQubm90LmJlLmVxdWFsKHJlY2VudExvZ3NbMF0ubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVjZW50TG9ncy5zaG91bGQuaGF2ZS5sZW5ndGhPZihzbGljZVNpemVMaW1pdCk7XG4gICAgICAgIGxldCByZW1pbmRlciA9IGxvZy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0ICUgc2xpY2VTaXplTGltaXQ7XG4gICAgICAgIHJlbWluZGVyLnNob3VsZC5lcXVhbCgwKTtcbiAgICAgIH1cbiAgICAgIGxvZy5sb2dzLnNob3VsZC5oYXZlLmxlbmd0aE9mKGkgPCBtYXhCdWZmZXJTaXplID8gaSA6IG1heEJ1ZmZlclNpemUpO1xuICAgIH1cblxuICAgIGNvbnN0IGZpcnN0QnVmZmVyTWVzc2FnZSA9IHBhcnNlSW50KGxvZy5sb2dzWzBdLm1lc3NhZ2UsIDEwKTtcbiAgICBmaXJzdEJ1ZmZlck1lc3NhZ2Uuc2hvdWxkLmJlLmVxdWFsKGxvZ1JlY29yZHNDb3VudCAtIGxvZy5sb2dzLmxlbmd0aCArIDEpO1xuICAgIGNvbnN0IGxhc3RCdWZmZXJNZXNzYWdlID0gcGFyc2VJbnQobG9nLmxvZ3NbbG9nLmxvZ3MubGVuZ3RoIC0gMV0ubWVzc2FnZSwgMTApO1xuICAgIGxhc3RCdWZmZXJNZXNzYWdlLnNob3VsZC5iZS5lcXVhbChsb2dSZWNvcmRzQ291bnQpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
