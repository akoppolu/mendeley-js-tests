require('source-map-support').install();

'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _libCookiesJs = require('../../lib/cookies.js');

var _libCookiesJs2 = _interopRequireDefault(_libCookiesJs);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

_chai2['default'].should();
_chai2['default'].expect();
var expect = _chai2['default'].expect;

describe('cookies.js', function () {
  it('should properly create a JS cookie', function () {
    var jsCookie = _libCookiesJs2['default'].createJSCookie('k', 'v');
    jsCookie.should.equal('k=v');
  });

  it('should create JS cookie with options given', function () {
    var jsCookie = _libCookiesJs2['default'].createJSCookie('k', 'v', { expires: 'Thu, 01 Jan 2070 3:4:7 GMT', path: '/lib' });
    jsCookie.should.equal('k=v; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
  });

  it('should create JSON cookie object with options given', function () {
    var jsCookie = _libCookiesJs2['default'].createJWPCookie('k', 'k=v; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
    expect(jsCookie).to.deep.equal({ name: 'k', value: 'v', expires: 'Thu, 01 Jan 2070 3:4:7 GMT', path: '/lib' });
  });

  it('should return correct value given key', function () {
    var value = _libCookiesJs2['default'].getValue('k', 'k=v; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
    value.should.equal('v');
  });

  it('should parse each element of string into an object', function () {
    var value = _libCookiesJs2['default'].getValue(undefined, 'k=v; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
    value.should.eql({ k: 'v', expires: 'Thu, 01 Jan 2070 3:4:7 GMT', path: '/lib' });
  });

  it('should handle quoted cookie', function () {
    var value = _libCookiesJs2['default'].getValue('k', 'k="v"; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
    value.should.equal('v');
  });

  it('should handle quoted cookie with internal quotes', function () {
    var value = _libCookiesJs2['default'].getValue('k', 'k="v\"t\""; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
    value.should.equal('v"t"');
  });

  it('should properly decode an encoded key value pair', function () {
    var value = _libCookiesJs2['default'].getValue(' c', encodeURIComponent(' c') + '=' + encodeURIComponent(' v'));
    value.should.equal(' v');
  });

  it('should return undefined for an undefined key value', function () {
    var value = _libCookiesJs2['default'].getValue('someKey', 'k=v');
    expect(value).to.be.undefined;
  });

  it('should decode pluses in the cookie into spaces', function () {
    var value = _libCookiesJs2['default'].getValue('c', 'c=foo+bar');
    value.should.equal('foo bar');
  });

  it('should return undefined and not throw an exception on an invalid URL encoding', function () {
    var value = _libCookiesJs2['default'].getValue('bad', 'bad=foo%');
    expect(value).to.be.undefined;
  });

  it('should create empty object when it is called and there is an empty string', function () {
    _libCookiesJs2['default'].createJWPCookie().should.deep.equal({});
  });

  it('should properly convert the value when a converter is supplied', function () {
    var val = _libCookiesJs2['default'].getValue('c', 'c=' + 1, Number);
    val.should.equal(1);
  });

  it('should return a cookie that expires on 01 Jan 1970 when removeCookie is called', function () {
    _libCookiesJs2['default'].expireCookie('c').should.include('expires=Thu, 01 Jan 1970 00:00:00 GMT');
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9jb29raWVzLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs0QkFFb0Isc0JBQXNCOzs7O29CQUN6QixNQUFNOzs7O0FBR3ZCLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxJQUFJLE1BQU0sR0FBRyxrQkFBSyxNQUFNLENBQUM7O0FBRXpCLFFBQVEsQ0FBRSxZQUFZLEVBQUUsWUFBTTtBQUM1QixJQUFFLENBQUMsb0NBQW9DLEVBQUUsWUFBTTtBQUM3QyxRQUFJLFFBQVEsR0FBRywwQkFBUSxjQUFjLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2hELFlBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQzlCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsNENBQTRDLEVBQUUsWUFBTTtBQUNyRCxRQUFJLFFBQVEsR0FBRywwQkFBUSxjQUFjLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztBQUN2RyxZQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO0dBQzdFLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMscURBQXFELEVBQUUsWUFBTTtBQUM5RCxRQUFJLFFBQVEsR0FBRywwQkFBUSxlQUFlLENBQUMsR0FBRyxFQUFFLG9EQUFvRCxDQUFDLENBQUM7QUFDbEcsVUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztHQUM5RyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFD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QU0sQ0FBQyxPQUFPLENBQUMsdUNBQXVDLENBQUMsQ0FBQztHQUNuRixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2Nvb2tpZXMtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IGNvb2tpZXMgZnJvbSAnLi4vLi4vbGliL2Nvb2tpZXMuanMnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkuZXhwZWN0KCk7XG5sZXQgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG5cbmRlc2NyaWJlICgnY29va2llcy5qcycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBwcm9wZXJseSBjcmVhdGUgYSBKUyBjb29raWUnLCAoKSA9PiB7XG4gICAgbGV0IGpzQ29va2llID0gY29va2llcy5jcmVhdGVKU0Nvb2tpZSgnaycsICd2Jyk7XG4gICAganNDb29raWUuc2hvdWxkLmVxdWFsKCdrPXYnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgSlMgY29va2llIHdpdGggb3B0aW9ucyBnaXZlbicsICgpID0+IHtcbiAgICBsZXQganNDb29raWUgPSBjb29raWVzLmNyZWF0ZUpTQ29va2llKCdrJywgJ3YnLCB7ZXhwaXJlczogJ1RodSwgMDEgSmFuIDIwNzAgMzo0OjcgR01UJywgcGF0aDogJy9saWInfSk7XG4gICAganNDb29raWUuc2hvdWxkLmVxdWFsKCdrPXY7IGV4cGlyZXM9VGh1LCAwMSBKYW4gMjA3MCAzOjQ6NyBHTVQ7IHBhdGg9L2xpYicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBKU09OIGNvb2tpZSBvYmplY3Qgd2l0aCBvcHRpb25zIGdpdmVuJywgKCkgPT4ge1xuICAgIGxldCBqc0Nvb2tpZSA9IGNvb2tpZXMuY3JlYXRlSldQQ29va2llKCdrJywgJ2s9djsgZXhwaXJlcz1UaHUsIDAxIEphbiAyMDcwIDM6NDo3IEdNVDsgcGF0aD0vbGliJyk7XG4gICAgZXhwZWN0KGpzQ29va2llKS50by5kZWVwLmVxdWFsKHtuYW1lOiAnaycsIHZhbHVlOiAndicsIGV4cGlyZXM6ICdUaHUsIDAxIEphbiAyMDcwIDM6NDo3IEdNVCcsIHBhdGg6ICcvbGliJ30pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiBjb3JyZWN0IHZhbHVlIGdpdmVuIGtleScsICgpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBjb29raWVzLmdldFZhbHVlKCdrJywgJ2s9djsgZXhwaXJlcz1UaHUsIDAxIEphbiAyMDcwIDM6NDo3IEdNVDsgcGF0aD0vbGliJyk7XG4gICAgdmFsdWUuc2hvdWxkLmVxdWFsKCd2Jyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcGFyc2UgZWFjaCBlbGVtZW50IG9mIHN0cmluZyBpbnRvIGFuIG9iamVjdCcsICgpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBjb29raWVzLmdldFZhbHVlKHVuZGVmaW5lZCwgJ2s9djsgZXhwaXJlcz1UaHUsIDAxIEphbiAyMDcwIDM6NDo3IEdNVDsgcGF0aD0vbGliJyk7XG4gICAgdmFsdWUuc2hvdWxkLmVxbCh7azogJ3YnLCBleHBpcmVzOiAnVGh1LCAwMSBKYW4gMjA3MCAzOjQ6NyBHTVQnLCBwYXRoOiAnL2xpYid9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgcXVvdGVkIGNvb2tpZScsICgpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBjb29raWVzLmdldFZhbHVlKCdrJywgJ2s9XCJ2XCI7IGV4cGlyZXM9VGh1LCAwMSBKYW4gMjA3MCAzOjQ6NyBHTVQ7IHBhdGg9L2xpYicpO1xuICAgIHZhbHVlLnNob3VsZC5lcXVhbCgndicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGhhbmRsZSBxdW90ZWQgY29va2llIHdpdGggaW50ZXJuYWwgcXVvdGVzJywgKCkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGNvb2tpZXMuZ2V0VmFsdWUoJ2snLCAnaz1cInZcXFwidFxcXCJcIjsgZXhwaXJlcz1UaHUsIDAxIEphbiAyMDcwIDM6NDo3IEdNVDsgcGF0aD0vbGliJyk7XG4gICAgdmFsdWUuc2hvdWxkLmVxdWFsKCd2XCJ0XCInKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBwcm9wZXJseSBkZWNvZGUgYW4gZW5jb2RlZCBrZXkgdmFsdWUgcGFpcicsICgpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBjb29raWVzLmdldFZhbHVlKCcgYycsIGVuY29kZVVSSUNvbXBvbmVudCgnIGMnKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCgnIHYnKSk7XG4gICAgdmFsdWUuc2hvdWxkLmVxdWFsKCcgdicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiB1bmRlZmluZWQgZm9yIGFuIHVuZGVmaW5lZCBrZXkgdmFsdWUnLCAoKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gY29va2llcy5nZXRWYWx1ZSgnc29tZUtleScsICdrPXYnKTtcbiAgICBleHBlY3QodmFsdWUpLnRvLmJlLnVuZGVmaW5lZDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkZWNvZGUgcGx1c2VzIGluIHRoZSBjb29raWUgaW50byBzcGFjZXMnLCAoKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gY29va2llcy5nZXRWYWx1ZSgnYycsICdjPWZvbytiYXInKTtcbiAgICB2YWx1ZS5zaG91bGQuZXF1YWwoJ2ZvbyBiYXInKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gdW5kZWZpbmVkIGFuZCBub3QgdGhyb3cgYW4gZXhjZXB0aW9uIG9uIGFuIGludmFsaWQgVVJMIGVuY29kaW5nJywgKCkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGNvb2tpZXMuZ2V0VmFsdWUoJ2JhZCcsICdiYWQ9Zm9vJScpO1xuICAgIGV4cGVjdCh2YWx1ZSkudG8uYmUudW5kZWZpbmVkO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBlbXB0eSBvYmplY3Qgd2hlbiBpdCBpcyBjYWxsZWQgYW5kIHRoZXJlIGlzIGFuIGVtcHR5IHN0cmluZycsICgpID0+IHtcbiAgICBjb29raWVzLmNyZWF0ZUpXUENvb2tpZSgpLnNob3VsZC5kZWVwLmVxdWFsKHt9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBwcm9wZXJseSBjb252ZXJ0IHRoZSB2YWx1ZSB3aGVuIGEgY29udmVydGVyIGlzIHN1cHBsaWVkJywgKCkgPT4ge1xuICAgIGxldCB2YWwgPSBjb29raWVzLmdldFZhbHVlKCdjJywgJ2M9JyArIDEsIE51bWJlcik7XG4gICAgdmFsLnNob3VsZC5lcXVhbCgxKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gYSBjb29raWUgdGhhdCBleHBpcmVzIG9uIDAxIEphbiAxOTcwIHdoZW4gcmVtb3ZlQ29va2llIGlzIGNhbGxlZCcsICgpID0+IHtcbiAgICBjb29raWVzLmV4cGlyZUNvb2tpZSgnYycpLnNob3VsZC5pbmNsdWRlKCdleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UJyk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
