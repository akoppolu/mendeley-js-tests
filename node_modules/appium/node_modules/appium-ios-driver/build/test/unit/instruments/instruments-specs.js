require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../../..');

var _teen_process = require('teen_process');

var tp = _interopRequireWildcard(_teen_process);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _appiumTestSupport = require('appium-test-support');

var _appiumSupport = require('appium-support');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _helpers = require('./helpers');

_chai2['default'].should();

describe('instruments', function () {
  function getInstruments() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var instruments = new _.Instruments(opts);
    instruments.xcodeVersion = (0, _helpers.getXcodeVersion)();
    instruments.template = '/a/b/c/d/tracetemplate';
    instruments.instrumentsPath = '/a/b/c/instrumentspath';
    return instruments;
  }
  describe('quickInstrument', (0, _appiumTestSupport.withMocks)({ xcode: _appiumXcode2['default'], instrumentsUtils: _.instrumentsUtils }, function (mocks) {
    it('should create instruments', function callee$2$0() {
      var opts, instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.xcode.expects('getVersion').once().returns(_bluebird2['default'].resolve((0, _helpers.getXcodeVersion)()));
            mocks.xcode.expects('getAutomationTraceTemplatePath').once().returns(_bluebird2['default'].resolve('/a/b/c/d/tracetemplate'));
            mocks.instrumentsUtils.expects('getInstrumentsPath').once().returns(_bluebird2['default'].resolve('/a/b/c/instrumentspath'));
            opts = {
              app: '/a/b/c/my.app'
            };
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(_.Instruments.quickInstruments(opts));

          case 6:
            instruments = context$3$0.sent;

            instruments.app.should.equal(opts.app);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('constructor', function () {
    it('should create instruments', function () {
      var opts = {
        app: '/a/b/c/my.app'
      };
      var instruments = new _.Instruments(opts);
      instruments.app.should.equal(opts.app);
    });
  });
  describe('configure', (0, _appiumTestSupport.withMocks)({ xcode: _appiumXcode2['default'], instrumentsUtils: _.instrumentsUtils }, function (mocks) {
    it('should work', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = new _.Instruments({});

            mocks.xcode.expects('getVersion').once().returns(_bluebird2['default'].resolve((0, _helpers.getXcodeVersion)()));
            mocks.xcode.expects('getAutomationTraceTemplatePath').once().returns(_bluebird2['default'].resolve('/a/b/c/d/tracetemplate'));
            mocks.instrumentsUtils.expects('getInstrumentsPath').once().returns(_bluebird2['default'].resolve('/a/b/c/instrumentspath'));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(instruments.configure());

          case 6:
            instruments.xcodeVersion.versionString.should.equal((0, _helpers.getXcodeVersion)().versionString);
            instruments.template.should.equal('/a/b/c/d/tracetemplate');
            instruments.instrumentsPath.should.equal('/a/b/c/instrumentspath');
            (0, _appiumTestSupport.verify)(mocks);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('spawnInstruments', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs, tp: tp, instrumentsUtils: _.instrumentsUtils }, function (mocks) {
    it('should work', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = getInstruments();

            mocks.fs.expects('exists').once().returns(_bluebird2['default'].resolve(false));
            mocks.tp.expects('spawn').once().returns({});
            mocks.instrumentsUtils.expects('getIwdPath').once().returns(_bluebird2['default'].resolve('/a/b/c/iwd'));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(instruments.spawnInstruments());

          case 6:
            (0, _appiumTestSupport.verify)(mocks);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should properly handle process arguments', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = getInstruments();

            instruments.processArguments = '-e firstoption firstoptionsarg -e secondoption second option arg';
            mocks.fs.expects('exists').once().returns(_bluebird2['default'].resolve(false));
            mocks.tp.expects('spawn').once().withArgs(_sinon2['default'].match(instruments.instrumentsPath),
            // sinon.match.string,
            ["-t", "/a/b/c/d/tracetemplate", "-D", "/tmp/appium-instruments/instrumentscli0.trace", undefined, "-e", "firstoption", "firstoptionsarg", "-e", "secondoption", "second option arg", "-e", "UIASCRIPT", undefined, "-e", "UIARESULTSPATH", "/tmp/appium-instruments"], _sinon2['default'].match.object).returns({});
            mocks.instrumentsUtils.expects('getIwdPath').once().returns(_bluebird2['default'].resolve('/a/b/c/iwd'));
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(instruments.spawnInstruments());

          case 7:

            (0, _appiumTestSupport.verify)(mocks);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should properly handle non-environment-variable process arguments', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = getInstruments();

            instruments.processArguments = 'some random process arguments';
            mocks.fs.expects('exists').once().returns(_bluebird2['default'].resolve(false));
            mocks.tp.expects('spawn').once().withArgs(_sinon2['default'].match(instruments.instrumentsPath),
            // sinon.match.string,
            ["-t", "/a/b/c/d/tracetemplate", "-D", "/tmp/appium-instruments/instrumentscli0.trace", undefined, "some random process arguments", "-e", "UIASCRIPT", undefined, "-e", "UIARESULTSPATH", "/tmp/appium-instruments"], _sinon2['default'].match.object).returns({});
            mocks.instrumentsUtils.expects('getIwdPath').once().returns(_bluebird2['default'].resolve('/a/b/c/iwd'));
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(instruments.spawnInstruments());

          case 7:

            (0, _appiumTestSupport.verify)(mocks);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should properly handle process arguments as hash', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = getInstruments();

            instruments.processArguments = { firstoption: 'firstoptionsarg', secondoption: 'second option arg' };
            mocks.fs.expects('exists').once().returns(_bluebird2['default'].resolve(false));
            mocks.tp.expects('spawn').once().withArgs(_sinon2['default'].match(instruments.instrumentsPath),
            // sinon.match.string,
            ["-t", "/a/b/c/d/tracetemplate", "-D", "/tmp/appium-instruments/instrumentscli0.trace", undefined, "-e", "firstoption", "firstoptionsarg", "-e", "secondoption", "second option arg", "-e", "UIASCRIPT", undefined, "-e", "UIARESULTSPATH", "/tmp/appium-instruments"], _sinon2['default'].match.object).returns({});
            mocks.instrumentsUtils.expects('getIwdPath').once().returns(_bluebird2['default'].resolve('/a/b/c/iwd'));
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(instruments.spawnInstruments());

          case 7:

            (0, _appiumTestSupport.verify)(mocks);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should add language and locale arguments when appropriate', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = getInstruments({ locale: "de_DE", language: "de" });

            instruments.processArguments = 'some random process arguments';
            mocks.fs.expects('exists').once().returns(_bluebird2['default'].resolve(false));
            mocks.tp.expects('spawn').once().withArgs(_sinon2['default'].match(instruments.instrumentsPath),
            // sinon.match.string,
            ["-t", "/a/b/c/d/tracetemplate", "-D", "/tmp/appium-instruments/instrumentscli0.trace", undefined, "some random process arguments", "-e", "UIASCRIPT", undefined, "-e", "UIARESULTSPATH", "/tmp/appium-instruments", "-AppleLanguages (de)", "-NSLanguages (de)", "-AppleLocale de_DE"], _sinon2['default'].match.object).returns({});
            mocks.instrumentsUtils.expects('getIwdPath').once().returns(_bluebird2['default'].resolve('/a/b/c/iwd'));
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(instruments.spawnInstruments());

          case 7:

            (0, _appiumTestSupport.verify)(mocks);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
