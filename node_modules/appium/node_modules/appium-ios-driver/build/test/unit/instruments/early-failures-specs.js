require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../../..');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumTestSupport = require('appium-test-support');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _helpers = require('./helpers');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Early failures', (0, _appiumTestSupport.withSandbox)({}, function (S) {
  it('should error when Xcode does not support Instruments', function callee$1$0() {
    var instruments, onExitSpy;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          S.sandbox.stub(_appiumXcode2['default'], 'getVersion').returns((0, _helpers.getXcodeVersion)(8, 0, 0));

          instruments = new _.Instruments({});
          onExitSpy = _sinon2['default'].spy();

          instruments.onShutdown.then(onExitSpy, onExitSpy).done(); // eslint-disable-line
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(instruments.launch().should.be.rejectedWith(/Instruments-based automation was removed in Xcode 8/));

        case 6:
          onExitSpy.should.not.have.been.called;

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should error when Xcode 5.0.1 is used', function callee$1$0() {
    var instruments, onExitSpy;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          S.sandbox.stub(_appiumXcode2['default'], 'getVersion').returns((0, _helpers.getXcodeVersion)(5, 0, 1));

          instruments = new _.Instruments({});
          onExitSpy = _sinon2['default'].spy();

          instruments.onShutdown.then(onExitSpy, onExitSpy).done(); // eslint-disable-line
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(instruments.launch().should.be.rejectedWith(/Xcode 5.0.1 ships with a broken version of Instruments/));

        case 6:
          onExitSpy.should.not.have.been.called;

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should error on getAutomationTraceTemplatePath failure', function callee$1$0() {
    var instruments, onExitSpy;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          S.sandbox.stub(_appiumXcode2['default'], 'getVersion').returns((0, _helpers.getXcodeVersion)());
          S.sandbox.stub(_appiumXcode2['default'], 'getAutomationTraceTemplatePath').returns(_bluebird2['default'].reject(new Error('ouch!')));

          instruments = new _.Instruments({});
          onExitSpy = _sinon2['default'].spy();

          instruments.onShutdown.then(onExitSpy, onExitSpy).done(); // eslint-disable-line
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(instruments.launch().should.be.rejectedWith(/ouch!/));

        case 7:
          onExitSpy.should.not.have.been.called;

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should error on getInstrumentsPath failure', function callee$1$0() {
    var instruments, onExitSpy;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          S.sandbox.stub(_appiumXcode2['default'], 'getVersion').returns((0, _helpers.getXcodeVersion)());
          S.sandbox.stub(_appiumXcode2['default'], 'getAutomationTraceTemplatePath').returns('/path/to/trace/template');

          instruments = new _.Instruments({});

          S.sandbox.stub(_.instrumentsUtils, 'getInstrumentsPath').returns(_bluebird2['default'].reject(new Error('ouch!')));
          onExitSpy = _sinon2['default'].spy();

          instruments.onShutdown.then(onExitSpy, onExitSpy).done(); // eslint-disable-line
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(instruments.launch().should.be.rejectedWith(/ouch!/));

        case 8:
          onExitSpy.should.not.have.been.called;

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9pbnN0cnVtZW50cy9lYXJseS1mYWlsdXJlcy1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O2dCQUU4QyxVQUFVOztvQkFDdkMsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7cUJBQzNCLE9BQU87Ozs7aUNBQ0cscUJBQXFCOzt3QkFDbkMsVUFBVTs7OzsyQkFDTixjQUFjOzs7O3VCQUNBLFdBQVc7O0FBRzNDLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsUUFBUSxDQUFDLGdCQUFnQixFQUFFLG9DQUFZLEVBQUUsRUFBRSxVQUFDLENBQUMsRUFBSztBQUNoRCxJQUFFLENBQUMsc0RBQXNELEVBQUU7UUFHckQsV0FBVyxFQUNYLFNBQVM7Ozs7QUFIYixXQUFDLENBQUMsT0FBTyxDQUFDLElBQUksMkJBQVEsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLDhCQUFnQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRWxFLHFCQUFXLEdBQUcsa0JBQWdCLEVBQUUsQ0FBQztBQUNqQyxtQkFBUyxHQUFHLG1CQUFNLEdBQUcsRUFBRTs7QUFDM0IscUJBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7MkNBQ25ELFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxxREFBcUQsQ0FBQzs7O0FBQ3hHLG1CQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7Ozs7OztHQUN2QyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHVDQUF1QyxFQUFFO1FBR3RDLFdBQVcsRUFDWCxTQUFTOzs7O0FBSGIsV0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLDJCQUFRLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyw4QkFBZ0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVsRSxxQkFBVyxHQUFHLGtCQUFnQixFQUFFLENBQUM7QUFDakMsbUJBQVMsR0FBRyxtQkFBTSxHQUFHLEVBQUU7O0FBQzNCLHFCQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7OzJDQUNuRCxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsd0RBQXdELENBQUM7OztBQUMzRyxtQkFBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Ozs7Ozs7R0FDdkMsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyx3REFBd0QsRUFBRTtRQUl2RCxXQUFXLEVBQ1gsU0FBUzs7OztBQUpiLFdBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSwyQkFBUSxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsK0JBQWlCLENBQUMsQ0FBQztBQUMvRCxXQUFDLENBQUMsT0FBTyxDQUFDLElBQUksMkJBQVEsZ0NBQWdDLENBQUMsQ0FBQyxPQUFPLENBQUMsc0JBQUUsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFMUYscUJBQVcsR0FBRyxrQkFBZ0IsRUFBRSxDQUFDO0FBQ2pDLG1CQUFTLEdBQUcsbUJBQU0sR0FBRyxFQUFFOztBQUMzQixxQkFBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDOzsyQ0FDbkQsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQzs7O0FBQzFELG1CQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7Ozs7OztHQUN2QyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLDRDQUE0QyxFQUFFO1FBSTNDLFdBQVcsRUFFWCxTQUFTOzs7O0FBTGIsV0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLDJCQUFRLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQywrQkFBaUIsQ0FBQyxDQUFDO0FBQy9ELFdBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSwyQkFBUSxnQ0FBZ0MsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDOztBQUV2RixxQkFBVyxHQUFHLGtCQUFnQixFQUFFLENBQUM7O0FBQ3JDLFdBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxxQkFBbUIsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsc0JBQUUsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6RixtQkFBUyxHQUFHLG1CQUFNLEdBQUcsRUFBRTs7QUFDM0IscUJBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7MkNBQ25ELFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7OztBQUMxRCxtQkFBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Ozs7Ozs7R0FDdkMsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2luc3RydW1lbnRzL2Vhcmx5LWZhaWx1cmVzLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7IEluc3RydW1lbnRzLCBpbnN0cnVtZW50c1V0aWxzIH0gZnJvbSAnLi4vLi4vLi4nO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IHsgd2l0aFNhbmRib3ggfSBmcm9tICdhcHBpdW0tdGVzdC1zdXBwb3J0JztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB4Y29kZSBmcm9tICdhcHBpdW0teGNvZGUnO1xuaW1wb3J0IHsgZ2V0WGNvZGVWZXJzaW9uIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgnRWFybHkgZmFpbHVyZXMnLCB3aXRoU2FuZGJveCh7fSwgKFMpID0+IHtcbiAgaXQoJ3Nob3VsZCBlcnJvciB3aGVuIFhjb2RlIGRvZXMgbm90IHN1cHBvcnQgSW5zdHJ1bWVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgUy5zYW5kYm94LnN0dWIoeGNvZGUsICdnZXRWZXJzaW9uJykucmV0dXJucyhnZXRYY29kZVZlcnNpb24oOCwgMCwgMCkpO1xuXG4gICAgbGV0IGluc3RydW1lbnRzID0gbmV3IEluc3RydW1lbnRzKHt9KTtcbiAgICBsZXQgb25FeGl0U3B5ID0gc2lub24uc3B5KCk7XG4gICAgaW5zdHJ1bWVudHMub25TaHV0ZG93bi50aGVuKG9uRXhpdFNweSwgb25FeGl0U3B5KS5kb25lKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBhd2FpdCBpbnN0cnVtZW50cy5sYXVuY2goKS5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9JbnN0cnVtZW50cy1iYXNlZCBhdXRvbWF0aW9uIHdhcyByZW1vdmVkIGluIFhjb2RlIDgvKTtcbiAgICBvbkV4aXRTcHkuc2hvdWxkLm5vdC5oYXZlLmJlZW4uY2FsbGVkO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGVycm9yIHdoZW4gWGNvZGUgNS4wLjEgaXMgdXNlZCcsIGFzeW5jICgpID0+IHtcbiAgICBTLnNhbmRib3guc3R1Yih4Y29kZSwgJ2dldFZlcnNpb24nKS5yZXR1cm5zKGdldFhjb2RlVmVyc2lvbig1LCAwLCAxKSk7XG5cbiAgICBsZXQgaW5zdHJ1bWVudHMgPSBuZXcgSW5zdHJ1bWVudHMoe30pO1xuICAgIGxldCBvbkV4aXRTcHkgPSBzaW5vbi5zcHkoKTtcbiAgICBpbnN0cnVtZW50cy5vblNodXRkb3duLnRoZW4ob25FeGl0U3B5LCBvbkV4aXRTcHkpLmRvbmUoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGF3YWl0IGluc3RydW1lbnRzLmxhdW5jaCgpLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoL1hjb2RlIDUuMC4xIHNoaXBzIHdpdGggYSBicm9rZW4gdmVyc2lvbiBvZiBJbnN0cnVtZW50cy8pO1xuICAgIG9uRXhpdFNweS5zaG91bGQubm90LmhhdmUuYmVlbi5jYWxsZWQ7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZXJyb3Igb24gZ2V0QXV0b21hdGlvblRyYWNlVGVtcGxhdGVQYXRoIGZhaWx1cmUnLCBhc3luYyAoKSA9PiB7XG4gICAgUy5zYW5kYm94LnN0dWIoeGNvZGUsICdnZXRWZXJzaW9uJykucmV0dXJucyhnZXRYY29kZVZlcnNpb24oKSk7XG4gICAgUy5zYW5kYm94LnN0dWIoeGNvZGUsICdnZXRBdXRvbWF0aW9uVHJhY2VUZW1wbGF0ZVBhdGgnKS5yZXR1cm5zKEIucmVqZWN0KG5ldyBFcnJvcignb3VjaCEnKSkpO1xuXG4gICAgbGV0IGluc3RydW1lbnRzID0gbmV3IEluc3RydW1lbnRzKHt9KTtcbiAgICBsZXQgb25FeGl0U3B5ID0gc2lub24uc3B5KCk7XG4gICAgaW5zdHJ1bWVudHMub25TaHV0ZG93bi50aGVuKG9uRXhpdFNweSwgb25FeGl0U3B5KS5kb25lKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBhd2FpdCBpbnN0cnVtZW50cy5sYXVuY2goKS5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9vdWNoIS8pO1xuICAgIG9uRXhpdFNweS5zaG91bGQubm90LmhhdmUuYmVlbi5jYWxsZWQ7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZXJyb3Igb24gZ2V0SW5zdHJ1bWVudHNQYXRoIGZhaWx1cmUnLCBhc3luYyAoKSA9PiB7XG4gICAgUy5zYW5kYm94LnN0dWIoeGNvZGUsICdnZXRWZXJzaW9uJykucmV0dXJucyhnZXRYY29kZVZlcnNpb24oKSk7XG4gICAgUy5zYW5kYm94LnN0dWIoeGNvZGUsICdnZXRBdXRvbWF0aW9uVHJhY2VUZW1wbGF0ZVBhdGgnKS5yZXR1cm5zKCcvcGF0aC90by90cmFjZS90ZW1wbGF0ZScpO1xuXG4gICAgbGV0IGluc3RydW1lbnRzID0gbmV3IEluc3RydW1lbnRzKHt9KTtcbiAgICBTLnNhbmRib3guc3R1YihpbnN0cnVtZW50c1V0aWxzLCAnZ2V0SW5zdHJ1bWVudHNQYXRoJykucmV0dXJucyhCLnJlamVjdChuZXcgRXJyb3IoJ291Y2ghJykpKTtcbiAgICBsZXQgb25FeGl0U3B5ID0gc2lub24uc3B5KCk7XG4gICAgaW5zdHJ1bWVudHMub25TaHV0ZG93bi50aGVuKG9uRXhpdFNweSwgb25FeGl0U3B5KS5kb25lKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBhd2FpdCBpbnN0cnVtZW50cy5sYXVuY2goKS5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9vdWNoIS8pO1xuICAgIG9uRXhpdFNweS5zaG91bGQubm90LmhhdmUuYmVlbi5jYWxsZWQ7XG4gIH0pO1xufSkpO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
