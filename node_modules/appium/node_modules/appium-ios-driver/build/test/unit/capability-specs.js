'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../..');

var _libUtils = require('../../lib/utils');

var _libUtils2 = _interopRequireDefault(_libUtils);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumTestSupport = require('appium-test-support');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var sandbox = _sinon2['default'].sandbox.create();
var should = _chai2['default'].Should();

describe('Desired Capabilities', function () {
  var driver = undefined;
  before(function () {
    driver = new _.IosDriver();
  });

  function checkCaps(caps) {
    var throws = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    if (throws) {
      should.Throw(function () {
        driver.validateDesiredCaps(caps);
      });
    } else {
      should.not.Throw(function () {
        driver.validateDesiredCaps(caps);
      });
    }
  }

  describe('platform name, app and bundleId', function () {
    it('should throw error if neither app nor bundleId are present', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5'
      };
      checkCaps(caps, true);
    });
    it('should accept an app', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app'
      };
      checkCaps(caps);
    });
    it('should accept a bundleId', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        bundleId: 'com.some-company.some-app'
      };
      checkCaps(caps);
    });
    it('should not be sensitive to platform name casing', function () {
      var caps = {
        platformName: 'IoS',
        deviceName: 'iPhone 5',
        bundleId: 'com.some-company.some-app'
      };
      checkCaps(caps);
    });
  });

  describe('launchTimeout', function () {
    it('should accept a number', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        launchTimeout: 1
      };
      checkCaps(caps);
    });
    it('should accept an object', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        launchTimeout: {
          global: 1
        }
      };
      checkCaps(caps);
    });
    it('should accept a stringified object', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        launchTimeout: JSON.stringify({
          global: 1
        })
      };
      checkCaps(caps);
    });
    it('should fail for non-JSON string', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        launchTimeout: 'launch timeout!'
      };
      checkCaps(caps, true);
    });
  });

  describe('processArguments', function () {
    it('should accept plain string', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        processArguments: 'this is a process argument'
      };
      checkCaps(caps);
    });
    it('should accept an object', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        processArguments: {
          global: 1
        }
      };
      checkCaps(caps);
    });
    it('should accept a stringified object', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        processArguments: JSON.stringify({
          global: 1
        })
      };
      checkCaps(caps);
    });
    it('should fail for non-string, non-object', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        processArguments: 4
      };
      checkCaps(caps, true);
    });
  });

  describe('server capabilities', (0, _appiumTestSupport.withMocks)({ xcode: _appiumXcode2['default'] }, function (mocks) {
    it('should collect server capabilities', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.xcode.expects('getVersion').once().returns({
              versionString: '7.0.0',
              versionFloat: 7.0,
              major: 7,
              minor: 0,
              patch: 0
            });

            sandbox.stub(driver, 'configureApp');
            sandbox.stub(driver, 'validateDesiredCaps');
            sandbox.stub(driver, 'start');
            sandbox.stub(driver, 'startNewCommandTimeout');
            sandbox.stub(_libUtils2['default'], 'detectUdid');
            sandbox.stub(_libUtils2['default'], 'prepareIosOpts');
            caps = {
              platformName: 'iOS',
              deviceName: 'iPhone 5',
              app: 'some-app'
            };
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.createSession(caps));

          case 10:
            driver.caps.takesScreenshot.should.exist;
            sandbox.restore();

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
