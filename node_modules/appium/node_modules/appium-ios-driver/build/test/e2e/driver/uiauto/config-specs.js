require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _base = require('./base');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

describe('uiauto - config', function () {
  describe('custom socket', function () {
    var _this = this;

    var altSockDir = '/tmp/abcd';
    var altSock = _path2['default'].resolve(altSockDir, 'sock');
    var ctx = undefined;
    (0, _base.globalInit)(this, { chai: true, sock: altSock });
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(altSockDir));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)({ sock: altSock }));

          case 4:
            ctx = context$3$0.sent;

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should use the alternate sock', function () {
      ctx.proxy.should.exist;
      ctx.proxy.sock.should.equal(altSock);
    });

    it('should work', function callee$2$0() {
      var res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              return 'OK Boss';
            }));

          case 2:
            res = context$3$0.sent;

            res.should.equal('OK Boss');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL2RyaXZlci91aWF1dG8vY29uZmlnLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O29CQUU2RCxRQUFROztvQkFDckQsTUFBTTs7Ozs2QkFDSCxnQkFBZ0I7O0FBR25DLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZO0FBQ3RDLFVBQVEsQ0FBQyxlQUFlLEVBQUUsWUFBWTs7O0FBQ3BDLFFBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztBQUM3QixRQUFJLE9BQU8sR0FBRyxrQkFBSyxPQUFPLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQy9DLFFBQUksR0FBRyxZQUFBLENBQUM7QUFDUiwwQkFBVyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0FBQzlDLFVBQU0sQ0FBQzs7Ozs7NkNBQ0Msa0JBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQzs7Ozs2Q0FDZixtQ0FBd0IsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUM7OztBQUF0RCxlQUFHOzs7Ozs7O0tBQ0osQ0FBQyxDQUFDO0FBQ0gsU0FBSyxDQUFDOzs7Ozs2Q0FDRSxtQkFBUSxHQUFHLENBQUM7Ozs7Ozs7S0FDbkIsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQywrQkFBK0IsRUFBRSxZQUFZO0FBQzlDLFNBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUN2QixTQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3RDLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsYUFBYSxFQUFFO1VBQ1osR0FBRzs7Ozs7NkNBQVMsR0FBRyxDQUFDLFFBQVEsQ0FDMUIsWUFBWTtBQUNWLHFCQUFPLFNBQVMsQ0FBQzthQUNsQixDQUNGOzs7QUFKRyxlQUFHOztBQUtQLGVBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDOzs7Ozs7O0tBQzdCLENBQUMsQ0FBQztHQUVKLENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2UyZS9kcml2ZXIvdWlhdXRvL2NvbmZpZy1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgeyBpbnN0cnVtZW50c0luc3RhbmNlSW5pdCwgZ2xvYmFsSW5pdCwga2lsbEFsbCB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgcGF0aCBmcm9tJ3BhdGgnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cblxuZGVzY3JpYmUoJ3VpYXV0byAtIGNvbmZpZycsIGZ1bmN0aW9uICgpIHtcbiAgZGVzY3JpYmUoJ2N1c3RvbSBzb2NrZXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGFsdFNvY2tEaXIgPSAnL3RtcC9hYmNkJztcbiAgICBsZXQgYWx0U29jayA9IHBhdGgucmVzb2x2ZShhbHRTb2NrRGlyLCAnc29jaycpO1xuICAgIGxldCBjdHg7XG4gICAgZ2xvYmFsSW5pdCh0aGlzLCB7Y2hhaTogdHJ1ZSwgc29jazogYWx0U29ja30pO1xuICAgIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBmcy5yaW1yYWYoYWx0U29ja0Rpcik7XG4gICAgICBjdHggPSBhd2FpdCBpbnN0cnVtZW50c0luc3RhbmNlSW5pdCh7IHNvY2s6IGFsdFNvY2sgfSk7XG4gICAgfSk7XG4gICAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQga2lsbEFsbChjdHgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1c2UgdGhlIGFsdGVybmF0ZSBzb2NrJywgZnVuY3Rpb24gKCkge1xuICAgICAgY3R4LnByb3h5LnNob3VsZC5leGlzdDtcbiAgICAgIGN0eC5wcm94eS5zb2NrLnNob3VsZC5lcXVhbChhbHRTb2NrKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgd29yaycsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCByZXMgPSBhd2FpdCBjdHguZXhlY0Z1bmMoXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gJ09LIEJvc3MnO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgcmVzLnNob3VsZC5lcXVhbCgnT0sgQm9zcycpO1xuICAgIH0pO1xuXG4gIH0pO1xuXG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vLi4ifQ==
