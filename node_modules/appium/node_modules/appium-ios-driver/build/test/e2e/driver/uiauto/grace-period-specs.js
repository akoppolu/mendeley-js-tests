require('source-map-support').install();

/* globals $ */

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _base = require('./base');

var _appiumXcode = require('appium-xcode');

describe('uiauto - grace period', function () {
  var imports = { post: ['uiauto/lib/mechanic-ext/gesture-ext.js', 'uiauto/lib/mechanic-ext/keyboard-ext.js'] };
  (0, _base.globalInit)(this, { imports: imports, bootstrap: 'basic' });

  describe('looking for non-existant object', function () {
    var _this = this;

    var expectedTime = 2000;
    var ctx = undefined;
    before(function callee$2$0() {
      var xcodeVersion;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.instrumentsInstanceInit)());

          case 2:
            ctx = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _appiumXcode.getVersion)());

          case 5:
            xcodeVersion = context$3$0.sent;

            if (xcodeVersion[0] >= 7) {
              expectedTime = 4000;
            }

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _base.killAll)(ctx));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should be quick when grace period is not set', function callee$2$0() {
      var refMs, res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            refMs = Date.now();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              return $('#not exist');
            }));

          case 3:
            res = context$3$0.sent;

            (Date.now() - refMs).should.be.below(expectedTime);
            res.should.have.length(0);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should be quick when pushing and popping 0 timeout', function callee$2$0() {
      var refMs, res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            refMs = Date.now();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              $.target().pushTimeout(0);
              var res = $('#not exist');
              $.target().popTimeout();
              return res;
            }));

          case 3:
            res = context$3$0.sent;

            res.should.have.length(0);
            (Date.now() - refMs).should.be.below(expectedTime);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    // Skipping because of bug, it takes more than 25 second!
    it.skip('should be quick when grace period is set to 1', function callee$2$0() {
      var refMs, res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            refMs = Date.now();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(ctx.execFunc(function () {
              $.target().setTimeout(1);
              $.warn('lookup starting');
              var res = $('#not exist');
              $.warn('lookup finished');
              return res;
            }));

          case 3:
            res = context$3$0.sent;

            res.should.have.length(0)(Date.now() - refMs).should.be.below(5000);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});

// xcode 7 is a bit slow.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL2RyaXZlci91aWF1dG8vZ3JhY2UtcGVyaW9kLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7b0JBRzZELFFBQVE7OzJCQUMxQyxjQUFjOztBQUd6QyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsWUFBWTtBQUM1QyxNQUFJLE9BQU8sR0FBRyxFQUFFLElBQUksRUFBRSxDQUNwQix3Q0FBd0MsRUFDeEMseUNBQXlDLENBQzFDLEVBQUMsQ0FBQztBQUNILHdCQUFXLElBQUksRUFBRSxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7O0FBRXpELFVBQVEsQ0FBQyxpQ0FBaUMsRUFBRSxZQUFZOzs7QUFDdEQsUUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLFFBQUksR0FBRyxZQUFBLENBQUM7QUFDUixVQUFNLENBQUM7VUFJRCxZQUFZOzs7Ozs2Q0FISixvQ0FBeUI7OztBQUFyQyxlQUFHOzs2Q0FHc0IsOEJBQVk7OztBQUFqQyx3QkFBWTs7QUFDaEIsZ0JBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN4QiwwQkFBWSxHQUFHLElBQUksQ0FBQzthQUNyQjs7Ozs7OztLQUNGLENBQUMsQ0FBQztBQUNILFNBQUssQ0FBQzs7Ozs7NkNBQ0UsbUJBQVEsR0FBRyxDQUFDOzs7Ozs7O0tBQ25CLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsOENBQThDLEVBQUU7VUFDN0MsS0FBSyxFQUNMLEdBQUc7Ozs7QUFESCxpQkFBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUU7OzZDQUNOLEdBQUcsQ0FBQyxRQUFRLENBQzFCLFlBQVk7QUFDVixxQkFBTyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDeEIsQ0FDRjs7O0FBSkcsZUFBRzs7QUFLUCxhQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUEsQ0FBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNuRCxlQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7S0FDM0IsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyxvREFBb0QsRUFBRTtVQUNuRCxLQUFLLEVBQ0wsR0FBRzs7OztBQURILGlCQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRTs7NkNBQ04sR0FBRyxDQUFDLFFBQVEsQ0FDMUIsWUFBWTtBQUNWLGVBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsa0JBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMxQixlQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDeEIscUJBQU8sR0FBRyxDQUFDO2FBQ1osQ0FDRjs7O0FBUEcsZUFBRzs7QUFRUCxlQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsYUFBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFBLENBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7Ozs7Ozs7S0FDcEQsQ0FBQyxDQUFDOzs7QUFHSCxNQUFFLENBQUMsSUFBSSxDQUFDLCtDQUErQyxFQUFFO1VBQ25ELEtBQUssRUFDTCxHQUFHOzs7O0FBREgsaUJBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFOzs2Q0FDTixHQUFHLENBQUMsUUFBUSxDQUMxQixZQUFZO0FBQ1YsZUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6QixlQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDMUIsa0JBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMxQixlQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDMUIscUJBQU8sR0FBRyxDQUFDO2FBQ1osQ0FDRjs7O0FBUkcsZUFBRzs7QUFTUCxlQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Ozs7OztLQUM1QyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lMmUvZHJpdmVyL3VpYXV0by9ncmFjZS1wZXJpb2Qtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcbi8qIGdsb2JhbHMgJCAqL1xuXG5pbXBvcnQgeyBpbnN0cnVtZW50c0luc3RhbmNlSW5pdCwgZ2xvYmFsSW5pdCwga2lsbEFsbCB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBnZXRWZXJzaW9uIH0gZnJvbSAnYXBwaXVtLXhjb2RlJztcblxuXG5kZXNjcmliZSgndWlhdXRvIC0gZ3JhY2UgcGVyaW9kJywgZnVuY3Rpb24gKCkge1xuICBsZXQgaW1wb3J0cyA9IHsgcG9zdDogW1xuICAgICd1aWF1dG8vbGliL21lY2hhbmljLWV4dC9nZXN0dXJlLWV4dC5qcycsXG4gICAgJ3VpYXV0by9saWIvbWVjaGFuaWMtZXh0L2tleWJvYXJkLWV4dC5qcycsXG4gIF19O1xuICBnbG9iYWxJbml0KHRoaXMsIHtpbXBvcnRzOiBpbXBvcnRzLCBib290c3RyYXA6ICdiYXNpYyd9KTtcblxuICBkZXNjcmliZSgnbG9va2luZyBmb3Igbm9uLWV4aXN0YW50IG9iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZXhwZWN0ZWRUaW1lID0gMjAwMDtcbiAgICBsZXQgY3R4O1xuICAgIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgICBjdHggPSBhd2FpdCBpbnN0cnVtZW50c0luc3RhbmNlSW5pdCgpO1xuXG4gICAgICAvLyB4Y29kZSA3IGlzIGEgYml0IHNsb3cuXG4gICAgICBsZXQgeGNvZGVWZXJzaW9uID0gYXdhaXQgZ2V0VmVyc2lvbigpO1xuICAgICAgaWYgKHhjb2RlVmVyc2lvblswXSA+PSA3KSB7XG4gICAgICAgIGV4cGVjdGVkVGltZSA9IDQwMDA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQga2lsbEFsbChjdHgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBiZSBxdWljayB3aGVuIGdyYWNlIHBlcmlvZCBpcyBub3Qgc2V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHJlZk1zID0gRGF0ZS5ub3coKTtcbiAgICAgIGxldCByZXMgPSBhd2FpdCBjdHguZXhlY0Z1bmMoXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gJCgnI25vdCBleGlzdCcpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgKERhdGUubm93KCkgLSByZWZNcykuc2hvdWxkLmJlLmJlbG93KGV4cGVjdGVkVGltZSk7XG4gICAgICByZXMuc2hvdWxkLmhhdmUubGVuZ3RoKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBiZSBxdWljayB3aGVuIHB1c2hpbmcgYW5kIHBvcHBpbmcgMCB0aW1lb3V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHJlZk1zID0gRGF0ZS5ub3coKTtcbiAgICAgIGxldCByZXMgPSBhd2FpdCBjdHguZXhlY0Z1bmMoXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkLnRhcmdldCgpLnB1c2hUaW1lb3V0KDApO1xuICAgICAgICAgIHZhciByZXMgPSAkKCcjbm90IGV4aXN0Jyk7XG4gICAgICAgICAgJC50YXJnZXQoKS5wb3BUaW1lb3V0KCk7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHJlcy5zaG91bGQuaGF2ZS5sZW5ndGgoMCk7XG4gICAgICAoRGF0ZS5ub3coKSAtIHJlZk1zKS5zaG91bGQuYmUuYmVsb3coZXhwZWN0ZWRUaW1lKTtcbiAgICB9KTtcblxuICAgIC8vIFNraXBwaW5nIGJlY2F1c2Ugb2YgYnVnLCBpdCB0YWtlcyBtb3JlIHRoYW4gMjUgc2Vjb25kIVxuICAgIGl0LnNraXAoJ3Nob3VsZCBiZSBxdWljayB3aGVuIGdyYWNlIHBlcmlvZCBpcyBzZXQgdG8gMScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCByZWZNcyA9IERhdGUubm93KCk7XG4gICAgICBsZXQgcmVzID0gYXdhaXQgY3R4LmV4ZWNGdW5jKFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJC50YXJnZXQoKS5zZXRUaW1lb3V0KDEpO1xuICAgICAgICAgICQud2FybignbG9va3VwIHN0YXJ0aW5nJyk7XG4gICAgICAgICAgdmFyIHJlcyA9ICQoJyNub3QgZXhpc3QnKTtcbiAgICAgICAgICAkLndhcm4oJ2xvb2t1cCBmaW5pc2hlZCcpO1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICByZXMuc2hvdWxkLmhhdmUubGVuZ3RoKDApXG4gICAgICAoRGF0ZS5ub3coKSAtIHJlZk1zKS5zaG91bGQuYmUuYmVsb3coNTAwMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uLy4uIn0=
