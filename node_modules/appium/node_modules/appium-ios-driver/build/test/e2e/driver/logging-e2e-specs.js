require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _helpersEnv = require('../helpers/env');

var _helpersEnv2 = _interopRequireDefault(_helpersEnv);

var _libUtils = require('../../../lib/utils');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _2 = require('../../..');

var _libCommandsLoggingJs = require('../../../lib/commands/logging.js');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _helpersSession = require('../helpers/session');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('commands - logging', function () {
  var _this = this;

  this.timeout(_helpersSession.MOCHA_TIMEOUT);
  var driver = undefined;

  before(function () {
    driver = new _2.IosDriver();
  });

  describe('getLogTypes', function () {
    it('should get the list of available logs', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.getLogTypes.should.be.a.Function;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getLogTypes());

          case 3:
            context$3$0.t0 = _lodash2['default'].keys(_libCommandsLoggingJs.SUPPORTED_LOG_TYPES);
            context$3$0.sent.should.eql(context$3$0.t0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('getLog', function () {
    var caps = {
      app: _path2['default'].resolve(_libUtils.rootDir, 'test', 'assets', 'TestApp.zip'),
      platformName: 'iOS',
      showIOSLog: true,
      noReset: true,
      newCommandTimeout: 120
    };
    caps = _lodash2['default'].merge({}, _helpersEnv2['default'].CAPS, caps);

    describe('errors', function () {
      it('should throw an error when an invalid type is given', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.getLog('something-random').should.eventually.be.rejected);

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should throw an error when driver is not started', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.getLog('syslog').should.eventually.be.rejected);

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });

    describe('success', function () {
      before(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              // TODO: figure out why this is so flakey in Travis
              if (process.env.TRAVIS) this.skip();
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(driver.createSession(caps));

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      after(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.deleteSession());

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get system logs', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.getLog('syslog'));

            case 2:
              context$4$0.sent.should.be.an.Array;

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get crash logs', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.getLog('crashlog'));

            case 2:
              context$4$0.sent.should.be.an.Array;

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL2RyaXZlci9sb2dnaW5nLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OzswQkFFZ0IsZ0JBQWdCOzs7O3dCQUNSLG9CQUFvQjs7b0JBQzNCLE1BQU07Ozs7aUJBQ0csVUFBVTs7b0NBQ0Esa0NBQWtDOztvQkFDckQsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7c0JBQy9CLFFBQVE7Ozs7OEJBQ1Esb0JBQW9COztBQUdsRCxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxZQUFZOzs7QUFDekMsTUFBSSxDQUFDLE9BQU8sK0JBQWUsQ0FBQztBQUM1QixNQUFJLE1BQU0sWUFBQSxDQUFDOztBQUVYLFFBQU0sQ0FBQyxZQUFNO0FBQ1gsVUFBTSxHQUFHLGtCQUFlLENBQUM7R0FDMUIsQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBTTtBQUM1QixNQUFFLENBQUMsdUNBQXVDLEVBQUU7Ozs7QUFDMUMsa0JBQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDOzs2Q0FDakMsTUFBTSxDQUFDLFdBQVcsRUFBRTs7OzZCQUFhLG9CQUFFLElBQUksMkNBQXFCOzZCQUF0QyxNQUFNLENBQUMsR0FBRzs7Ozs7OztLQUN4QyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0FBQ3ZCLFFBQUksSUFBSSxHQUFHO0FBQ1QsU0FBRyxFQUFFLGtCQUFLLE9BQU8sb0JBQVUsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUM7QUFDM0Qsa0JBQVksRUFBRSxLQUFLO0FBQ25CLGdCQUFVLEVBQUUsSUFBSTtBQUNoQixhQUFPLEVBQUUsSUFBSTtBQUNiLHVCQUFpQixFQUFFLEdBQUc7S0FDdkIsQ0FBQztBQUNGLFFBQUksR0FBRyxvQkFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLHdCQUFJLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQzs7QUFFbkMsWUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0FBQ3ZCLFFBQUUsQ0FBQyxxREFBcUQsRUFBRTs7Ozs7K0NBQ2xELE1BQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFROzs7Ozs7O09BQ3RFLENBQUMsQ0FBQztBQUNILFFBQUUsQ0FBQyxrREFBa0QsRUFBRTs7Ozs7K0NBQy9DLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsUUFBUTs7Ozs7OztPQUM1RCxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7O0FBRUgsWUFBUSxDQUFDLFNBQVMsRUFBRSxZQUFNO0FBQ3hCLFlBQU0sQ0FBQzs7Ozs7QUFFTCxrQkFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7OytDQUM5QixNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQzs7Ozs7OztPQUNqQyxDQUFDLENBQUM7QUFDSCxXQUFLLENBQUM7Ozs7OytDQUNFLE1BQU0sQ0FBQyxhQUFhLEVBQUU7Ozs7Ozs7T0FDN0IsQ0FBQyxDQUFDO0FBQ0gsUUFBRSxDQUFDLHdCQUF3QixFQUFFOzs7OzsrQ0FDcEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7OzsrQkFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLOzs7Ozs7O09BQ25ELENBQUMsQ0FBQztBQUNILFFBQUUsQ0FBQyx1QkFBdUIsRUFBRTs7Ozs7K0NBQ25CLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDOzs7K0JBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSzs7Ozs7OztPQUNyRCxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lMmUvZHJpdmVyL2xvZ2dpbmctZTJlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCBlbnYgZnJvbSAnLi4vaGVscGVycy9lbnYnO1xuaW1wb3J0IHsgcm9vdERpciB9IGZyb20gJy4uLy4uLy4uL2xpYi91dGlscyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IElvc0RyaXZlciB9IGZyb20gJy4uLy4uLy4uJztcbmltcG9ydCB7IFNVUFBPUlRFRF9MT0dfVFlQRVMgfSBmcm9tICcuLi8uLi8uLi9saWIvY29tbWFuZHMvbG9nZ2luZy5qcyc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBNT0NIQV9USU1FT1VUIH0gZnJvbSAnLi4vaGVscGVycy9zZXNzaW9uJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgnY29tbWFuZHMgLSBsb2dnaW5nJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnRpbWVvdXQoTU9DSEFfVElNRU9VVCk7XG4gIGxldCBkcml2ZXI7XG5cbiAgYmVmb3JlKCgpID0+IHtcbiAgICBkcml2ZXIgPSBuZXcgSW9zRHJpdmVyKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRMb2dUeXBlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGdldCB0aGUgbGlzdCBvZiBhdmFpbGFibGUgbG9ncycsIGFzeW5jICgpID0+IHtcbiAgICAgIGRyaXZlci5nZXRMb2dUeXBlcy5zaG91bGQuYmUuYS5GdW5jdGlvbjtcbiAgICAgIChhd2FpdCBkcml2ZXIuZ2V0TG9nVHlwZXMoKSkuc2hvdWxkLmVxbChfLmtleXMoU1VQUE9SVEVEX0xPR19UWVBFUykpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0TG9nJywgKCkgPT4ge1xuICAgIGxldCBjYXBzID0ge1xuICAgICAgYXBwOiBwYXRoLnJlc29sdmUocm9vdERpciwgJ3Rlc3QnLCAnYXNzZXRzJywgJ1Rlc3RBcHAuemlwJyksXG4gICAgICBwbGF0Zm9ybU5hbWU6ICdpT1MnLFxuICAgICAgc2hvd0lPU0xvZzogdHJ1ZSxcbiAgICAgIG5vUmVzZXQ6IHRydWUsXG4gICAgICBuZXdDb21tYW5kVGltZW91dDogMTIwXG4gICAgfTtcbiAgICBjYXBzID0gXy5tZXJnZSh7fSwgZW52LkNBUFMsIGNhcHMpO1xuXG4gICAgZGVzY3JpYmUoJ2Vycm9ycycsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBhbiBpbnZhbGlkIHR5cGUgaXMgZ2l2ZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IGRyaXZlci5nZXRMb2coJ3NvbWV0aGluZy1yYW5kb20nKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZDtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIGRyaXZlciBpcyBub3Qgc3RhcnRlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgZHJpdmVyLmdldExvZygnc3lzbG9nJykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWQ7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdzdWNjZXNzJywgKCkgPT4ge1xuICAgICAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVE9ETzogZmlndXJlIG91dCB3aHkgdGhpcyBpcyBzbyBmbGFrZXkgaW4gVHJhdmlzXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5UUkFWSVMpIHRoaXMuc2tpcCgpO1xuICAgICAgICBhd2FpdCBkcml2ZXIuY3JlYXRlU2Vzc2lvbihjYXBzKTtcbiAgICAgIH0pO1xuICAgICAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBkcml2ZXIuZGVsZXRlU2Vzc2lvbigpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGdldCBzeXN0ZW0gbG9ncycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgKGF3YWl0IGRyaXZlci5nZXRMb2coJ3N5c2xvZycpKS5zaG91bGQuYmUuYW4uQXJyYXk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgZ2V0IGNyYXNoIGxvZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIChhd2FpdCBkcml2ZXIuZ2V0TG9nKCdjcmFzaGxvZycpKS5zaG91bGQuYmUuYW4uQXJyYXk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
