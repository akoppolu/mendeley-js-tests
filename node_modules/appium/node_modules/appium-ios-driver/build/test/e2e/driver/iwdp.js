require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libIwdp = require('../../../lib/iwdp');

var _libIwdp2 = _interopRequireDefault(_libIwdp);

var _teen_process = require('teen_process');

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var expect = _chai2['default'].expect;

var iwdpInstance = undefined;

describe('ios webkit debug proxy class', function () {
  var _this = this;

  this.timeout(20000);

  beforeEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          iwdpInstance = new _libIwdp2['default']();

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.prev = 0;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(iwdpInstance.stop());

        case 3:
          context$2$0.next = 7;
          break;

        case 5:
          context$2$0.prev = 5;
          context$2$0.t0 = context$2$0['catch'](0);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[0, 5]]);
  });

  it('should reject calls to http://localhost:27753; if this test fails, IWDP is already being run on port 27753', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])(iwdpInstance.endpoint).should.be.rejected);

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should detect that IWDP is supported on this machine', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(iwdpInstance.isSupported().should.eventually.be['true']);

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should start IWDP and be able to access the main page', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(iwdpInstance.start());

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])(iwdpInstance.endpoint).should.eventually.have.string('<html'));

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should not keep running after stop is called', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(iwdpInstance.start());

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(iwdpInstance.stop());

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])(iwdpInstance.endpoint).should.be.rejected);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should still start IWDP server if one is started on a different port', function callee$1$0() {
    var process;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          process = new _teen_process.SubProcess('ios_webkit_debug_proxy', ['--config', 'null:56789']);

          process.start();
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])('http://localhost:56789/').should.eventually.have.string('<html'));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(iwdpInstance.start());

        case 8:
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])(iwdpInstance.endpoint).should.eventually.have.string('<html'));

        case 10:
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(process.stop());

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should restart after the process is stopped abruptly', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(iwdpInstance.start());

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(iwdpInstance.process.stop());

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve) {
            iwdpInstance.once('start', resolve);
          }));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])(iwdpInstance.endpoint).should.eventually.have.string('<html'));

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should fail after reaching max retries', function callee$1$0() {
    var retries, errorPromise, promise;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(iwdpInstance.start());

        case 2:
          retries = 0;
          errorPromise = new _bluebird2['default'](function (resolve) {
            iwdpInstance.on('error', function () {
              expect(retries).to.equal(10);
              resolve();
            });
          });

        case 4:
          if (!(++retries <= 10)) {
            context$2$0.next = 13;
            break;
          }

          promise = new _bluebird2['default'](function (resolve) {
            iwdpInstance.once('start', function () {
              resolve();
            });
          });
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(iwdpInstance.process.stop());

        case 8:
          if (!(retries < 10)) {
            context$2$0.next = 11;
            break;
          }

          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(promise);

        case 11:
          context$2$0.next = 4;
          break;

        case 13:
          context$2$0.next = 15;
          return _regeneratorRuntime.awrap(errorPromise);

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// It should give up restarting after 10 failed attempts

// Keep stopping the process after it has been started
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL2RyaXZlci9pd2RwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7b0JBQ2lCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3VCQUM1QixtQkFBbUI7Ozs7NEJBQ1QsY0FBYzs7OEJBQ3JCLGlCQUFpQjs7Ozt3QkFDdkIsVUFBVTs7OztBQUN4QixrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0lBRWpCLE1BQU0scUJBQU4sTUFBTTs7QUFDZCxJQUFJLFlBQVksWUFBQSxDQUFDOztBQUVqQixRQUFRLENBQUMsOEJBQThCLEVBQUUsWUFBWTs7O0FBQ25ELE1BQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXBCLFlBQVUsQ0FBQzs7OztBQUNULHNCQUFZLEdBQUcsMEJBQVUsQ0FBQzs7Ozs7OztHQUMzQixDQUFDLENBQUM7O0FBRUgsV0FBUyxDQUFDOzs7Ozs7MkNBRUEsWUFBWSxDQUFDLElBQUksRUFBRTs7Ozs7Ozs7Ozs7Ozs7O0dBRTVCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsNEdBQTRHLEVBQUU7Ozs7OzJDQUN6RyxpQ0FBUSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFROzs7Ozs7O0dBQ3hELENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsc0RBQXNELEVBQUU7Ozs7OzJDQUNuRCxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQUs7Ozs7Ozs7R0FDM0QsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyx1REFBdUQsRUFBRTs7Ozs7MkNBQ3BELFlBQVksQ0FBQyxLQUFLLEVBQUU7Ozs7MkNBQ3BCLGlDQUFRLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDOzs7Ozs7O0dBQzVFLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsOENBQThDLEVBQUU7Ozs7OzJDQUMzQyxZQUFZLENBQUMsS0FBSyxFQUFFOzs7OzJDQUNwQixZQUFZLENBQUMsSUFBSSxFQUFFOzs7OzJDQUNuQixpQ0FBUSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFROzs7Ozs7O0dBQ3hELENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsc0VBQXNFLEVBQUU7UUFDckUsT0FBTzs7OztBQUFQLGlCQUFPLEdBQUcsNkJBQWUsd0JBQXdCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7O0FBQ2xGLGlCQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7OzJDQUNWLHNCQUFFLEtBQUssQ0FBQyxHQUFHLENBQUM7Ozs7MkNBQ1osaUNBQVEseUJBQXlCLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDOzs7OzJDQUN6RSxZQUFZLENBQUMsS0FBSyxFQUFFOzs7OzJDQUNwQixpQ0FBUSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQzs7OzsyQ0FDckUsT0FBTyxDQUFDLElBQUksRUFBRTs7Ozs7OztHQUNyQixDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHNEQUFzRCxFQUFFOzs7OzsyQ0FDbkQsWUFBWSxDQUFDLEtBQUssRUFBRTs7OzsyQ0FDcEIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7Ozs7MkNBQzNCLDBCQUFNLFVBQUMsT0FBTyxFQUFLO0FBQ3ZCLHdCQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztXQUNyQyxDQUFDOzs7OzJDQUNJLGlDQUFRLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDOzs7Ozs7O0dBQzVFLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsd0NBQXdDLEVBQUU7UUFFdkMsT0FBTyxFQUdQLFlBQVksRUFTVixPQUFPOzs7OzsyQ0FiUCxZQUFZLENBQUMsS0FBSyxFQUFFOzs7QUFDdEIsaUJBQU8sR0FBRyxDQUFDO0FBR1gsc0JBQVksR0FBRywwQkFBTSxVQUFDLE9BQU8sRUFBSztBQUNwQyx3QkFBWSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsWUFBTTtBQUM3QixvQkFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0IscUJBQU8sRUFBRSxDQUFDO2FBQ1gsQ0FBQyxDQUFDO1dBQ0osQ0FBQzs7O2dCQUdLLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQTs7Ozs7QUFDaEIsaUJBQU8sR0FBRywwQkFBTSxVQUFDLE9BQU8sRUFBSztBQUMvQix3QkFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsWUFBTTtBQUMvQixxQkFBTyxFQUFFLENBQUM7YUFDWCxDQUFDLENBQUM7V0FDSixDQUFDOzsyQ0FDSSxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTs7O2dCQUM3QixPQUFPLEdBQUcsRUFBRSxDQUFBOzs7Ozs7MkNBQ1IsT0FBTzs7Ozs7Ozs7MkNBSVgsWUFBWTs7Ozs7OztHQUNuQixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lMmUvZHJpdmVyL2l3ZHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IElXRFAgZnJvbSAnLi4vLi4vLi4vbGliL2l3ZHAnO1xuaW1wb3J0IHsgU3ViUHJvY2VzcyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuY29uc3QgeyBleHBlY3QgfSA9IGNoYWk7XG5sZXQgaXdkcEluc3RhbmNlO1xuXG5kZXNjcmliZSgnaW9zIHdlYmtpdCBkZWJ1ZyBwcm94eSBjbGFzcycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50aW1lb3V0KDIwMDAwKTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBpd2RwSW5zdGFuY2UgPSBuZXcgSVdEUCgpO1xuICB9KTtcblxuICBhZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBpd2RwSW5zdGFuY2Uuc3RvcCgpO1xuICAgIH0gY2F0Y2ggKGlnbikgeyB9XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVqZWN0IGNhbGxzIHRvIGh0dHA6Ly9sb2NhbGhvc3Q6Mjc3NTM7IGlmIHRoaXMgdGVzdCBmYWlscywgSVdEUCBpcyBhbHJlYWR5IGJlaW5nIHJ1biBvbiBwb3J0IDI3NzUzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IHJlcXVlc3QoaXdkcEluc3RhbmNlLmVuZHBvaW50KS5zaG91bGQuYmUucmVqZWN0ZWQ7IFxuICB9KTtcblxuICBpdCgnc2hvdWxkIGRldGVjdCB0aGF0IElXRFAgaXMgc3VwcG9ydGVkIG9uIHRoaXMgbWFjaGluZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBpd2RwSW5zdGFuY2UuaXNTdXBwb3J0ZWQoKS5zaG91bGQuZXZlbnR1YWxseS5iZS50cnVlO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHN0YXJ0IElXRFAgYW5kIGJlIGFibGUgdG8gYWNjZXNzIHRoZSBtYWluIHBhZ2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgYXdhaXQgaXdkcEluc3RhbmNlLnN0YXJ0KCk7XG4gICAgYXdhaXQgcmVxdWVzdChpd2RwSW5zdGFuY2UuZW5kcG9pbnQpLnNob3VsZC5ldmVudHVhbGx5LmhhdmUuc3RyaW5nKCc8aHRtbCcpOyBcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3Qga2VlcCBydW5uaW5nIGFmdGVyIHN0b3AgaXMgY2FsbGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IGl3ZHBJbnN0YW5jZS5zdGFydCgpO1xuICAgIGF3YWl0IGl3ZHBJbnN0YW5jZS5zdG9wKCk7XG4gICAgYXdhaXQgcmVxdWVzdChpd2RwSW5zdGFuY2UuZW5kcG9pbnQpLnNob3VsZC5iZS5yZWplY3RlZDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzdGlsbCBzdGFydCBJV0RQIHNlcnZlciBpZiBvbmUgaXMgc3RhcnRlZCBvbiBhIGRpZmZlcmVudCBwb3J0JywgYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgbGV0IHByb2Nlc3MgPSBuZXcgU3ViUHJvY2VzcygnaW9zX3dlYmtpdF9kZWJ1Z19wcm94eScsIFsnLS1jb25maWcnLCAnbnVsbDo1Njc4OSddKTtcbiAgICBwcm9jZXNzLnN0YXJ0KCk7XG4gICAgYXdhaXQgQi5kZWxheSg1MDApO1xuICAgIGF3YWl0IHJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3Q6NTY3ODkvJykuc2hvdWxkLmV2ZW50dWFsbHkuaGF2ZS5zdHJpbmcoJzxodG1sJyk7XG4gICAgYXdhaXQgaXdkcEluc3RhbmNlLnN0YXJ0KCk7XG4gICAgYXdhaXQgcmVxdWVzdChpd2RwSW5zdGFuY2UuZW5kcG9pbnQpLnNob3VsZC5ldmVudHVhbGx5LmhhdmUuc3RyaW5nKCc8aHRtbCcpO1xuICAgIGF3YWl0IHByb2Nlc3Muc3RvcCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlc3RhcnQgYWZ0ZXIgdGhlIHByb2Nlc3MgaXMgc3RvcHBlZCBhYnJ1cHRseScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBpd2RwSW5zdGFuY2Uuc3RhcnQoKTtcbiAgICBhd2FpdCBpd2RwSW5zdGFuY2UucHJvY2Vzcy5zdG9wKCk7XG4gICAgYXdhaXQgbmV3IEIoKHJlc29sdmUpID0+IHtcbiAgICAgIGl3ZHBJbnN0YW5jZS5vbmNlKCdzdGFydCcsIHJlc29sdmUpO1xuICAgIH0pO1xuICAgIGF3YWl0IHJlcXVlc3QoaXdkcEluc3RhbmNlLmVuZHBvaW50KS5zaG91bGQuZXZlbnR1YWxseS5oYXZlLnN0cmluZygnPGh0bWwnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBmYWlsIGFmdGVyIHJlYWNoaW5nIG1heCByZXRyaWVzJywgYXN5bmMgKCkgID0+IHtcbiAgICBhd2FpdCBpd2RwSW5zdGFuY2Uuc3RhcnQoKTtcbiAgICBsZXQgcmV0cmllcyA9IDA7XG5cbiAgICAvLyBJdCBzaG91bGQgZ2l2ZSB1cCByZXN0YXJ0aW5nIGFmdGVyIDEwIGZhaWxlZCBhdHRlbXB0c1xuICAgIGxldCBlcnJvclByb21pc2UgPSBuZXcgQigocmVzb2x2ZSkgPT4ge1xuICAgICAgaXdkcEluc3RhbmNlLm9uKCdlcnJvcicsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KHJldHJpZXMpLnRvLmVxdWFsKDEwKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBLZWVwIHN0b3BwaW5nIHRoZSBwcm9jZXNzIGFmdGVyIGl0IGhhcyBiZWVuIHN0YXJ0ZWRcbiAgICB3aGlsZSAoKytyZXRyaWVzIDw9IDEwKSB7XG4gICAgICBsZXQgcHJvbWlzZSA9IG5ldyBCKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGl3ZHBJbnN0YW5jZS5vbmNlKCdzdGFydCcsICgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBhd2FpdCBpd2RwSW5zdGFuY2UucHJvY2Vzcy5zdG9wKCk7XG4gICAgICBpZiAocmV0cmllcyA8IDEwKSB7XG4gICAgICAgIGF3YWl0IHByb21pc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgZXJyb3JQcm9taXNlO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
