require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _ = require('../../../..');

var _libUiautoLogger = require('../../../../lib/uiauto/logger');

var _libUiautoLogger2 = _interopRequireDefault(_libUiautoLogger);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _appiumSupport = require('appium-support');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _sinonChai = require('sinon-chai');

var _sinonChai2 = _interopRequireDefault(_sinonChai);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

_chai2['default'].should();
_chai2['default'].use(_sinonChai2['default']);

describe('uiauto - dynamic bootstrap', function () {
  var _this = this;

  function envFromCode(code) {
    // let's pick out the dynamic env from the new bootsrap file with this
    // regex so we can be sure it matches what we expect
    var envRe = /^bootstrap\((\{[^]+})\);$/m;
    var envStr = envRe.exec(code)[1];
    var env = JSON.parse(envStr);
    return env;
  }

  function checkCode(code) {
    var env;
    return _regeneratorRuntime.async(function checkCode$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          env = envFromCode(code);

          env.nodePath.should.equal(process.execPath);
          env.commandProxyClientPath.should.exist;
          env.instrumentsSock.should.exist;
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(env.commandProxyClientPath));

        case 6:
          context$2$0.sent.should.be['true'];
          return context$2$0.abrupt('return', env);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  }

  before(function () {
    _sinon2['default'].spy(_libUiautoLogger2['default'], 'debug');
  });

  after(function () {
    _libUiautoLogger2['default'].debug.restore();
  });

  it('should generate dynamic bootstrap', function callee$1$0() {
    var bootstrapFile, code, env;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          process.env.APPIUM_BOOTSTRAP_DIR = _path2['default'].resolve('/', 'tmp', 'appium-uiauto', 'test', 'unit', 'bootstrap');
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(process.env.APPIUM_BOOTSTRAP_DIR));

        case 3:
          if (!context$2$0.sent) {
            context$2$0.next = 6;
            break;
          }

          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(process.env.APPIUM_BOOTSTRAP_DIR));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(_.uiauto.prepareBootstrap());

        case 8:
          bootstrapFile = context$2$0.sent;

          bootstrapFile.should.match(/\/tmp\/appium-uiauto\/test\/unit\/bootstrap\/bootstrap\-.*\.js/);
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(bootstrapFile, 'utf8'));

        case 12:
          code = context$2$0.sent;
          context$2$0.next = 15;
          return _regeneratorRuntime.awrap(checkCode(code));

        case 15:
          _libUiautoLogger2['default'].debug.calledWithMatch(/Creating or overwriting dynamic bootstrap/).should.be['true'];
          _libUiautoLogger2['default'].debug.reset();

          // second call: should reuse bootstrap file
          context$2$0.next = 19;
          return _regeneratorRuntime.awrap(_.uiauto.prepareBootstrap());

        case 19:
          bootstrapFile = context$2$0.sent;

          bootstrapFile.should.match(/\/tmp\/appium-uiauto\/test\/unit\/bootstrap\/bootstrap\-.*\.js/);
          context$2$0.next = 23;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(bootstrapFile, 'utf8'));

        case 23:
          code = context$2$0.sent;
          context$2$0.next = 26;
          return _regeneratorRuntime.awrap(checkCode(code));

        case 26:
          _libUiautoLogger2['default'].debug.calledWithMatch(/Reusing dynamic bootstrap/).should.be['true'];
          _libUiautoLogger2['default'].debug.reset();

          // third call using custom socket path: should create different bootstrap file
          context$2$0.next = 30;
          return _regeneratorRuntime.awrap(_.uiauto.prepareBootstrap({ sock: '/tmp/abcd/sock' }));

        case 30:
          bootstrapFile = context$2$0.sent;

          bootstrapFile.should.match(/\/tmp\/appium-uiauto\/test\/unit\/bootstrap\/bootstrap\-.*\.js/);
          context$2$0.next = 34;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(bootstrapFile, 'utf8'));

        case 34:
          code = context$2$0.sent;
          context$2$0.next = 37;
          return _regeneratorRuntime.awrap(checkCode(code, { isVerbose: true, gracePeriod: 5 }));

        case 37:
          env = context$2$0.sent;

          env.instrumentsSock.should.equal('/tmp/abcd/sock');
          _libUiautoLogger2['default'].debug.calledWithMatch(/Creating or overwriting dynamic bootstrap/).should.be.ok;
          _libUiautoLogger2['default'].debug.reset();

        case 41:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// first call: should create new bootstrap file
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL2RyaXZlci91aWF1dG8vZHluYW1pYy1ib290c3RyYXAtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0JBRXVCLGFBQWE7OytCQUNwQiwrQkFBK0I7Ozs7b0JBQzlCLE1BQU07Ozs7NkJBQ0osZ0JBQWdCOztxQkFDakIsT0FBTzs7Ozt5QkFDSCxZQUFZOzs7O29CQUNqQixNQUFNOzs7O0FBR3ZCLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyx3QkFBVyxDQUFDOztBQUVwQixRQUFRLENBQUMsNEJBQTRCLEVBQUUsWUFBWTs7O0FBQ2pELFdBQVMsV0FBVyxDQUFDLElBQUksRUFBRTs7O0FBR3pCLFFBQUksS0FBSyxHQUFHLDRCQUE0QixDQUFDO0FBQ3pDLFFBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsUUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM3QixXQUFPLEdBQUcsQ0FBQztHQUNaOztBQUVELFdBQWUsU0FBUyxDQUFFLElBQUk7UUFDeEIsR0FBRzs7OztBQUFILGFBQUcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDOztBQUMzQixhQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVDLGFBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3hDLGFBQUcsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzs7MkNBQzFCLGtCQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUM7OzsyQkFBRSxNQUFNLENBQUMsRUFBRTs4Q0FDaEQsR0FBRzs7Ozs7OztHQUNYOztBQUVELFFBQU0sQ0FBQyxZQUFZO0FBQ2pCLHVCQUFNLEdBQUcsK0JBQU0sT0FBTyxDQUFDLENBQUM7R0FDekIsQ0FBQyxDQUFDOztBQUVILE9BQUssQ0FBQyxZQUFZO0FBQ2hCLGlDQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztHQUNyQixDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLG1DQUFtQyxFQUFFO1FBT2xDLGFBQWEsRUFFYixJQUFJLEVBaUJKLEdBQUc7Ozs7QUF6QlAsaUJBQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEdBQUcsa0JBQUssT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7OzJDQUNoRyxrQkFBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQzs7Ozs7Ozs7OzJDQUM3QyxrQkFBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQzs7OzsyQ0FJekIsU0FBTyxnQkFBZ0IsRUFBRTs7O0FBQS9DLHVCQUFhOztBQUNqQix1QkFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0VBQWdFLENBQUMsQ0FBQzs7MkNBQzVFLGtCQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDOzs7QUFBL0MsY0FBSTs7MkNBQ0YsU0FBUyxDQUFDLElBQUksQ0FBQzs7O0FBQ3JCLHVDQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsMkNBQTJDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFLLENBQUM7QUFDdEYsdUNBQUksS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDOzs7OzJDQUdJLFNBQU8sZ0JBQWdCLEVBQUU7OztBQUEvQyx1QkFBYTs7QUFDYix1QkFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0VBQWdFLENBQUMsQ0FBQzs7MkNBQ2hGLGtCQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDOzs7QUFBL0MsY0FBSTs7MkNBQ0UsU0FBUyxDQUFDLElBQUksQ0FBQzs7O0FBQ3JCLHVDQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFLLENBQUM7QUFDdEUsdUNBQUksS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDOzs7OzJDQUdJLFNBQU8sZ0JBQWdCLENBQUMsRUFBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUMsQ0FBQzs7O0FBQXZFLHVCQUFhOztBQUNiLHVCQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxnRUFBZ0UsQ0FBQyxDQUFDOzsyQ0FDaEYsa0JBQUcsUUFBUSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUM7OztBQUEvQyxjQUFJOzsyQ0FDWSxTQUFTLENBQUMsSUFBSSxFQUFFLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUFDLENBQUM7OztBQUE5RCxhQUFHOztBQUNQLGFBQUcsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ25ELHVDQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsMkNBQTJDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNwRix1Q0FBSSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7Ozs7Ozs7R0FDbkIsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZTJlL2RyaXZlci91aWF1dG8vZHluYW1pYy1ib290c3RyYXAtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IHsgdWlhdXRvIH0gZnJvbSAnLi4vLi4vLi4vLi4nO1xuaW1wb3J0IGxvZyBmcm9tICcuLi8uLi8uLi8uLi9saWIvdWlhdXRvL2xvZ2dlcic7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCB7IGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCBzaW5vbkNoYWkgZnJvbSAnc2lub24tY2hhaSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2Uoc2lub25DaGFpKTtcblxuZGVzY3JpYmUoJ3VpYXV0byAtIGR5bmFtaWMgYm9vdHN0cmFwJywgZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBlbnZGcm9tQ29kZShjb2RlKSB7XG4gICAgLy8gbGV0J3MgcGljayBvdXQgdGhlIGR5bmFtaWMgZW52IGZyb20gdGhlIG5ldyBib290c3JhcCBmaWxlIHdpdGggdGhpc1xuICAgIC8vIHJlZ2V4IHNvIHdlIGNhbiBiZSBzdXJlIGl0IG1hdGNoZXMgd2hhdCB3ZSBleHBlY3RcbiAgICB2YXIgZW52UmUgPSAvXmJvb3RzdHJhcFxcKChcXHtbXl0rfSlcXCk7JC9tO1xuICAgIHZhciBlbnZTdHIgPSBlbnZSZS5leGVjKGNvZGUpWzFdO1xuICAgIHZhciBlbnYgPSBKU09OLnBhcnNlKGVudlN0cik7XG4gICAgcmV0dXJuIGVudjtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGNoZWNrQ29kZSAoY29kZSkge1xuICAgIHZhciBlbnYgPSBlbnZGcm9tQ29kZShjb2RlKTtcbiAgICBlbnYubm9kZVBhdGguc2hvdWxkLmVxdWFsKHByb2Nlc3MuZXhlY1BhdGgpO1xuICAgIGVudi5jb21tYW5kUHJveHlDbGllbnRQYXRoLnNob3VsZC5leGlzdDtcbiAgICBlbnYuaW5zdHJ1bWVudHNTb2NrLnNob3VsZC5leGlzdDtcbiAgICAoYXdhaXQgZnMuZXhpc3RzKGVudi5jb21tYW5kUHJveHlDbGllbnRQYXRoKSkuc2hvdWxkLmJlLnRydWU7XG4gICAgcmV0dXJuIGVudjtcbiAgfVxuXG4gIGJlZm9yZShmdW5jdGlvbiAoKSB7XG4gICAgc2lub24uc3B5KGxvZywgJ2RlYnVnJyk7XG4gIH0pO1xuXG4gIGFmdGVyKGZ1bmN0aW9uICgpIHtcbiAgICBsb2cuZGVidWcucmVzdG9yZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdlbmVyYXRlIGR5bmFtaWMgYm9vdHN0cmFwJywgYXN5bmMgKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52LkFQUElVTV9CT09UU1RSQVBfRElSID0gcGF0aC5yZXNvbHZlKCcvJywgJ3RtcCcsICdhcHBpdW0tdWlhdXRvJywgJ3Rlc3QnLCAndW5pdCcsICdib290c3RyYXAnKTtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKHByb2Nlc3MuZW52LkFQUElVTV9CT09UU1RSQVBfRElSKSkge1xuICAgICAgYXdhaXQgZnMucmltcmFmKHByb2Nlc3MuZW52LkFQUElVTV9CT09UU1RSQVBfRElSKTtcbiAgICB9XG5cbiAgICAgIC8vIGZpcnN0IGNhbGw6IHNob3VsZCBjcmVhdGUgbmV3IGJvb3RzdHJhcCBmaWxlXG4gICAgbGV0IGJvb3RzdHJhcEZpbGUgPSBhd2FpdCB1aWF1dG8ucHJlcGFyZUJvb3RzdHJhcCgpO1xuICAgIGJvb3RzdHJhcEZpbGUuc2hvdWxkLm1hdGNoKC9cXC90bXBcXC9hcHBpdW0tdWlhdXRvXFwvdGVzdFxcL3VuaXRcXC9ib290c3RyYXBcXC9ib290c3RyYXBcXC0uKlxcLmpzLyk7XG4gICAgbGV0IGNvZGUgPSBhd2FpdCBmcy5yZWFkRmlsZShib290c3RyYXBGaWxlLCAndXRmOCcpO1xuICAgIGF3YWl0IGNoZWNrQ29kZShjb2RlKTtcbiAgICBsb2cuZGVidWcuY2FsbGVkV2l0aE1hdGNoKC9DcmVhdGluZyBvciBvdmVyd3JpdGluZyBkeW5hbWljIGJvb3RzdHJhcC8pLnNob3VsZC5iZS50cnVlO1xuICAgIGxvZy5kZWJ1Zy5yZXNldCgpO1xuXG4gICAgLy8gc2Vjb25kIGNhbGw6IHNob3VsZCByZXVzZSBib290c3RyYXAgZmlsZVxuICAgIGJvb3RzdHJhcEZpbGUgPSBhd2FpdCB1aWF1dG8ucHJlcGFyZUJvb3RzdHJhcCgpO1xuICAgIGJvb3RzdHJhcEZpbGUuc2hvdWxkLm1hdGNoKC9cXC90bXBcXC9hcHBpdW0tdWlhdXRvXFwvdGVzdFxcL3VuaXRcXC9ib290c3RyYXBcXC9ib290c3RyYXBcXC0uKlxcLmpzLyk7XG4gICAgY29kZSA9IGF3YWl0IGZzLnJlYWRGaWxlKGJvb3RzdHJhcEZpbGUsICd1dGY4Jyk7XG4gICAgYXdhaXQgY2hlY2tDb2RlKGNvZGUpO1xuICAgIGxvZy5kZWJ1Zy5jYWxsZWRXaXRoTWF0Y2goL1JldXNpbmcgZHluYW1pYyBib290c3RyYXAvKS5zaG91bGQuYmUudHJ1ZTtcbiAgICBsb2cuZGVidWcucmVzZXQoKTtcblxuICAgIC8vIHRoaXJkIGNhbGwgdXNpbmcgY3VzdG9tIHNvY2tldCBwYXRoOiBzaG91bGQgY3JlYXRlIGRpZmZlcmVudCBib290c3RyYXAgZmlsZVxuICAgIGJvb3RzdHJhcEZpbGUgPSBhd2FpdCB1aWF1dG8ucHJlcGFyZUJvb3RzdHJhcCh7c29jazogJy90bXAvYWJjZC9zb2NrJ30pO1xuICAgIGJvb3RzdHJhcEZpbGUuc2hvdWxkLm1hdGNoKC9cXC90bXBcXC9hcHBpdW0tdWlhdXRvXFwvdGVzdFxcL3VuaXRcXC9ib290c3RyYXBcXC9ib290c3RyYXBcXC0uKlxcLmpzLyk7XG4gICAgY29kZSA9IGF3YWl0IGZzLnJlYWRGaWxlKGJvb3RzdHJhcEZpbGUsICd1dGY4Jyk7XG4gICAgbGV0IGVudiA9IGF3YWl0IGNoZWNrQ29kZShjb2RlLCB7aXNWZXJib3NlOiB0cnVlLCBncmFjZVBlcmlvZDogNX0pO1xuICAgIGVudi5pbnN0cnVtZW50c1NvY2suc2hvdWxkLmVxdWFsKCcvdG1wL2FiY2Qvc29jaycpO1xuICAgIGxvZy5kZWJ1Zy5jYWxsZWRXaXRoTWF0Y2goL0NyZWF0aW5nIG9yIG92ZXJ3cml0aW5nIGR5bmFtaWMgYm9vdHN0cmFwLykuc2hvdWxkLmJlLm9rO1xuICAgIGxvZy5kZWJ1Zy5yZXNldCgpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi8uLiJ9
