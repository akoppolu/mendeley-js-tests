'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _setupBase = require("../setup-base");

var _setupBase2 = _interopRequireDefault(_setupBase);

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

describe('uicatalog - lock device', function () {
  var _this = this;

  var session = (0, _setupBase2['default'])(this, _desired2['default']);
  var driver = session.driver;

  var allowance = 10;
  it('should lock the device for 4 seconds (+/- ' + allowance + ' secs)', function callee$1$0() {
    var before, now;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          before = new Date().getTime() / 1000;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(driver.lock(4));

        case 3:
          now = new Date().getTime() / 1000;

          (now - before).should.be.above(4);
          (now - before).should.be.below(4 + allowance + 1);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should default to 0 lock the device for +/- ' + allowance + ' secs', function callee$1$0() {
    var before, now;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          before = new Date().getTime() / 1000;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(driver.lock(0));

        case 3:
          now = new Date().getTime() / 1000;

          (now - before).should.be.above(0);
          (now - before).should.be.below(allowance + 1);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3VpY2F0YWxvZy9sb2NrLWRldmljZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7eUJBQWtCLGVBQWU7Ozs7dUJBQ2IsV0FBVzs7OztBQUUvQixRQUFRLENBQUMseUJBQXlCLEVBQUUsWUFBWTs7O0FBQzlDLE1BQUksT0FBTyxHQUFHLDRCQUFNLElBQUksdUJBQVUsQ0FBQztBQUNuQyxNQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDOztBQUU1QixNQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFDbkIsSUFBRSxnREFBOEMsU0FBUyxhQUFVO1FBQzdELE1BQU0sRUFFTixHQUFHOzs7O0FBRkgsZ0JBQU0sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUk7OzJDQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7O0FBQ2hCLGFBQUcsR0FBSSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUk7O0FBQ3RDLFdBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQSxDQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFdBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQSxDQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7R0FDbkQsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxrREFBZ0QsU0FBUyxZQUFTO1FBQzlELE1BQU0sRUFFTixHQUFHOzs7O0FBRkgsZ0JBQU0sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUk7OzJDQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7O0FBQ2hCLGFBQUcsR0FBSSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUk7O0FBQ3RDLFdBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQSxDQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLFdBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQSxDQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7Ozs7OztHQUMvQyxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lMmUvdWljYXRhbG9nL2xvY2stZGV2aWNlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNldHVwIGZyb20gXCIuLi9zZXR1cC1iYXNlXCI7XG5pbXBvcnQgZGVzaXJlZCBmcm9tICcuL2Rlc2lyZWQnO1xuXG5kZXNjcmliZSgndWljYXRhbG9nIC0gbG9jayBkZXZpY2UnLCBmdW5jdGlvbiAoKSB7XG4gIGxldCBzZXNzaW9uID0gc2V0dXAodGhpcywgZGVzaXJlZCk7XG4gIGxldCBkcml2ZXIgPSBzZXNzaW9uLmRyaXZlcjtcblxuICBsZXQgYWxsb3dhbmNlID0gMTA7XG4gIGl0KGBzaG91bGQgbG9jayB0aGUgZGV2aWNlIGZvciA0IHNlY29uZHMgKCsvLSAke2FsbG93YW5jZX0gc2VjcylgLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGJlZm9yZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICBhd2FpdCBkcml2ZXIubG9jayg0KTtcbiAgICBsZXQgbm93ID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgKG5vdyAtIGJlZm9yZSkuc2hvdWxkLmJlLmFib3ZlKDQpO1xuICAgIChub3cgLSBiZWZvcmUpLnNob3VsZC5iZS5iZWxvdyg0ICsgYWxsb3dhbmNlICsgMSk7XG4gIH0pO1xuICBpdChgc2hvdWxkIGRlZmF1bHQgdG8gMCBsb2NrIHRoZSBkZXZpY2UgZm9yICsvLSAke2FsbG93YW5jZX0gc2Vjc2AsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgYmVmb3JlID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwO1xuICAgIGF3YWl0IGRyaXZlci5sb2NrKDApO1xuICAgIGxldCBub3cgPSAobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICAobm93IC0gYmVmb3JlKS5zaG91bGQuYmUuYWJvdmUoMCk7XG4gICAgKG5vdyAtIGJlZm9yZSkuc2hvdWxkLmJlLmJlbG93KGFsbG93YW5jZSArIDEpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
