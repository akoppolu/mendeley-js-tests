'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _env = require('./env');

var _env2 = _interopRequireDefault(_env);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _nodeUuid = require('node-uuid');

var _nodeUuid2 = _interopRequireDefault(_nodeUuid);

var BROWSERS = ['safari'];

function spinTitle(expTitle, browser) {
  var timeout = arguments.length <= 2 || arguments[2] === undefined ? 90 : arguments[2];

  var _curTitle = arguments.length <= 3 || arguments[3] === undefined ? undefined : arguments[3];

  var pageTitle;
  return _regeneratorRuntime.async(function spinTitle$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(timeout <= 0)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('Title never became \'' + expTitle + '\'. Last known title was \'' + _curTitle + '\'');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(browser.title());

      case 4:
        pageTitle = context$1$0.sent;

        if (!(pageTitle.indexOf(expTitle) < 0)) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(spinTitle(expTitle, browser, timeout - 1, pageTitle));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function loadWebView(desired, browser, urlToLoad, titleToSpin) {
  var app, uuid, ctxs, url;
  return _regeneratorRuntime.async(function loadWebView$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        app = typeof desired === 'object' ? desired.app || desired.browserName : desired;
        uuid = _nodeUuid2['default'].v1();

        if (typeof urlToLoad === 'undefined') {
          urlToLoad = _env2['default'].GUINEA_TEST_END_POINT + '?' + uuid;
        }
        if (typeof titleToSpin === 'undefined') {
          titleToSpin = uuid;
        }

        if (!(BROWSERS.indexOf(app) > -1)) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(browser.setUrl(urlToLoad));

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(3000));

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(spinTitle(titleToSpin, browser));

      case 11:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(browser.contexts());

      case 14:
        ctxs = context$1$0.sent;

        ctxs.length.should.be.above(0);
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(browser.context(ctxs[1]));

      case 18:
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(browser.url());

      case 20:
        url = context$1$0.sent;

        if (!(url !== urlToLoad)) {
          context$1$0.next = 24;
          break;
        }

        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(browser.setUrl(urlToLoad));

      case 24:
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(spinTitle(titleToSpin, browser));

      case 26:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 27:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function spinWait(spinFn) {
  var waitMs = arguments.length <= 1 || arguments[1] === undefined ? 10000 : arguments[1];
  var intMs = arguments.length <= 2 || arguments[2] === undefined ? 500 : arguments[2];
  var begunAt, endAt, spin;
  return _regeneratorRuntime.async(function spinWait$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        begunAt = Date.now();
        endAt = begunAt + waitMs;

        spin = function spin() {
          return _regeneratorRuntime.async(function spin$(context$2$0) {
            var _this = this;

            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.prev = 0;
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(spinFn());

              case 3:
                context$2$0.next = 10;
                break;

              case 5:
                context$2$0.prev = 5;
                context$2$0.t0 = context$2$0['catch'](0);

                if (!(Date.now() > endAt)) {
                  context$2$0.next = 9;
                  break;
                }

                throw new Error('spinWait condition unfulfilled. Promise rejected with error: ' + context$2$0.t0);

              case 9:
                return context$2$0.abrupt('return', setTimeout(function callee$3$0() {
                  return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                    while (1) switch (context$4$0.prev = context$4$0.next) {
                      case 0:
                        context$4$0.next = 2;
                        return _regeneratorRuntime.awrap(spin(spinFn));

                      case 2:
                        return context$4$0.abrupt('return', context$4$0.sent);

                      case 3:
                      case 'end':
                        return context$4$0.stop();
                    }
                  }, null, _this);
                }, intMs));

              case 10:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2, [[0, 5]]);
        };

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(spin(spinFn));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function skip(reason, done) {
  console.warn('skipping: ' + reason); //eslint-disable-line no-console
  return done();
}

exports.spinTitle = spinTitle;
exports.loadWebView = loadWebView;
exports.skip = skip;
exports.spinWait = spinWait;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL2hlbHBlcnMvd2Vidmlldy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O21CQUFnQixPQUFPOzs7O3dCQUNULFVBQVU7Ozs7d0JBQ0UsV0FBVzs7OztBQUdyQyxJQUFNLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDOztBQUU1QixTQUFlLFNBQVMsQ0FBRSxRQUFRLEVBQUUsT0FBTztNQUFFLE9BQU8seURBQUcsRUFBRTs7TUFBRSxTQUFTLHlEQUFHLFNBQVM7O01BSzFFLFNBQVM7Ozs7Y0FKVCxPQUFPLElBQUksQ0FBQyxDQUFBOzs7OztjQUNSLElBQUksS0FBSywyQkFBd0IsUUFBUSxtQ0FBNEIsU0FBUyxRQUFJOzs7O3lDQUdwRSxPQUFPLENBQUMsS0FBSyxFQUFFOzs7QUFBakMsaUJBQVM7O2NBQ1QsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUE7Ozs7Ozt5Q0FDM0Isc0JBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7Ozt5Q0FDTCxTQUFTLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQzs7Ozs7Ozs7OztDQUVwRTs7QUFFRCxTQUFlLFdBQVcsQ0FBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXO01BQzlELEdBQUcsRUFDSCxJQUFJLEVBY0osSUFBSSxFQUlKLEdBQUc7Ozs7QUFuQkgsV0FBRyxHQUFHLE9BQU8sT0FBTyxLQUFLLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEdBQUcsT0FBTztBQUNoRixZQUFJLEdBQUcsc0JBQWMsRUFBRSxFQUFFOztBQUU3QixZQUFJLE9BQU8sU0FBUyxLQUFLLFdBQVcsRUFBRTtBQUNwQyxtQkFBUyxHQUFNLGlCQUFJLHFCQUFxQixTQUFJLElBQUksQUFBRSxDQUFDO1NBQ3BEO0FBQ0QsWUFBSSxPQUFPLFdBQVcsS0FBSyxXQUFXLEVBQUU7QUFDdEMscUJBQVcsR0FBRyxJQUFJLENBQUM7U0FDcEI7O2NBQ0csUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTs7Ozs7O3lDQUN0QixPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQzs7Ozt5Q0FDekIsc0JBQUUsS0FBSyxDQUFDLElBQUksQ0FBQzs7Ozt5Q0FDTixTQUFTLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQzs7Ozs7Ozt5Q0FHN0IsT0FBTyxDQUFDLFFBQVEsRUFBRTs7O0FBQS9CLFlBQUk7O0FBQ1IsWUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7eUNBQ3pCLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7O3lDQUVkLE9BQU8sQ0FBQyxHQUFHLEVBQUU7OztBQUF6QixXQUFHOztjQUNILEdBQUcsS0FBSyxTQUFTLENBQUE7Ozs7Ozt5Q0FDYixPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQzs7Ozt5Q0FHcEIsU0FBUyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUM7Ozs7Ozs7Ozs7Q0FDN0M7O0FBRUQsU0FBZSxRQUFRLENBQUUsTUFBTTtNQUFFLE1BQU0seURBQUcsS0FBSztNQUFFLEtBQUsseURBQUcsR0FBRztNQUN0RCxPQUFPLEVBQ1AsS0FBSyxFQUNMLElBQUk7Ozs7OztBQUZKLGVBQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFO0FBQ3BCLGFBQUssR0FBRyxPQUFPLEdBQUcsTUFBTTs7QUFDeEIsWUFBSSxHQUFHLFNBQVAsSUFBSTs7Ozs7Ozs7aURBRUUsTUFBTSxFQUFFOzs7Ozs7Ozs7O3NCQUVWLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUE7Ozs7O3NCQUNkLElBQUksS0FBSyxrRkFBdUU7OztvREFHakYsVUFBVSxDQUFDOzs7Ozt5REFBa0IsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7Ozs7Ozs7OztpQkFBQSxFQUFFLEtBQUssQ0FBQzs7Ozs7OztTQUUzRDs7O3lDQUNLLElBQUksQ0FBQyxNQUFNLENBQUM7Ozs7Ozs7Q0FDbkI7O0FBRUQsU0FBUyxJQUFJLENBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtBQUMzQixTQUFPLENBQUMsSUFBSSxnQkFBYyxNQUFNLENBQUcsQ0FBQztBQUNwQyxTQUFPLElBQUksRUFBRSxDQUFDO0NBQ2Y7O1FBR1EsU0FBUyxHQUFULFNBQVM7UUFBRSxXQUFXLEdBQVgsV0FBVztRQUFFLElBQUksR0FBSixJQUFJO1FBQUUsUUFBUSxHQUFSLFFBQVEiLCJmaWxlIjoidGVzdC9lMmUvaGVscGVycy93ZWJ2aWV3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVudiBmcm9tICcuL2Vudic7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgdXVpZEdlbmVyYXRvciBmcm9tICdub2RlLXV1aWQnO1xuXG5cbmNvbnN0IEJST1dTRVJTID0gWydzYWZhcmknXTtcblxuYXN5bmMgZnVuY3Rpb24gc3BpblRpdGxlIChleHBUaXRsZSwgYnJvd3NlciwgdGltZW91dCA9IDkwLCBfY3VyVGl0bGUgPSB1bmRlZmluZWQpIHtcbiAgaWYgKHRpbWVvdXQgPD0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGl0bGUgbmV2ZXIgYmVjYW1lICcke2V4cFRpdGxlfScuIExhc3Qga25vd24gdGl0bGUgd2FzICcke19jdXJUaXRsZX0nYCk7XG4gIH1cblxuICBsZXQgcGFnZVRpdGxlID0gYXdhaXQgYnJvd3Nlci50aXRsZSgpO1xuICBpZiAocGFnZVRpdGxlLmluZGV4T2YoZXhwVGl0bGUpIDwgMCkge1xuICAgIGF3YWl0IEIuZGVsYXkoNTAwKTtcbiAgICByZXR1cm4gYXdhaXQgc3BpblRpdGxlKGV4cFRpdGxlLCBicm93c2VyLCB0aW1lb3V0IC0gMSwgcGFnZVRpdGxlKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkV2ViVmlldyAoZGVzaXJlZCwgYnJvd3NlciwgdXJsVG9Mb2FkLCB0aXRsZVRvU3Bpbikge1xuICBsZXQgYXBwID0gdHlwZW9mIGRlc2lyZWQgPT09ICdvYmplY3QnID8gZGVzaXJlZC5hcHAgfHwgZGVzaXJlZC5icm93c2VyTmFtZSA6IGRlc2lyZWQ7XG4gIGxldCB1dWlkID0gdXVpZEdlbmVyYXRvci52MSgpO1xuXG4gIGlmICh0eXBlb2YgdXJsVG9Mb2FkID09PSAndW5kZWZpbmVkJykge1xuICAgIHVybFRvTG9hZCA9IGAke2Vudi5HVUlORUFfVEVTVF9FTkRfUE9JTlR9PyR7dXVpZH1gO1xuICB9XG4gIGlmICh0eXBlb2YgdGl0bGVUb1NwaW4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGl0bGVUb1NwaW4gPSB1dWlkO1xuICB9XG4gIGlmIChCUk9XU0VSUy5pbmRleE9mKGFwcCkgPiAtMSkge1xuICAgIGF3YWl0IGJyb3dzZXIuc2V0VXJsKHVybFRvTG9hZCk7XG4gICAgYXdhaXQgQi5kZWxheSgzMDAwKTtcbiAgICByZXR1cm4gYXdhaXQgc3BpblRpdGxlKHRpdGxlVG9TcGluLCBicm93c2VyKTtcbiAgfVxuXG4gIGxldCBjdHhzID0gYXdhaXQgYnJvd3Nlci5jb250ZXh0cygpO1xuICBjdHhzLmxlbmd0aC5zaG91bGQuYmUuYWJvdmUoMCk7XG4gIGF3YWl0IGJyb3dzZXIuY29udGV4dChjdHhzWzFdKTtcblxuICBsZXQgdXJsID0gYXdhaXQgYnJvd3Nlci51cmwoKTtcbiAgaWYgKHVybCAhPT0gdXJsVG9Mb2FkKSB7XG4gICAgYXdhaXQgYnJvd3Nlci5zZXRVcmwodXJsVG9Mb2FkKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCBzcGluVGl0bGUodGl0bGVUb1NwaW4sIGJyb3dzZXIpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzcGluV2FpdCAoc3BpbkZuLCB3YWl0TXMgPSAxMDAwMCwgaW50TXMgPSA1MDApIHtcbiAgbGV0IGJlZ3VuQXQgPSBEYXRlLm5vdygpO1xuICBsZXQgZW5kQXQgPSBiZWd1bkF0ICsgd2FpdE1zO1xuICBsZXQgc3BpbiA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgc3BpbkZuKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoRGF0ZS5ub3coKSA+IGVuZEF0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgc3BpbldhaXQgY29uZGl0aW9uIHVuZnVsZmlsbGVkLiBQcm9taXNlIHJlamVjdGVkIHdpdGggZXJyb3I6ICR7ZXJyfWApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2V0VGltZW91dChhc3luYyAoKSA9PiBhd2FpdCBzcGluKHNwaW5GbiksIGludE1zKTtcbiAgICB9XG4gIH07XG4gIGF3YWl0IHNwaW4oc3BpbkZuKTtcbn1cblxuZnVuY3Rpb24gc2tpcCAocmVhc29uLCBkb25lKSB7XG4gIGNvbnNvbGUud2Fybihgc2tpcHBpbmc6ICR7cmVhc29ufWApOyAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICByZXR1cm4gZG9uZSgpO1xufVxuXG5cbmV4cG9ydCB7IHNwaW5UaXRsZSwgbG9hZFdlYlZpZXcsIHNraXAsIHNwaW5XYWl0IH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
