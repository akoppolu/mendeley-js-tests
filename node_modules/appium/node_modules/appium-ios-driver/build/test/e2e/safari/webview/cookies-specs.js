'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

var _safariSetup = require('../safari-setup');

var _safariSetup2 = _interopRequireDefault(_safariSetup);

var _helpersWebview = require('../../helpers/webview');

var _helpersEnv = require('../../helpers/env');

var _helpersEnv2 = _interopRequireDefault(_helpersEnv);

var _helpersSession = require('../../helpers/session');

describe('safari - webview - cookies', function () {
  this.timeout(_helpersSession.MOCHA_SAFARI_TIMEOUT);

  var driver = (0, _safariSetup2['default'])(this, _desired2['default']).driver;

  describe('within iframe webview', function () {
    var _this = this;

    it('should be able to get cookies for a page with none', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersWebview.loadWebView)(_desired2['default'], driver, _helpersEnv2['default'].TEST_END_POINT + 'iframes.html', 'Iframe guinea pig'));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.deleteCookies());

          case 4:
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.setUrl(_helpersEnv2['default'].TEST_END_POINT));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 8:
            context$3$0.sent.should.have.length(0);

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('within webview', function () {
    var _this2 = this;

    beforeEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersWebview.loadWebView)(_desired2['default'], driver));

          case 2:
            return context$3$0.abrupt('return', context$3$0.sent);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    it('should be able to get cookies for a page', function callee$2$0() {
      var cookies;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 2:
            cookies = context$3$0.sent;

            cookies.length.should.equal(2);
            cookies[0].name.should.equal('guineacookie1');
            cookies[0].value.should.equal('i am a cookie value');
            cookies[1].name.should.equal('guineacookie2');
            cookies[1].value.should.equal('cooki√©2');

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    it('should be able to set a cookie for a page', function callee$2$0() {
      var newCookie, cookies;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            newCookie = {
              name: 'newcookie',
              value: 'i\'m new here'
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.deleteCookie(newCookie.name));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 5:
            cookies = context$3$0.sent;

            cookies.map(function (c) {
              return c.name;
            }).should.not.include(newCookie.name);
            cookies.map(function (c) {
              return c.value;
            }).should.not.include(newCookie.value);

            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.setCookie(newCookie));

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 12:
            cookies = context$3$0.sent;

            cookies.map(function (c) {
              return c.name;
            }).should.include(newCookie.name);
            cookies.map(function (c) {
              return c.value;
            }).should.include(newCookie.value);
            // should not clobber old cookies
            cookies.map(function (c) {
              return c.name;
            }).should.include('guineacookie1');
            cookies.map(function (c) {
              return c.value;
            }).should.include('i am a cookie value');

          case 17:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    it('should be able to set a cookie with expiry', function callee$2$0() {
      var newCookie, cookies;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            newCookie = {
              name: 'newcookie',
              value: 'i\'m new here'
            };

            newCookie.expiry = parseInt(Date.now() / 1000, 10) - 1000; // set cookie in past

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.deleteCookie(newCookie.name));

          case 4:
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 6:
            cookies = context$3$0.sent;

            cookies.map(function (c) {
              return c.name;
            }).should.not.include(newCookie.name);
            cookies.map(function (c) {
              return c.value;
            }).should.not.include(newCookie.value);

            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(driver.setCookie(newCookie));

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 13:
            cookies = context$3$0.sent;

            // should not include cookie we just added because of expiry
            cookies.map(function (c) {
              return c.name;
            }).should.not.include(newCookie.name);
            cookies.map(function (c) {
              return c.value;
            }).should.not.include(newCookie.value);
            // should not clobber old cookies
            cookies.map(function (c) {
              return c.name;
            }).should.include('guineacookie1');
            cookies.map(function (c) {
              return c.value;
            }).should.include('i am a cookie value');

          case 18:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    it('should be able to delete one cookie', function callee$2$0() {
      var newCookie, cookies;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            newCookie = {
              name: 'newcookie',
              value: 'i\'m new here'
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.deleteCookie(newCookie.name));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 5:
            cookies = context$3$0.sent;

            cookies.map(function (c) {
              return c.name;
            }).should.not.include(newCookie.name);
            cookies.map(function (c) {
              return c.value;
            }).should.not.include(newCookie.value);

            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.setCookie(newCookie));

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 12:
            cookies = context$3$0.sent;

            cookies.map(function (c) {
              return c.name;
            }).should.include(newCookie.name);
            cookies.map(function (c) {
              return c.value;
            }).should.include(newCookie.value);

            context$3$0.next = 17;
            return _regeneratorRuntime.awrap(driver.deleteCookie('newcookie'));

          case 17:
            context$3$0.next = 19;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 19:
            cookies = context$3$0.sent;

            cookies.map(function (c) {
              return c.name;
            }).should.not.include(newCookie.name);
            cookies.map(function (c) {
              return c.value;
            }).should.not.include(newCookie.value);

          case 22:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    it('should be able to delete all cookie', function callee$2$0() {
      var newCookie, cookies;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            newCookie = {
              name: 'newcookie',
              value: 'i\'m new here'
            };
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.deleteCookie(newCookie.name));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 5:
            cookies = context$3$0.sent;

            cookies.map(function (c) {
              return c.name;
            }).should.not.include(newCookie.name);
            cookies.map(function (c) {
              return c.value;
            }).should.not.include(newCookie.value);

            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.setCookie(newCookie));

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 12:
            cookies = context$3$0.sent;

            cookies.map(function (c) {
              return c.name;
            }).should.include(newCookie.name);
            cookies.map(function (c) {
              return c.value;
            }).should.include(newCookie.value);

            context$3$0.next = 17;
            return _regeneratorRuntime.awrap(driver.deleteCookies());

          case 17:
            context$3$0.next = 19;
            return _regeneratorRuntime.awrap(driver.getCookies());

          case 19:
            cookies = context$3$0.sent;

            cookies.length.should.equal(0);

          case 21:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
