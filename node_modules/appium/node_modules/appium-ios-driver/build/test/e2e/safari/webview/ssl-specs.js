'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _safariSetup = require('../safari-setup');

var _safariSetup2 = _interopRequireDefault(_safariSetup);

var _helpersSession = require('../../helpers/session');

var pem = _bluebird2['default'].promisifyAll(require('pem'));

describe('When accessing an HTTPS encrypted site in Safari', function () {
  var _this = this;

  this.timeout(_helpersSession.MOCHA_SAFARI_TIMEOUT);

  var sslServer = undefined;
  var caps = _Object$assign({}, _desired2['default']);

  before(function callee$1$0() {
    var privateKey, keys, pemCertificate;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(pem.createPrivateKeyAsync());

        case 2:
          privateKey = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(pem.createCertificateAsync({ days: 1, selfSigned: true, serviceKey: privateKey.key }));

        case 5:
          keys = context$2$0.sent;
          pemCertificate = keys.certificate;

          sslServer = _https2['default'].createServer({ key: keys.serviceKey, cert: pemCertificate }, function (req, res) {
            res.end('Arbitrary text');
          }).listen(9758);
          caps.customSSLCert = pemCertificate;
          caps.fullReset = false;
          caps.noReset = true;

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  var driver = (0, _safariSetup2['default'])(this, caps).driver;

  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!sslServer) {
            context$2$0.next = 3;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(sslServer.close());

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should be able to access it as long the PEM certificate is provided as a capability', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(driver.setUrl('https://localhost:9758'));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(driver.getPageSource());

        case 6:
          context$2$0.sent.should.include('Arbitrary text');

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// Create an HTTPS server with a random pem certificate
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3NhZmFyaS93ZWJ2aWV3L3NzbC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozt1QkFBb0IsV0FBVzs7Ozt3QkFDakIsVUFBVTs7OztxQkFDTixPQUFPOzs7OzJCQUNQLGlCQUFpQjs7Ozs4QkFDRSx1QkFBdUI7O0FBRzVELElBQU0sR0FBRyxHQUFHLHNCQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs7QUFFM0MsUUFBUSxDQUFDLGtEQUFrRCxFQUFFLFlBQVk7OztBQUN2RSxNQUFJLENBQUMsT0FBTyxzQ0FBc0IsQ0FBQzs7QUFFbkMsTUFBSSxTQUFTLFlBQUEsQ0FBQztBQUNkLE1BQUksSUFBSSxHQUFHLGVBQWMsRUFBRSx1QkFBVSxDQUFDOztBQUV0QyxRQUFNLENBQUM7UUFFRCxVQUFVLEVBQ1YsSUFBSSxFQUNKLGNBQWM7Ozs7OzJDQUZLLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRTs7O0FBQTlDLG9CQUFVOzsyQ0FDRyxHQUFHLENBQUMsc0JBQXNCLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUMsQ0FBQzs7O0FBQS9GLGNBQUk7QUFDSix3QkFBYyxHQUFHLElBQUksQ0FBQyxXQUFXOztBQUVyQyxtQkFBUyxHQUFHLG1CQUFNLFlBQVksQ0FBQyxFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUMsRUFBRSxVQUFVLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDL0YsZUFBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1dBQzNCLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEIsY0FBSSxDQUFDLGFBQWEsR0FBRyxjQUFjLENBQUM7QUFDcEMsY0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFDdkIsY0FBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Ozs7Ozs7R0FDckIsQ0FBQyxDQUFDOztBQUVILE1BQU0sTUFBTSxHQUFHLDhCQUFNLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUM7O0FBRXhDLE9BQUssQ0FBQzs7OztlQUNBLFNBQVM7Ozs7OzsyQ0FDTCxTQUFTLENBQUMsS0FBSyxFQUFFOzs7Ozs7O0dBRTFCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMscUZBQXFGLEVBQUU7Ozs7OzJDQUNsRixzQkFBRSxLQUFLLENBQUMsR0FBRyxDQUFDOzs7OzJDQUNaLE1BQU0sQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUM7Ozs7MkNBQ3RDLE1BQU0sQ0FBQyxhQUFhLEVBQUU7OzsyQkFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFnQjs7Ozs7OztHQUMvRCxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lMmUvc2FmYXJpL3dlYnZpZXcvc3NsLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlc2lyZWQgZnJvbSAnLi9kZXNpcmVkJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgc2V0dXAgZnJvbSAnLi4vc2FmYXJpLXNldHVwJztcbmltcG9ydCB7IE1PQ0hBX1NBRkFSSV9USU1FT1VUIH0gZnJvbSAnLi4vLi4vaGVscGVycy9zZXNzaW9uJztcblxuXG5jb25zdCBwZW0gPSBCLnByb21pc2lmeUFsbChyZXF1aXJlKCdwZW0nKSk7XG5cbmRlc2NyaWJlKCdXaGVuIGFjY2Vzc2luZyBhbiBIVFRQUyBlbmNyeXB0ZWQgc2l0ZSBpbiBTYWZhcmknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMudGltZW91dChNT0NIQV9TQUZBUklfVElNRU9VVCk7XG5cbiAgbGV0IHNzbFNlcnZlcjtcbiAgbGV0IGNhcHMgPSBPYmplY3QuYXNzaWduKHt9LCBkZXNpcmVkKTtcblxuICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIC8vIENyZWF0ZSBhbiBIVFRQUyBzZXJ2ZXIgd2l0aCBhIHJhbmRvbSBwZW0gY2VydGlmaWNhdGVcbiAgICBsZXQgcHJpdmF0ZUtleSA9IGF3YWl0IHBlbS5jcmVhdGVQcml2YXRlS2V5QXN5bmMoKTtcbiAgICBsZXQga2V5cyA9IGF3YWl0IHBlbS5jcmVhdGVDZXJ0aWZpY2F0ZUFzeW5jKHtkYXlzOjEsIHNlbGZTaWduZWQ6IHRydWUsIHNlcnZpY2VLZXk6IHByaXZhdGVLZXkua2V5fSk7XG4gICAgbGV0IHBlbUNlcnRpZmljYXRlID0ga2V5cy5jZXJ0aWZpY2F0ZTtcblxuICAgIHNzbFNlcnZlciA9IGh0dHBzLmNyZWF0ZVNlcnZlcih7a2V5OiBrZXlzLnNlcnZpY2VLZXksIGNlcnQ6IHBlbUNlcnRpZmljYXRlfSwgZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICByZXMuZW5kKCdBcmJpdHJhcnkgdGV4dCcpO1xuICAgIH0pLmxpc3Rlbig5NzU4KTtcbiAgICBjYXBzLmN1c3RvbVNTTENlcnQgPSBwZW1DZXJ0aWZpY2F0ZTtcbiAgICBjYXBzLmZ1bGxSZXNldCA9IGZhbHNlO1xuICAgIGNhcHMubm9SZXNldCA9IHRydWU7XG4gIH0pO1xuXG4gIGNvbnN0IGRyaXZlciA9IHNldHVwKHRoaXMsIGNhcHMpLmRyaXZlcjtcblxuICBhZnRlcihhc3luYyAoKSA9PiB7XG4gICAgaWYgKHNzbFNlcnZlcikge1xuICAgICAgYXdhaXQgc3NsU2VydmVyLmNsb3NlKCk7XG4gICAgfVxuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gYWNjZXNzIGl0IGFzIGxvbmcgdGhlIFBFTSBjZXJ0aWZpY2F0ZSBpcyBwcm92aWRlZCBhcyBhIGNhcGFiaWxpdHknLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgQi5kZWxheSg1MDApO1xuICAgIGF3YWl0IGRyaXZlci5zZXRVcmwoJ2h0dHBzOi8vbG9jYWxob3N0Ojk3NTgnKTtcbiAgICAoYXdhaXQgZHJpdmVyLmdldFBhZ2VTb3VyY2UoKSkuc2hvdWxkLmluY2x1ZGUoJ0FyYml0cmFyeSB0ZXh0Jyk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uLy4uIn0=
