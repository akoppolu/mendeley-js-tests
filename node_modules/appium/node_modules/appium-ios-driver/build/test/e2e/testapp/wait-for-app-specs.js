'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _setupBase = require("../setup-base");

var _setupBase2 = _interopRequireDefault(_setupBase);

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

describe('testapp - wait-for-apps', function () {

  var test = function test(desc, script, checkAfter) {
    script = 'env.currentTest = "' + desc + '"; ' + script;
    describe(desc, function () {
      var _this = this;

      var session = (0, _setupBase2['default'])(this, _lodash2['default'].defaults({ waitForAppScript: script }, _desired2['default']));
      var driver = session.driver;

      it('should work', function callee$3$0() {
        var el;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.findElement('class name', 'UIAButton'));

            case 2:
              el = context$4$0.sent;

              el.should.exist;

              if (!checkAfter) {
                context$4$0.next = 9;
                break;
              }

              context$4$0.next = 7;
              return _regeneratorRuntime.awrap(driver.execute('env.currentTest'));

            case 7:
              context$4$0.t0 = desc;
              context$4$0.sent.should.equal(context$4$0.t0);

            case 9:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });
  };

  test('just waiting', '$.delay(5000); true;', true);
  test('waiting for one element', 'target.elements().length > 0;', true);
  test('bad script', 'blagimarg!!;', false);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3Rlc3RhcHAvd2FpdC1mb3ItYXBwLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozt5QkFBa0IsZUFBZTs7Ozt1QkFDYixXQUFXOzs7O3NCQUNqQixRQUFROzs7O0FBRXRCLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxZQUFZOztBQUU5QyxNQUFJLElBQUksR0FBRyxTQUFQLElBQUksQ0FBYSxJQUFJLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRTtBQUM3QyxVQUFNLDJCQUF5QixJQUFJLFdBQU0sTUFBTSxBQUFFLENBQUM7QUFDbEQsWUFBUSxDQUFDLElBQUksRUFBRSxZQUFZOzs7QUFDekIsVUFBSSxPQUFPLEdBQUcsNEJBQU0sSUFBSSxFQUFFLG9CQUFFLFFBQVEsQ0FBQyxFQUFDLGdCQUFnQixFQUFFLE1BQU0sRUFBQyx1QkFBVSxDQUFDLENBQUM7QUFDM0UsVUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQzs7QUFFNUIsUUFBRSxDQUFDLGFBQWEsRUFBRTtZQUNaLEVBQUU7Ozs7OytDQUFTLE1BQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQzs7O0FBQXhELGdCQUFFOztBQUNOLGdCQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzs7bUJBQ1osVUFBVTs7Ozs7OytDQUNMLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7OzsrQkFBZSxJQUFJOytCQUFqQixNQUFNLENBQUMsS0FBSzs7Ozs7OztPQUV6RCxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDSixDQUFDOztBQUVGLE1BQUksQ0FBQyxjQUFjLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkQsTUFBSSxDQUFDLHlCQUF5QixFQUFFLCtCQUErQixFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZFLE1BQUksQ0FBQyxZQUFZLEVBQUUsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQzNDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2UyZS90ZXN0YXBwL3dhaXQtZm9yLWFwcC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXR1cCBmcm9tIFwiLi4vc2V0dXAtYmFzZVwiO1xuaW1wb3J0IGRlc2lyZWQgZnJvbSAnLi9kZXNpcmVkJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmRlc2NyaWJlKCd0ZXN0YXBwIC0gd2FpdC1mb3ItYXBwcycsIGZ1bmN0aW9uICgpIHtcblxuICBsZXQgdGVzdCA9IGZ1bmN0aW9uIChkZXNjLCBzY3JpcHQsIGNoZWNrQWZ0ZXIpIHtcbiAgICBzY3JpcHQgPSBgZW52LmN1cnJlbnRUZXN0ID0gXCIke2Rlc2N9XCI7ICR7c2NyaXB0fWA7XG4gICAgZGVzY3JpYmUoZGVzYywgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHNlc3Npb24gPSBzZXR1cCh0aGlzLCBfLmRlZmF1bHRzKHt3YWl0Rm9yQXBwU2NyaXB0OiBzY3JpcHR9LCBkZXNpcmVkKSk7XG4gICAgICBsZXQgZHJpdmVyID0gc2Vzc2lvbi5kcml2ZXI7XG5cbiAgICAgIGl0KCdzaG91bGQgd29yaycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IGVsID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCdjbGFzcyBuYW1lJywgJ1VJQUJ1dHRvbicpO1xuICAgICAgICBlbC5zaG91bGQuZXhpc3Q7XG4gICAgICAgIGlmIChjaGVja0FmdGVyKSB7XG4gICAgICAgICAgKGF3YWl0IGRyaXZlci5leGVjdXRlKCdlbnYuY3VycmVudFRlc3QnKSkuc2hvdWxkLmVxdWFsKGRlc2MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB0ZXN0KCdqdXN0IHdhaXRpbmcnLCAnJC5kZWxheSg1MDAwKTsgdHJ1ZTsnLCB0cnVlKTtcbiAgdGVzdCgnd2FpdGluZyBmb3Igb25lIGVsZW1lbnQnLCAndGFyZ2V0LmVsZW1lbnRzKCkubGVuZ3RoID4gMDsnLCB0cnVlKTtcbiAgdGVzdCgnYmFkIHNjcmlwdCcsICdibGFnaW1hcmchITsnLCBmYWxzZSk7XG59KTtcblxuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
