'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _setupBase = require("../../setup-base");

var _setupBase2 = _interopRequireDefault(_setupBase);

var _desired = require('../desired');

var _desired2 = _interopRequireDefault(_desired);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _helpersRecipes = require('../../helpers/recipes');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

describe('testapp - basics - calc app 2', function () {
  var _this = this;

  var session = (0, _setupBase2['default'])(this, _desired2['default']);
  var driver = session.driver;

  it('should lookup two fields by name and populate them with ' + 'random numbers to finally sum them up', function callee$1$0() {
    var sum, lookup, answer, button, res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          sum = 0;

          lookup = function lookup(textFieldNum) {
            var num, el;
            return _regeneratorRuntime.async(function lookup$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  num = Math.round(Math.random() * 10000);

                  sum += num;
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(driver.findElement('accessibility id', 'TextField' + textFieldNum));

                case 4:
                  el = context$3$0.sent;
                  context$3$0.next = 7;
                  return _regeneratorRuntime.awrap(driver.setValue(num, el));

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          };

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(driver.findElement('accessibility id', 'Answer'));

        case 4:
          answer = context$2$0.sent;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(lookup(1));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(lookup(2));

        case 9:
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(driver.findElement('accessibility id', 'ComputeSumButton'));

        case 11:
          button = context$2$0.sent;
          context$2$0.next = 14;
          return _regeneratorRuntime.awrap(driver.click(button));

        case 14:
          context$2$0.next = 16;
          return _regeneratorRuntime.awrap(driver.getText(answer));

        case 16:
          context$2$0.t0 = context$2$0.sent;
          res = parseInt(context$2$0.t0, 10);

          res.should.equal(sum);

        case 19:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should receive correct error', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_bluebird2['default'].resolve(driver.execute("mobile: doesn't exist"))['catch'](_helpersRecipes.throwMatchableError).should.be.rejectedWith(/jsonwpCode: 9/));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should be able to get syslog log type', function callee$1$0() {
    var logTypes;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.getLogTypes());

        case 2:
          logTypes = context$2$0.sent;

          logTypes.should.include('syslog');
          logTypes.should.include('crashlog');
          logTypes.should.not.include('logcat');

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  // TODO: Fails on sauce, investigate
  // TODO: Fails with 8.4 or Appium 1.5, investigate cause
  it.skip('should be able to get syslog logs @skip-ios8 @skip-ci', function callee$1$0() {
    var logs;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.implicitWait(4000));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_bluebird2['default'].resolve(driver.findElement('accessibility id', 'SumLabelz'))['catch'](_helpersRecipes.throwMatchableError).should.be.rejectedWith(/jsonwpCode: 7/));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(driver.getLog());

        case 6:
          logs = context$2$0.sent;

          logs.length.should.be.above(0);
          logs[0].message.should.not.include("\n");
          logs[0].level.should.equal("ALL");
          logs[0].timestamp.should.exist;

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should be able to get crashlog logs @skip-ci', function callee$1$0() {
    var dir, msg, logs;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          dir = _path2['default'].resolve(process.env.HOME, "Library", "Logs", "DiagnosticReports");
          msg = 'boom';
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(driver.getLog('crashlog'));

        case 4:
          logs = context$2$0.sent;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(dir + '/myApp_' + Date.parse(new Date()) + '_rocksauce.crash', msg));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(driver.getLog('crashlog'));

        case 9:
          logs = context$2$0.sent;

          logs.length.should.equal(1);
          _lodash2['default'].last(logs).message.should.not.include("\n");
          _lodash2['default'].last(logs).message.should.equal(msg);
          _lodash2['default'].last(logs).level.should.equal("ALL");
          _lodash2['default'].last(logs).timestamp.should.exist;
          context$2$0.next = 17;
          return _regeneratorRuntime.awrap(driver.getLog('crashlog'));

        case 17:
          logs = context$2$0.sent;

          logs.length.should.equal(0);

        case 19:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3Rlc3RhcHAvYmFzaWNzL2NhbGMtYXBwLTItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O3lCQUFrQixrQkFBa0I7Ozs7dUJBQ2hCLFlBQVk7Ozs7d0JBQ2xCLFVBQVU7Ozs7OEJBQ1ksdUJBQXVCOztvQkFDMUMsTUFBTTs7Ozs2QkFDSixnQkFBZ0I7O3NCQUNyQixRQUFROzs7O0FBRXRCLFFBQVEsQ0FBQywrQkFBK0IsRUFBRSxZQUFZOzs7QUFDcEQsTUFBSSxPQUFPLEdBQUcsNEJBQU0sSUFBSSx1QkFBVSxDQUFDO0FBQ25DLE1BQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7O0FBRTVCLElBQUUsQ0FBQywwREFBMEQsR0FDekQsdUNBQXVDLEVBQUU7UUFDdkMsR0FBRyxFQUNILE1BQU0sRUFPTixNQUFNLEVBR04sTUFBTSxFQUVOLEdBQUc7Ozs7QUFiSCxhQUFHLEdBQUcsQ0FBQzs7QUFDUCxnQkFBTSxHQUFHLFNBQVQsTUFBTSxDQUFtQixZQUFZO2dCQUNuQyxHQUFHLEVBRUgsRUFBRTs7OztBQUZGLHFCQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDOztBQUMzQyxxQkFBRyxJQUFJLEdBQUcsQ0FBQzs7bURBQ0ksTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsZ0JBQWMsWUFBWSxDQUFHOzs7QUFBN0Usb0JBQUU7O21EQUNBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQzs7Ozs7OztXQUMvQjs7OzJDQUVrQixNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQzs7O0FBQS9ELGdCQUFNOzsyQ0FDSixNQUFNLENBQUMsQ0FBQyxDQUFDOzs7OzJDQUNULE1BQU0sQ0FBQyxDQUFDLENBQUM7Ozs7MkNBQ0ksTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBQzs7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QUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2Qyw4QkFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkMsOEJBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDOzsyQ0FDdkIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7OztBQUF0QyxjQUFJOztBQUNKLGNBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7OztHQUM3QixDQUFDLENBQUM7Q0FFSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lMmUvdGVzdGFwcC9iYXNpY3MvY2FsYy1hcHAtMi1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXR1cCBmcm9tIFwiLi4vLi4vc2V0dXAtYmFzZVwiO1xuaW1wb3J0IGRlc2lyZWQgZnJvbSAnLi4vZGVzaXJlZCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyB0aHJvd01hdGNoYWJsZUVycm9yIH0gZnJvbSAnLi4vLi4vaGVscGVycy9yZWNpcGVzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5kZXNjcmliZSgndGVzdGFwcCAtIGJhc2ljcyAtIGNhbGMgYXBwIDInLCBmdW5jdGlvbiAoKSB7XG4gIGxldCBzZXNzaW9uID0gc2V0dXAodGhpcywgZGVzaXJlZCk7XG4gIGxldCBkcml2ZXIgPSBzZXNzaW9uLmRyaXZlcjtcblxuICBpdCgnc2hvdWxkIGxvb2t1cCB0d28gZmllbGRzIGJ5IG5hbWUgYW5kIHBvcHVsYXRlIHRoZW0gd2l0aCAnICtcbiAgICAgICdyYW5kb20gbnVtYmVycyB0byBmaW5hbGx5IHN1bSB0aGVtIHVwJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGxldCBsb29rdXAgPSBhc3luYyBmdW5jdGlvbiAodGV4dEZpZWxkTnVtKSB7XG4gICAgICBsZXQgbnVtID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDApO1xuICAgICAgc3VtICs9IG51bTtcbiAgICAgIGxldCBlbCA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgnYWNjZXNzaWJpbGl0eSBpZCcsIGBUZXh0RmllbGQke3RleHRGaWVsZE51bX1gKTtcbiAgICAgIGF3YWl0IGRyaXZlci5zZXRWYWx1ZShudW0sIGVsKTtcbiAgICB9O1xuXG4gICAgbGV0IGFuc3dlciA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgnYWNjZXNzaWJpbGl0eSBpZCcsICdBbnN3ZXInKTtcbiAgICBhd2FpdCBsb29rdXAoMSk7XG4gICAgYXdhaXQgbG9va3VwKDIpO1xuICAgIGxldCBidXR0b24gPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ2FjY2Vzc2liaWxpdHkgaWQnLCAnQ29tcHV0ZVN1bUJ1dHRvbicpO1xuICAgIGF3YWl0IGRyaXZlci5jbGljayhidXR0b24pO1xuICAgIGxldCByZXMgPSBwYXJzZUludChhd2FpdCBkcml2ZXIuZ2V0VGV4dChhbnN3ZXIpLCAxMCk7XG4gICAgcmVzLnNob3VsZC5lcXVhbChzdW0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlY2VpdmUgY29ycmVjdCBlcnJvcicsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBCLnJlc29sdmUoZHJpdmVyLmV4ZWN1dGUoXCJtb2JpbGU6IGRvZXNuJ3QgZXhpc3RcIikpXG4gICAgICAuY2F0Y2godGhyb3dNYXRjaGFibGVFcnJvcilcbiAgICAgIC5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9qc29ud3BDb2RlOiA5Lyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byBnZXQgc3lzbG9nIGxvZyB0eXBlJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBsb2dUeXBlcyA9IGF3YWl0IGRyaXZlci5nZXRMb2dUeXBlcygpO1xuICAgIGxvZ1R5cGVzLnNob3VsZC5pbmNsdWRlKCdzeXNsb2cnKTtcbiAgICBsb2dUeXBlcy5zaG91bGQuaW5jbHVkZSgnY3Jhc2hsb2cnKTtcbiAgICBsb2dUeXBlcy5zaG91bGQubm90LmluY2x1ZGUoJ2xvZ2NhdCcpO1xuICB9KTtcblxuICAvLyBUT0RPOiBGYWlscyBvbiBzYXVjZSwgaW52ZXN0aWdhdGVcbiAgLy8gVE9ETzogRmFpbHMgd2l0aCA4LjQgb3IgQXBwaXVtIDEuNSwgaW52ZXN0aWdhdGUgY2F1c2VcbiAgaXQuc2tpcCgnc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHN5c2xvZyBsb2dzIEBza2lwLWlvczggQHNraXAtY2knLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZHJpdmVyLmltcGxpY2l0V2FpdCg0MDAwKTtcbiAgICBhd2FpdCBCLnJlc29sdmUoZHJpdmVyLmZpbmRFbGVtZW50KCdhY2Nlc3NpYmlsaXR5IGlkJywgJ1N1bUxhYmVseicpKVxuICAgICAgLmNhdGNoKHRocm93TWF0Y2hhYmxlRXJyb3IpXG4gICAgICAuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvanNvbndwQ29kZTogNy8pO1xuICAgIGxldCBsb2dzID0gYXdhaXQgZHJpdmVyLmdldExvZygpO1xuICAgIGxvZ3MubGVuZ3RoLnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICBsb2dzWzBdLm1lc3NhZ2Uuc2hvdWxkLm5vdC5pbmNsdWRlKFwiXFxuXCIpO1xuICAgIGxvZ3NbMF0ubGV2ZWwuc2hvdWxkLmVxdWFsKFwiQUxMXCIpO1xuICAgIGxvZ3NbMF0udGltZXN0YW1wLnNob3VsZC5leGlzdDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIGdldCBjcmFzaGxvZyBsb2dzIEBza2lwLWNpJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBkaXIgPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuSE9NRSwgXCJMaWJyYXJ5XCIsIFwiTG9nc1wiLCBcIkRpYWdub3N0aWNSZXBvcnRzXCIpO1xuICAgIGxldCBtc2cgPSAnYm9vbSc7XG4gICAgbGV0IGxvZ3MgPSBhd2FpdCBkcml2ZXIuZ2V0TG9nKCdjcmFzaGxvZycpO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShgJHtkaXJ9L215QXBwXyR7RGF0ZS5wYXJzZShuZXcgRGF0ZSgpKX1fcm9ja3NhdWNlLmNyYXNoYCwgbXNnKTtcbiAgICBsb2dzID0gYXdhaXQgZHJpdmVyLmdldExvZygnY3Jhc2hsb2cnKTtcbiAgICBsb2dzLmxlbmd0aC5zaG91bGQuZXF1YWwoMSk7XG4gICAgXy5sYXN0KGxvZ3MpLm1lc3NhZ2Uuc2hvdWxkLm5vdC5pbmNsdWRlKFwiXFxuXCIpO1xuICAgIF8ubGFzdChsb2dzKS5tZXNzYWdlLnNob3VsZC5lcXVhbChtc2cpO1xuICAgIF8ubGFzdChsb2dzKS5sZXZlbC5zaG91bGQuZXF1YWwoXCJBTExcIik7XG4gICAgXy5sYXN0KGxvZ3MpLnRpbWVzdGFtcC5zaG91bGQuZXhpc3Q7XG4gICAgbG9ncyA9IGF3YWl0IGRyaXZlci5nZXRMb2coJ2NyYXNobG9nJyk7XG4gICAgbG9ncy5sZW5ndGguc2hvdWxkLmVxdWFsKDApO1xuICB9KTtcblxufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uLy4uIn0=
