'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _setupBase = require("../setup-base");

var _setupBase2 = _interopRequireDefault(_setupBase);

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _helpersEnv = require('../helpers/env');

var _helpersEnv2 = _interopRequireDefault(_helpersEnv);

var _unorm = require('unorm');

var _unorm2 = _interopRequireDefault(_unorm);

describe('testapp - keyboard', function () {
  this.timeout(_helpersEnv2['default'].MOCHA_INIT_TIMEOUT);

  var test = function test(strategy) {
    describe('typing with strategy: ' + (strategy || 'undefined'), function () {
      var _this = this;

      // TODO: when sending 'Appium Rocks', autocompletion kicks in and
      //       messes up the test, investigate.
      var text = 'good morning';

      var session = (0, _setupBase2['default'])(this, _lodash2['default'].defaults({ sendKeyStrategy: strategy }, _desired2['default']));
      var driver = session.driver;

      it("should send keys to a text field", function callee$3$0() {
        var env, el, text2;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.execute('env'));

            case 2:
              env = context$4$0.sent;

              if (strategy) {
                env.sendKeyStrategy.should.equal(strategy);
              } else {
                env.sendKeyStrategy.should.equal(process.env.REAL_DEVICE ? 'grouped' : 'oneByOne');
              }
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(driver.findElement('class name', 'UIATextField'));

            case 6:
              el = context$4$0.sent;
              context$4$0.next = 9;
              return _regeneratorRuntime.awrap(driver.clear(el));

            case 9:
              context$4$0.next = 11;
              return _regeneratorRuntime.awrap(driver.setValue(text, el));

            case 11:
              context$4$0.next = 13;
              return _regeneratorRuntime.awrap(driver.getText(el));

            case 13:
              text2 = context$4$0.sent;

              if (strategy === 'grouped') {
                text2.length.should.be.above(0);
              } else {
                text2.should.equal(text);
              }

            case 15:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });
  };

  _lodash2['default'].each([undefined, 'oneByOne', 'grouped', 'setValue'], test);

  describe("typing", function () {
    var _this3 = this;

    var session = (0, _setupBase2['default'])(this, _desired2['default']);
    var driver = session.driver;

    describe("stability @skip-ci", function () {
      var runs = 10,
          text = 'Delhi is New @@@ BREAKFAST-FOOD-0001';

      var test = function test() {
        var _this2 = this;

        it("should send keys to a text field", function callee$4$0() {
          var el;
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(driver.findElement('class name', 'UIATextField'));

              case 2:
                el = context$5$0.sent;
                context$5$0.next = 5;
                return _regeneratorRuntime.awrap(driver.clear(el));

              case 5:
                driver.setValue(text, el);
                context$5$0.next = 8;
                return _regeneratorRuntime.awrap(driver.getText(el));

              case 8:
                context$5$0.t0 = text;
                context$5$0.sent.should.equal(context$5$0.t0);

              case 10:
              case 'end':
                return context$5$0.stop();
            }
          }, null, _this2);
        });
      };

      for (var n = 0; n < runs; n++) {
        describe('sendKeys test ' + (n + 1), test);
      }
    });

    it('should send accented text', function callee$2$0() {
      var testText, els, el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            testText = _unorm2['default'].nfd("é Œ ù ḍ");
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.findElements('class name', 'UIATextField'));

          case 3:
            els = context$3$0.sent;
            el = els[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(driver.clear(el));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(driver.setValue(testText, el));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(driver.getText(el));

          case 11:
            context$3$0.t0 = testText;
            context$3$0.sent.should.equal(context$3$0.t0);

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });

    it('should send backspace key', function callee$2$0() {
      var els, el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.findElements('class name', 'UIATextField'));

          case 2:
            els = context$3$0.sent;
            el = els[1];
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.clear(el));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.setValue('abcd', el));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.getText(el));

          case 10:
            context$3$0.sent.should.equal('abcd');
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(driver.setValue('', el));

          case 13:
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap(driver.getText(el));

          case 15:
            context$3$0.sent.should.equal('ab');

          case 16:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });

    it('should send delete key', function callee$2$0() {
      var els, el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.findElements('class name', 'UIATextField'));

          case 2:
            els = context$3$0.sent;
            el = els[1];
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.clear(el));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.setValue('abcd', el));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.setValue('', el));

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.getText(el));

          case 12:
            context$3$0.sent.should.equal('ab');

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });

    it('should send single quote text with setValue', function callee$2$0() {
      var testText, els, el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            testText = "'";
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.findElements('class name', 'UIATextField'));

          case 3:
            els = context$3$0.sent;
            el = els[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(driver.clear(el));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(driver.setValue(testText, el));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(driver.getText(el));

          case 11:
            context$3$0.t0 = testText;
            context$3$0.sent.should.equal(context$3$0.t0);

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });
    it('should send single quote text with keys', function callee$2$0() {
      var testText, els, el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            testText = "'";
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.findElements('class name', 'UIATextField'));

          case 3:
            els = context$3$0.sent;
            el = els[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(driver.clear(el));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(driver.keys(testText));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(driver.getText(el));

          case 11:
            context$3$0.t0 = testText;
            context$3$0.sent.should.equal(context$3$0.t0);

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });
    it('should send text with a newline', function callee$2$0() {
      var testText, els, el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            testText = ['my string\n'];
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.findElements('class name', 'UIATextField'));

          case 3:
            els = context$3$0.sent;
            el = els[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(driver.clear(el));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(driver.keys(testText));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(driver.getText(el));

          case 11:
            context$3$0.sent.should.equal('my string');

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
