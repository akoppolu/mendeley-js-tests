'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _setupBase = require("../setup-base");

var _setupBase2 = _interopRequireDefault(_setupBase);

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _helpersRecipes = require('../helpers/recipes');

//let okIfAlert = require('../../../helpers/alert').okIfAlert,

describe('testapp - touch actions', function () {
  var session = (0, _setupBase2['default'])(this, _desired2['default']);
  var driver = session.driver;

  function goToMap() {
    var map, buttons, gestures;
    return _regeneratorRuntime.async(function goToMap$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          map = undefined;
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(driver.findElement('xpath', '//UIAMapView'));

        case 4:
          map = context$2$0.sent;
          context$2$0.next = 9;
          break;

        case 7:
          context$2$0.prev = 7;
          context$2$0.t0 = context$2$0['catch'](1);

        case 9:
          if (map) {
            context$2$0.next = 22;
            break;
          }

          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(driver.findElements('class name', 'UIAButton'));

        case 12:
          buttons = context$2$0.sent;
          gestures = [{ action: 'tap', options: { element: buttons[5].ELEMENT } }];
          context$2$0.next = 16;
          return _regeneratorRuntime.awrap(driver.performTouch(gestures));

        case 16:
          context$2$0.next = 18;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

        case 18:
          context$2$0.next = 20;
          return _regeneratorRuntime.awrap((0, _helpersRecipes.okIfAlert)(driver));

        case 20:
          context$2$0.next = 22;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

        case 22:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[1, 7]]);
  }

  describe('tap', function () {
    var _this = this;

    it('should tap on a specified element', function callee$2$0() {
      var buttons, gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.findElements('class name', 'UIAButton'));

          case 2:
            buttons = context$3$0.sent;
            gestures = [{ action: 'tap', options: { element: buttons[1].ELEMENT } }];
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap((0, _helpersRecipes.okIfAlert)(driver));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('wait', function () {
    var _this2 = this;

    it('should move the page and wait a bit', function callee$2$0() {
      var map, gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(goToMap());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.findElement('xpath', '//UIAMapView'));

          case 4:
            map = context$3$0.sent;
            gestures = [{ action: 'press', options: { element: map.ELEMENT } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 0, y: 100 } }, { action: 'wait', options: { ms: 5000 } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 0, y: 0 } }, { action: 'release' }];
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  });

  describe('pinch', function () {
    var _this3 = this;

    it('should do some pinching', function callee$2$0() {
      var map, actions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(goToMap());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.findElement('xpath', '//UIAMapView'));

          case 4:
            map = context$3$0.sent;
            actions = [[{ action: 'press', options: { element: map.ELEMENT } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 0, y: 0 } }, { action: 'release' }], [{ action: 'press', options: { element: map.ELEMENT } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 100, y: 100 } }, { action: 'release' }]];
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.performMultiAction(actions));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });

    it('should do more involved pinching in and out', function callee$2$0() {
      var map, actions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(goToMap());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.findElement('xpath', '//UIAMapView'));

          case 4:
            map = context$3$0.sent;
            actions = [[{ action: 'press', options: { element: map.ELEMENT } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 25, y: 25 } }, { action: 'wait', options: { ms: 3000 } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 100, y: 100 } }, { action: 'release' }], [{ action: 'press', options: { element: map.ELEMENT } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 100, y: 0 } }, { action: 'wait', options: { ms: 3000 } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 0, y: 0 } }, { action: 'release' }]];
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.performMultiAction(actions));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });
  });
});

describe('testapp - swipe actions', function () {
  var session = (0, _setupBase2['default'])(this, _desired2['default']);
  var driver = session.driver;

  describe('swipe', function () {
    var _this4 = this;

    var slider = undefined,
        target = undefined,
        loc = undefined;
    var leftPos = { x: 0, y: 0 },
        rightPos = { x: 0, y: 0 },
        centerPos = { x: 0, y: 0 };

    var getNumericValue = function getNumericValue(pctVal) {
      pctVal = pctVal.replace("%", "");
      pctVal = parseInt(pctVal, 10);
      return pctVal;
    };

    var testSliderValueNot0or100 = function testSliderValueNot0or100(value) {
      value = getNumericValue(value);
      // should be ~50
      value.should.be.above(15);
      value.should.be.below(85);
    };

    var getSliderValue = function getSliderValue() {
      return _regeneratorRuntime.async(function getSliderValue$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getAttribute('value', slider));

          case 2:
            return context$3$0.abrupt('return', context$3$0.sent);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    };

    before(function callee$2$0() {
      var size;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.findElement('class name', "UIASlider"));

          case 2:
            slider = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getLocation(slider));

          case 5:
            loc = context$3$0.sent;
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.getSize(slider));

          case 8:
            size = context$3$0.sent;

            leftPos.x = loc.x - 5;
            centerPos.x = loc.x + size.width * 0.5;
            rightPos.x = loc.x + size.width + 5;
            leftPos.y = rightPos.y = centerPos.y = loc.y + size.height * 0.5;
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap(driver.findElement('accessibility id', "Access'ibility"));

          case 15:
            target = context$3$0.sent;
            context$3$0.next = 18;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 18:
            context$3$0.t0 = context$3$0.sent;
            testSliderValueNot0or100(context$3$0.t0);

          case 20:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });

    // TODO: For some reason it does not swipe to 100% in ci env, investigate
    it('should work with: press {element}, moveTo {destEl} @skip-ci', function callee$2$0() {
      var origValue, gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 2:
            origValue = context$3$0.sent;
            gestures = [{ action: 'press', options: { element: slider.ELEMENT } }, { action: 'wait', options: { ms: 500 } }, { action: 'moveTo', options: { element: target.ELEMENT } }, { action: 'release' }];
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 8:
            context$3$0.t0 = origValue;
            context$3$0.sent.should.not.equal(context$3$0.t0);
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });

    // TODO: in ios84 the destEl is in a weird place, so we don't test value
    //(await getSliderValue()).should.equal("100%")
    it('should work with: press {element, x, y}, moveTo {element, x, y}', function callee$2$0() {
      var gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            gestures = [{ action: 'press', options: { element: slider.ELEMENT, x: 0.8665, y: 0.5 } }, { action: 'wait', options: { ms: 500 } }, { action: 'moveTo', options: { element: slider.ELEMENT, x: 0.5, y: 0.5 } }, { action: 'release' }];
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 5:
            context$3$0.t0 = context$3$0.sent;
            testSliderValueNot0or100(context$3$0.t0);
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });

    it('should work with: press {x, y}, moveTo {x, y}', function callee$2$0() {
      var gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            gestures = [{ action: 'press', options: { x: centerPos.x, y: centerPos.y } }, { action: 'wait', options: { ms: 500 } }, { action: 'moveTo', options: { x: leftPos.x - centerPos.x, y: leftPos.y - centerPos.y } }, { action: 'release' }];
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 5:
            context$3$0.sent.should.equal("0%");

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });

    it('should work with: {element, x, y}, moveTo {destEl, x, y} @skip-ci', function callee$2$0() {
      var gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            gestures = [{ action: 'press', options: { element: slider.ELEMENT, x: 0, y: 0.5 } }, { action: 'wait', options: { ms: 500 } }, { action: 'moveTo', options: { element: target.ELEMENT, x: 50, y: 0.5 } }, { action: 'release' }];
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 5:
            context$3$0.t0 = context$3$0.sent;
            testSliderValueNot0or100(context$3$0.t0);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });

    // TODO: Crashes in ci env, investigate
    // TODO: For some reason it does not swipe to 100% in ci env, investigate
    it("should work with press {x, y}, moveTo {destEl} @skip-ci", function callee$2$0() {
      var origValue, gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 2:
            origValue = context$3$0.sent;
            gestures = [{ action: 'press', options: { x: centerPos.x, y: centerPos.y } }, { action: 'wait', options: { ms: 500 } }, { action: 'moveTo', options: { element: target.ELEMENT } }, { action: 'release' }];
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 8:
            context$3$0.t0 = origValue;
            context$3$0.sent.should.not.equal(context$3$0.t0);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });
  });
});

// TODO: weird element position in iOS 8.4 so not checking exact value.
//.then(getSliderValue).should.become("100%")
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3Rlc3RhcHAvdG91Y2gtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O3lCQUFrQixlQUFlOzs7O3VCQUNiLFdBQVc7Ozs7d0JBQ2pCLFVBQVU7Ozs7OEJBQ0Usb0JBQW9COzs7O0FBSTlDLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxZQUFZO0FBQzlDLE1BQUksT0FBTyxHQUFHLDRCQUFNLElBQUksdUJBQVUsQ0FBQztBQUNuQyxNQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDOztBQUU1QixXQUFlLE9BQU87UUFDaEIsR0FBRyxFQUtELE9BQU8sRUFDUCxRQUFROzs7O0FBTlYsYUFBRzs7OzJDQUVPLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQzs7O0FBQXZELGFBQUc7Ozs7Ozs7OztjQUVBLEdBQUc7Ozs7OzsyQ0FDYyxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUM7OztBQUE5RCxpQkFBTztBQUNQLGtCQUFRLEdBQUcsQ0FBQyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUMsRUFBQyxDQUFDOzsyQ0FDbEUsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7Ozs7MkNBQzdCLHNCQUFFLEtBQUssQ0FBQyxHQUFHLENBQUM7Ozs7MkNBQ1osK0JBQVUsTUFBTSxDQUFDOzs7OzJDQUNqQixzQkFBRSxLQUFLLENBQUMsR0FBRyxDQUFDOzs7Ozs7O0dBRXJCOztBQUVELFVBQVEsQ0FBQyxLQUFLLEVBQUUsWUFBWTs7O0FBQzFCLE1BQUUsQ0FBQyxtQ0FBbUMsRUFBRTtVQUNsQyxPQUFPLEVBQ1AsUUFBUTs7Ozs7NkNBRFEsTUFBTSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDOzs7QUFBOUQsbUJBQU87QUFDUCxvQkFBUSxHQUFHLENBQUMs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LE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBQyxFQUFDLEVBQ3JFLEVBQUMsTUFBTSxFQUFFLFNBQVMsRUFBQyxDQUNwQjs7NkNBQ0ssTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7Ozs7NkNBQ0osY0FBYyxFQUFFOzs7O0FBQS9DLG9DQUF3Qjs7Ozs7OztLQUN6QixDQUFDLENBQUM7Ozs7QUFJSCxNQUFFLENBQUMseURBQXlELEVBQUU7VUFDeEQsU0FBUyxFQUNULFFBQVE7Ozs7OzZDQURVLGNBQWMsRUFBRTs7O0FBQWxDLHFCQUFTO0FBQ1Qsb0JBQVEsR0FBRyxDQUNiLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBQyxFQUFDLEVBQzVELEVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFDLEVBQUMsRUFDcEMsRUFBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFDLEVBQUMsRUFDdEQsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFDLENBQ3BCOzs2Q0FDSyxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQzs7Ozs2Q0FDNUIsY0FBYyxFQUFFOzs7NkJBQW1CLFNBQVM7NkJBQTFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSzs7Ozs7OztLQUcxQyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lMmUvdGVzdGFwcC90b3VjaC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXR1cCBmcm9tIFwiLi4vc2V0dXAtYmFzZVwiO1xuaW1wb3J0IGRlc2lyZWQgZnJvbSAnLi9kZXNpcmVkJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IG9rSWZBbGVydCB9IGZyb20gJy4uL2hlbHBlcnMvcmVjaXBlcyc7XG5cbi8vbGV0IG9rSWZBbGVydCA9IHJlcXVpcmUoJy4uLy4uLy4uL2hlbHBlcnMvYWxlcnQnKS5va0lmQWxlcnQsXG5cbmRlc2NyaWJlKCd0ZXN0YXBwIC0gdG91Y2ggYWN0aW9ucycsIGZ1bmN0aW9uICgpIHtcbiAgbGV0IHNlc3Npb24gPSBzZXR1cCh0aGlzLCBkZXNpcmVkKTtcbiAgbGV0IGRyaXZlciA9IHNlc3Npb24uZHJpdmVyO1xuXG4gIGFzeW5jIGZ1bmN0aW9uIGdvVG9NYXAgKCkge1xuICAgIGxldCBtYXA7XG4gICAgdHJ5IHtcbiAgICAgIG1hcCA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgneHBhdGgnLCAnLy9VSUFNYXBWaWV3Jyk7XG4gICAgfSBjYXRjaCAoaWduKSB7fVxuICAgIGlmICghbWFwKSB7XG4gICAgICBsZXQgYnV0dG9ucyA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudHMoJ2NsYXNzIG5hbWUnLCAnVUlBQnV0dG9uJyk7XG4gICAgICBsZXQgZ2VzdHVyZXMgPSBbe2FjdGlvbjogJ3RhcCcsIG9wdGlvbnM6IHtlbGVtZW50OiBidXR0b25zWzVdLkVMRU1FTlR9fV07XG4gICAgICBhd2FpdCBkcml2ZXIucGVyZm9ybVRvdWNoKGdlc3R1cmVzKTtcbiAgICAgIGF3YWl0IEIuZGVsYXkoNTAwKTtcbiAgICAgIGF3YWl0IG9rSWZBbGVydChkcml2ZXIpO1xuICAgICAgYXdhaXQgQi5kZWxheSg1MDApO1xuICAgIH1cbiAgfVxuXG4gIGRlc2NyaWJlKCd0YXAnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCB0YXAgb24gYSBzcGVjaWZpZWQgZWxlbWVudCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBidXR0b25zID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50cygnY2xhc3MgbmFtZScsICdVSUFCdXR0b24nKTtcbiAgICAgIGxldCBnZXN0dXJlcyA9IFt7YWN0aW9uOiAndGFwJywgb3B0aW9uczogeyBlbGVtZW50OiBidXR0b25zWzFdLkVMRU1FTlR9fV07XG4gICAgICBhd2FpdCBkcml2ZXIucGVyZm9ybVRvdWNoKGdlc3R1cmVzKTtcbiAgICAgIGF3YWl0IEIuZGVsYXkoMTAwMCk7XG4gICAgICBhd2FpdCBva0lmQWxlcnQoZHJpdmVyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3dhaXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBtb3ZlIHRoZSBwYWdlIGFuZCB3YWl0IGEgYml0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZ29Ub01hcCgpO1xuICAgICAgbGV0IG1hcCA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgneHBhdGgnLCAnLy9VSUFNYXBWaWV3Jyk7XG4gICAgICBsZXQgZ2VzdHVyZXMgPSBbXG4gICAgICAgIHthY3Rpb246ICdwcmVzcycsIG9wdGlvbnM6IHtlbGVtZW50OiBtYXAuRUxFTUVOVH19LFxuICAgICAgICB7YWN0aW9uOiAnbW92ZVRvJywgb3B0aW9uczoge2VsZW1lbnQ6IG1hcC5FTEVNRU5ULCB4OiAwLCB5OjEwMH19LFxuICAgICAgICB7YWN0aW9uOiAnd2FpdCcsIG9wdGlvbnM6IHttczogNTAwMH19LFxuICAgICAgICB7YWN0aW9uOiAnbW92ZVRvJywgb3B0aW9uczoge2VsZW1lbnQ6IG1hcC5FTEVNRU5ULCB4OiAwLCB5OjB9fSxcbiAgICAgICAge2FjdGlvbjogJ3JlbGVhc2UnfVxuICAgICAgXTtcbiAgICAgIGF3YWl0IGRyaXZlci5wZXJmb3JtVG91Y2goZ2VzdHVyZXMpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncGluY2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBkbyBzb21lIHBpbmNoaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZ29Ub01hcCgpO1xuICAgICAgbGV0IG1hcCA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgneHBhdGgnLCAnLy9VSUFNYXBWaWV3Jyk7XG4gICAgICBsZXQgYWN0aW9ucyA9IFtcbiAgICAgICAgW3thY3Rpb246ICdwcmVzcycsIG9wdGlvbnM6IHtlbGVtZW50OiBtYXAuRUxFTUVOVH19LFxuICAgICAgICAge2FjdGlvbjogJ21vdmVUbycsIG9wdGlvbnM6IHtlbGVtZW50OiBtYXAuRUxFTUVOVCwgeDogMCwgeTogMH19LFxuICAgICAgICAge2FjdGlvbjogJ3JlbGVhc2UnfV0sXG4gICAgICAgIFt7YWN0aW9uOiAncHJlc3MnLCBvcHRpb25zOiB7ZWxlbWVudDogbWFwLkVMRU1FTlR9fSxcbiAgICAgICAgIHthY3Rpb246ICdtb3ZlVG8nLCBvcHRpb25zOiB7ZWxlbWVudDogbWFwLkVMRU1FTlQsIHg6IDEwMCwgeTogMTAwfX0sXG4gICAgICAgICB7YWN0aW9uOiAncmVsZWFzZSd9XSxcbiAgICAgIF07XG4gICAgICBhd2FpdCBkcml2ZXIucGVyZm9ybU11bHRpQWN0aW9uKGFjdGlvbnMpO1xuICAgICAgYXdhaXQgQi5kZWxheSgxMDAwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZG8gbW9yZSBpbnZvbHZlZCBwaW5jaGluZyBpbiBhbmQgb3V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZ29Ub01hcCgpO1xuICAgICAgbGV0IG1hcCA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgneHBhdGgnLCAnLy9VSUFNYXBWaWV3Jyk7XG4gICAgICBsZXQgYWN0aW9ucyA9IFtcbiAgICAgICAgW3thY3Rpb246ICdwcmVzcycsIG9wdGlvbnM6IHtlbGVtZW50OiBtYXAuRUxFTUVOVH19LFxuICAgICAgICAge2FjdGlvbjogJ21vdmVUbycsIG9wdGlvbnM6IHtlbGVtZW50OiBtYXAuRUxFTUVOVCwgeDogMjUsIHk6IDI1fX0sXG4gICAgICAgICB7YWN0aW9uOiAnd2FpdCcsIG9wdGlvbnM6IHttczogMzAwMH19LFxuICAgICAgICAge2FjdGlvbjogJ21vdmVUbycsIG9wdGlvbnM6IHtlbGVtZW50OiBtYXAuRUxFTUVOVCwgeDogMTAwLCB5OiAxMDB9fSxcbiAgICAgICAgIHthY3Rpb246ICdyZWxlYXNlJ31dLFxuICAgICAgICBbe2FjdGlvbjogJ3ByZXNzJywgb3B0aW9uczoge2VsZW1lbnQ6IG1hcC5FTEVNRU5UfX0sXG4gICAgICAgICB7YWN0aW9uOiAnbW92ZVRvJywgb3B0aW9uczoge2VsZW1lbnQ6IG1hcC5FTEVNRU5ULCB4OiAxMDAsIHk6IDB9fSxcbiAgICAgICAgIHthY3Rpb246ICd3YWl0Jywgb3B0aW9uczoge21zOiAzMDAwfX0sXG4gICAgICAgICB7YWN0aW9uOiAnbW92ZVRvJywgb3B0aW9uczoge2VsZW1lbnQ6IG1hcC5FTEVNRU5ULCB4OiAwLCB5OiAwfX0sXG4gICAgICAgICB7YWN0aW9uOiAncmVsZWFzZSd9XSxcbiAgICAgIF07XG4gICAgICBhd2FpdCBkcml2ZXIucGVyZm9ybU11bHRpQWN0aW9uKGFjdGlvbnMpO1xuICAgICAgYXdhaXQgQi5kZWxheSgxMDAwKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ3Rlc3RhcHAgLSBzd2lwZSBhY3Rpb25zJywgZnVuY3Rpb24gKCkge1xuICBsZXQgc2Vzc2lvbiA9IHNldHVwKHRoaXMsIGRlc2lyZWQpO1xuICBsZXQgZHJpdmVyID0gc2Vzc2lvbi5kcml2ZXI7XG5cbiAgZGVzY3JpYmUoJ3N3aXBlJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBzbGlkZXIsIHRhcmdldCwgbG9jO1xuICAgIGxldCBsZWZ0UG9zID0geyB4OiAwLCB5OiAwIH0sXG4gICAgICAgIHJpZ2h0UG9zID0geyB4OiAwLCB5OiAwIH0sXG4gICAgICAgIGNlbnRlclBvcyA9IHsgeDogMCwgeTogMCB9O1xuXG4gICAgbGV0IGdldE51bWVyaWNWYWx1ZSA9IGZ1bmN0aW9uIChwY3RWYWwpIHtcbiAgICAgIHBjdFZhbCA9IHBjdFZhbC5yZXBsYWNlKFwiJVwiLCBcIlwiKTtcbiAgICAgIHBjdFZhbCA9IHBhcnNlSW50KHBjdFZhbCwgMTApO1xuICAgICAgcmV0dXJuIHBjdFZhbDtcbiAgICB9O1xuXG4gICAgbGV0IHRlc3RTbGlkZXJWYWx1ZU5vdDBvcjEwMCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdmFsdWUgPSBnZXROdW1lcmljVmFsdWUodmFsdWUpO1xuICAgICAgLy8gc2hvdWxkIGJlIH41MFxuICAgICAgdmFsdWUuc2hvdWxkLmJlLmFib3ZlKDE1KTtcbiAgICAgIHZhbHVlLnNob3VsZC5iZS5iZWxvdyg4NSk7XG4gICAgfTtcblxuICAgIGxldCBnZXRTbGlkZXJWYWx1ZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhd2FpdCBkcml2ZXIuZ2V0QXR0cmlidXRlKCd2YWx1ZScsIHNsaWRlcik7XG4gICAgfTtcblxuICAgIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgICBzbGlkZXIgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ2NsYXNzIG5hbWUnLCBcIlVJQVNsaWRlclwiKTtcbiAgICAgIGxvYyA9IGF3YWl0IGRyaXZlci5nZXRMb2NhdGlvbihzbGlkZXIpO1xuICAgICAgbGV0IHNpemUgPSBhd2FpdCBkcml2ZXIuZ2V0U2l6ZShzbGlkZXIpO1xuICAgICAgbGVmdFBvcy54ID0gbG9jLnggLSA1O1xuICAgICAgY2VudGVyUG9zLnggPSBsb2MueCArIChzaXplLndpZHRoICogMC41KTtcbiAgICAgIHJpZ2h0UG9zLnggPSBsb2MueCArIHNpemUud2lkdGggKyA1O1xuICAgICAgbGVmdFBvcy55ID0gcmlnaHRQb3MueSA9IGNlbnRlclBvcy55ID0gbG9jLnkgKyAoc2l6ZS5oZWlnaHQgKiAwLjUpO1xuICAgICAgdGFyZ2V0ID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCdhY2Nlc3NpYmlsaXR5IGlkJywgXCJBY2Nlc3MnaWJpbGl0eVwiKTtcbiAgICAgIHRlc3RTbGlkZXJWYWx1ZU5vdDBvcjEwMChhd2FpdCBnZXRTbGlkZXJWYWx1ZSgpKTtcbiAgICB9KTtcblxuICAgIC8vIFRPRE86IEZvciBzb21lIHJlYXNvbiBpdCBkb2VzIG5vdCBzd2lwZSB0byAxMDAlIGluIGNpIGVudiwgaW52ZXN0aWdhdGVcbiAgICBpdCgnc2hvdWxkIHdvcmsgd2l0aDogcHJlc3Mge2VsZW1lbnR9LCBtb3ZlVG8ge2Rlc3RFbH0gQHNraXAtY2knLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgb3JpZ1ZhbHVlID0gYXdhaXQgZ2V0U2xpZGVyVmFsdWUoKTtcbiAgICAgIGxldCBnZXN0dXJlcyA9IFtcbiAgICAgICAge2FjdGlvbjogJ3ByZXNzJywgb3B0aW9uczoge2VsZW1lbnQ6IHNsaWRlci5FTEVNRU5UfX0sXG4gICAgICAgIHthY3Rpb246ICd3YWl0Jywgb3B0aW9uczoge21zOiA1MDB9fSxcbiAgICAgICAge2FjdGlvbjogJ21vdmVUbycsIG9wdGlvbnM6IHtlbGVtZW50OiB0YXJnZXQuRUxFTUVOVH19LFxuICAgICAgICB7YWN0aW9uOiAncmVsZWFzZSd9XG4gICAgICBdO1xuICAgICAgYXdhaXQgZHJpdmVyLnBlcmZvcm1Ub3VjaChnZXN0dXJlcyk7XG4gICAgICAoYXdhaXQgZ2V0U2xpZGVyVmFsdWUoKSkuc2hvdWxkLm5vdC5lcXVhbChvcmlnVmFsdWUpO1xuICAgICAgYXdhaXQgQi5kZWxheSgxMDAwKTtcbiAgICAgIC8vIFRPRE86IGluIGlvczg0IHRoZSBkZXN0RWwgaXMgaW4gYSB3ZWlyZCBwbGFjZSwgc28gd2UgZG9uJ3QgdGVzdCB2YWx1ZVxuICAgICAgLy8oYXdhaXQgZ2V0U2xpZGVyVmFsdWUoKSkuc2hvdWxkLmVxdWFsKFwiMTAwJVwiKVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB3b3JrIHdpdGg6IHByZXNzIHtlbGVtZW50LCB4LCB5fSwgbW92ZVRvIHtlbGVtZW50LCB4LCB5fScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBnZXN0dXJlcyA9IFtcbiAgICAgICAge2FjdGlvbjogJ3ByZXNzJywgb3B0aW9uczoge2VsZW1lbnQ6IHNsaWRlci5FTEVNRU5ULCB4OiAwLjg2NjUsIHk6IDAuNX19LFxuICAgICAgICB7YWN0aW9uOiAnd2FpdCcsIG9wdGlvbnM6IHttczogNTAwfX0sXG4gICAgICAgIHthY3Rpb246ICdtb3ZlVG8nLCBvcHRpb25zOiB7ZWxlbWVudDogc2xpZGVyLkVMRU1FTlQsIHg6IDAuNSwgeTogMC41fX0sXG4gICAgICAgIHthY3Rpb246ICdyZWxlYXNlJ31cbiAgICAgIF07XG4gICAgICBhd2FpdCBkcml2ZXIucGVyZm9ybVRvdWNoKGdlc3R1cmVzKTtcbiAgICAgIHRlc3RTbGlkZXJWYWx1ZU5vdDBvcjEwMChhd2FpdCBnZXRTbGlkZXJWYWx1ZSgpKTtcbiAgICAgIGF3YWl0IEIuZGVsYXkoMTAwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdvcmsgd2l0aDogcHJlc3Mge3gsIHl9LCBtb3ZlVG8ge3gsIHl9JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IGdlc3R1cmVzID0gW1xuICAgICAgICB7YWN0aW9uOiAncHJlc3MnLCBvcHRpb25zOiB7eDogY2VudGVyUG9zLngsIHk6IGNlbnRlclBvcy55fX0sXG4gICAgICAgIHthY3Rpb246ICd3YWl0Jywgb3B0aW9uczoge21zOiA1MDB9fSxcbiAgICAgICAge2FjdGlvbjogJ21vdmVUbycsIG9wdGlvbnM6IHt4OiBsZWZ0UG9zLnggLSBjZW50ZXJQb3MueCwgeTogbGVmdFBvcy55IC0gY2VudGVyUG9zLnl9fSxcbiAgICAgICAge2FjdGlvbjogJ3JlbGVhc2UnfVxuICAgICAgXTtcbiAgICAgIGF3YWl0IGRyaXZlci5wZXJmb3JtVG91Y2goZ2VzdHVyZXMpO1xuICAgICAgKGF3YWl0IGdldFNsaWRlclZhbHVlKCkpLnNob3VsZC5lcXVhbChcIjAlXCIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB3b3JrIHdpdGg6IHtlbGVtZW50LCB4LCB5fSwgbW92ZVRvIHtkZXN0RWwsIHgsIHl9IEBza2lwLWNpJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IGdlc3R1cmVzID0gW1xuICAgICAgICB7YWN0aW9uOiAncHJlc3MnLCBvcHRpb25zOiB7ZWxlbWVudDogc2xpZGVyLkVMRU1FTlQsIHg6IDAsIHk6IDAuNX19LFxuICAgICAgICB7YWN0aW9uOiAnd2FpdCcsIG9wdGlvbnM6IHttczogNTAwfX0sXG4gICAgICAgIHthY3Rpb246ICdtb3ZlVG8nLCBvcHRpb25zOiB7ZWxlbWVudDogdGFyZ2V0LkVMRU1FTlQsIHg6IDUwLCB5OiAwLjV9fSxcbiAgICAgICAge2FjdGlvbjogJ3JlbGVhc2UnfVxuICAgICAgXTtcbiAgICAgIGF3YWl0IGRyaXZlci5wZXJmb3JtVG91Y2goZ2VzdHVyZXMpO1xuICAgICAgdGVzdFNsaWRlclZhbHVlTm90MG9yMTAwKGF3YWl0IGdldFNsaWRlclZhbHVlKCkpO1xuICAgIH0pO1xuXG4gICAgLy8gVE9ETzogQ3Jhc2hlcyBpbiBjaSBlbnYsIGludmVzdGlnYXRlXG4gICAgLy8gVE9ETzogRm9yIHNvbWUgcmVhc29uIGl0IGRvZXMgbm90IHN3aXBlIHRvIDEwMCUgaW4gY2kgZW52LCBpbnZlc3RpZ2F0ZVxuICAgIGl0KFwic2hvdWxkIHdvcmsgd2l0aCBwcmVzcyB7eCwgeX0sIG1vdmVUbyB7ZGVzdEVsfSBAc2tpcC1jaVwiLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgb3JpZ1ZhbHVlID0gYXdhaXQgZ2V0U2xpZGVyVmFsdWUoKTtcbiAgICAgIGxldCBnZXN0dXJlcyA9IFtcbiAgICAgICAge2FjdGlvbjogJ3ByZXNzJywgb3B0aW9uczoge3g6IGNlbnRlclBvcy54LCB5OiBjZW50ZXJQb3MueX19LFxuICAgICAgICB7YWN0aW9uOiAnd2FpdCcsIG9wdGlvbnM6IHttczogNTAwfX0sXG4gICAgICAgIHthY3Rpb246ICdtb3ZlVG8nLCBvcHRpb25zOiB7ZWxlbWVudDogdGFyZ2V0LkVMRU1FTlR9fSxcbiAgICAgICAge2FjdGlvbjogJ3JlbGVhc2UnfVxuICAgICAgXTtcbiAgICAgIGF3YWl0IGRyaXZlci5wZXJmb3JtVG91Y2goZ2VzdHVyZXMpO1xuICAgICAgKGF3YWl0IGdldFNsaWRlclZhbHVlKCkpLnNob3VsZC5ub3QuZXF1YWwob3JpZ1ZhbHVlKTtcbiAgICAgIC8vIFRPRE86IHdlaXJkIGVsZW1lbnQgcG9zaXRpb24gaW4gaU9TIDguNCBzbyBub3QgY2hlY2tpbmcgZXhhY3QgdmFsdWUuXG4gICAgICAvLy50aGVuKGdldFNsaWRlclZhbHVlKS5zaG91bGQuYmVjb21lKFwiMTAwJVwiKVxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
