'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _setupBase = require("../setup-base");

var _setupBase2 = _interopRequireDefault(_setupBase);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

describe('testapp - screenshots', function () {
  describe('default', function () {
    var _this = this;

    var driver = (0, _setupBase2['default'])(this, _desired2['default']).driver;

    it('should get an app screenshot', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getScreenshot());

          case 2:
            context$3$0.sent.should.exist;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    // TODO: fails in ci env, investigate
    it('should get an app screenshot in landscape mode @skip-ci', function callee$2$0() {
      var screenshot1, screenshot2;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getScreenshot());

          case 2:
            screenshot1 = context$3$0.sent;

            screenshot1.should.exist;

            context$3$0.prev = 4;
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(driver.setOrientation("LANDSCAPE"));

          case 7:
            context$3$0.next = 11;
            break;

          case 9:
            context$3$0.prev = 9;
            context$3$0.t0 = context$3$0['catch'](4);

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(driver.getScreenshot());

          case 13:
            screenshot2 = context$3$0.sent;

            screenshot2.should.exist;
            screenshot2.should.not.eql(screenshot1);

            // cooldown
            context$3$0.next = 18;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(3000));

          case 18:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[4, 9]]);
    });
  });

  describe('setting screenshotWaitTimeout', function () {
    var _this2 = this;

    var driver = (0, _setupBase2['default'])(this, _desired2['default']).driver;

    it('should get an app screenshot', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getScreenshot());

          case 2:
            context$3$0.sent.should.exist;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  });
});

// A useless error does often exist here, let's ignore it
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3Rlc3RhcHAvc2NyZWVuc2hvdC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7eUJBQWtCLGVBQWU7Ozs7d0JBQ25CLFVBQVU7Ozs7dUJBQ0osV0FBVzs7OztBQUcvQixRQUFRLENBQUMsdUJBQXVCLEVBQUUsWUFBWTtBQUM1QyxVQUFRLENBQUMsU0FBUyxFQUFFLFlBQVk7OztBQUM5QixRQUFNLE1BQU0sR0FBRyw0QkFBTSxJQUFJLHVCQUFVLENBQUMsTUFBTSxDQUFDOztBQUUzQyxNQUFFLENBQUMsOEJBQThCLEVBQUU7Ozs7OzZDQUMxQixNQUFNLENBQUMsYUFBYSxFQUFFOzs7NkJBQUUsTUFBTSxDQUFDLEtBQUs7Ozs7Ozs7S0FDNUMsQ0FBQyxDQUFDOzs7QUFHSCxNQUFFLENBQUMseURBQXlELEVBQUU7VUFDeEQsV0FBVyxFQVNYLFdBQVc7Ozs7OzZDQVRVLE1BQU0sQ0FBQyxhQUFhLEVBQUU7OztBQUEzQyx1QkFBVzs7QUFDZix1QkFBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7Ozs7NkNBR2pCLE1BQU0sQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7NkNBS2xCLE1BQU0sQ0FBQyxhQUFhLEVBQUU7OztBQUExQyx1QkFBVzs7QUFDZix1QkFBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDekIsdUJBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQzs7Ozs2Q0FHbEMsc0JBQUUsS0FBSyxDQUFDLElBQUksQ0FBQzs7Ozs7OztLQUNwQixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLCtCQUErQixFQUFFLFlBQVk7OztBQUNwRCxRQUFNLE1BQU0sR0FBRyw0QkFBTSxJQUFJLHVCQUFVLENBQUMsTUFBTSxDQUFDOztBQUUzQyxNQUFFLENBQUMsOEJBQThCLEVBQUU7Ozs7OzZDQUMxQixNQUFNLENBQUMsYUFBYSxFQUFFOzs7NkJBQUUsTUFBTSxDQUFDLEtBQUs7Ozs7Ozs7S0FDNUMsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBRUosQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZTJlL3Rlc3RhcHAvc2NyZWVuc2hvdC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXR1cCBmcm9tIFwiLi4vc2V0dXAtYmFzZVwiO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IGRlc2lyZWQgZnJvbSAnLi9kZXNpcmVkJztcblxuXG5kZXNjcmliZSgndGVzdGFwcCAtIHNjcmVlbnNob3RzJywgZnVuY3Rpb24gKCkge1xuICBkZXNjcmliZSgnZGVmYXVsdCcsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBkcml2ZXIgPSBzZXR1cCh0aGlzLCBkZXNpcmVkKS5kcml2ZXI7XG5cbiAgICBpdCgnc2hvdWxkIGdldCBhbiBhcHAgc2NyZWVuc2hvdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIChhd2FpdCBkcml2ZXIuZ2V0U2NyZWVuc2hvdCgpKS5zaG91bGQuZXhpc3Q7XG4gICAgfSk7XG5cbiAgICAvLyBUT0RPOiBmYWlscyBpbiBjaSBlbnYsIGludmVzdGlnYXRlXG4gICAgaXQoJ3Nob3VsZCBnZXQgYW4gYXBwIHNjcmVlbnNob3QgaW4gbGFuZHNjYXBlIG1vZGUgQHNraXAtY2knLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgc2NyZWVuc2hvdDEgPSAoYXdhaXQgZHJpdmVyLmdldFNjcmVlbnNob3QoKSk7XG4gICAgICBzY3JlZW5zaG90MS5zaG91bGQuZXhpc3Q7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGRyaXZlci5zZXRPcmllbnRhdGlvbihcIkxBTkRTQ0FQRVwiKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gQSB1c2VsZXNzIGVycm9yIGRvZXMgb2Z0ZW4gZXhpc3QgaGVyZSwgbGV0J3MgaWdub3JlIGl0XG4gICAgICB9XG5cbiAgICAgIGxldCBzY3JlZW5zaG90MiA9IGF3YWl0IGRyaXZlci5nZXRTY3JlZW5zaG90KCk7XG4gICAgICBzY3JlZW5zaG90Mi5zaG91bGQuZXhpc3Q7XG4gICAgICBzY3JlZW5zaG90Mi5zaG91bGQubm90LmVxbChzY3JlZW5zaG90MSk7XG5cbiAgICAgIC8vIGNvb2xkb3duXG4gICAgICBhd2FpdCBCLmRlbGF5KDMwMDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc2V0dGluZyBzY3JlZW5zaG90V2FpdFRpbWVvdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZHJpdmVyID0gc2V0dXAodGhpcywgZGVzaXJlZCkuZHJpdmVyO1xuXG4gICAgaXQoJ3Nob3VsZCBnZXQgYW4gYXBwIHNjcmVlbnNob3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICAoYXdhaXQgZHJpdmVyLmdldFNjcmVlbnNob3QoKSkuc2hvdWxkLmV4aXN0O1xuICAgIH0pO1xuICB9KTtcblxufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
