'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.hasContent = hasContent;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function hasContent(val) {
  return _lodash2['default'].isString(val) && val !== "";
}

// return true if the the value is not undefined, null, or NaN.
function hasValue(val) {
  var hasVal = false;
  // avoid incorrectly evaluating `0` as false
  if (_lodash2['default'].isNumber(val)) {
    hasVal = !_lodash2['default'].isNaN(val);
  } else {
    hasVal = !_lodash2['default'].isUndefined(val) && !_lodash2['default'].isNull(val);
  }

  return hasVal;
}

// escape spaces in string, for commandline calls
function escapeSpace(str) {
  return str.split(/ /).join('\\ ');
}

function escapeSpecialChars(str, quoteEscape) {
  if (typeof str !== "string") {
    return str;
  }
  if (typeof quoteEscape === "undefined") {
    quoteEscape = false;
  }
  str = str.replace(/[\\]/g, '\\\\').replace(/[\/]/g, '\\/').replace(/[\b]/g, '\\b').replace(/[\f]/g, '\\f').replace(/[\n]/g, '\\n').replace(/[\r]/g, '\\r').replace(/[\t]/g, '\\t').replace(/[\"]/g, '\\"').replace(/\\'/g, "\\'");
  if (quoteEscape) {
    var re = new RegExp(quoteEscape, "g");
    str = str.replace(re, "\\" + quoteEscape);
  }
  return str;
}

function localIp() {
  var ip = _lodash2['default'].chain(_os2['default'].networkInterfaces()).values().flatten().filter(function (val) {
    return val.family === 'IPv4' && val.internal === false;
  }).map('address').first().value();
  return ip;
}

/*
 * Creates a promise that is cancellable, and will timeout
 * after `ms` delay
 */
function cancellableDelay(ms) {
  var timer = undefined;
  return new _bluebird2['default'].Promise(function (resolve) {
    timer = setTimeout(function () {
      resolve();
    }, ms);
  }).cancellable()['catch'](_bluebird2['default'].CancellationError, function (err) {
    // eslint-disable-line promise/prefer-await-to-callbacks
    clearTimeout(timer);
    throw err;
  });
}

function multiResolve(roots) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return roots.map(function (root) {
    return _path2['default'].resolve.apply(_path2['default'], [root].concat(args));
  });
}

/*
 * Parses an object if possible. Otherwise returns the object without parsing.
 */
function safeJsonParse(obj) {
  try {
    obj = JSON.parse(obj);
  } catch (ign) {
    // ignore: this is not json parsable
  }
  return obj;
}

/*
 * Removes the wrapper from element, if it exists.
 *   { ELEMENT: 4 } becomes 4
 */
function unwrapElement(el) {
  if (typeof el === 'object' && el.ELEMENT) {
    return el.ELEMENT;
  }
  return el;
}

exports.hasValue = hasValue;
exports.escapeSpace = escapeSpace;
exports.escapeSpecialChars = escapeSpecialChars;
exports.localIp = localIp;
exports.cancellableDelay = cancellableDelay;
exports.multiResolve = multiResolve;
exports.safeJsonParse = safeJsonParse;
exports.unwrapElement = unwrapElement;
//# sourceMappingURL=data:application/json;charset=utf8;base64,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LEVBQUUsRUFBRSxDQUFDLENBQUM7R0FDUixDQUFDLENBQ0QsV0FBVyxFQUFFLFNBQ1IsQ0FBQyxzQkFBRSxpQkFBaUIsRUFBRSxVQUFDLEdBQUcsRUFBSzs7QUFDbkMsZ0JBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQixVQUFNLEdBQUcsQ0FBQztHQUNYLENBQUMsQ0FBQztDQUNKOztBQUVELFNBQVMsWUFBWSxDQUFFLEtBQUssRUFBVztvQ0FBTixJQUFJO0FBQUosUUFBSTs7O0FBQ25DLFNBQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQUksRUFBSztBQUN6QixXQUFPLGtCQUFLLE9BQU8sTUFBQSxxQkFBQyxJQUFJLFNBQUssSUFBSSxFQUFDLENBQUM7R0FDcEMsQ0FBQyxDQUFDO0NBQ0o7Ozs7O0FBS0QsU0FBUyxhQUFhLENBQUUsR0FBRyxFQUFFO0FBQzNCLE1BQUk7QUFDRixPQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN2QixDQUFDLE9BQU8sR0FBRyxFQUFFOztHQUViO0FBQ0QsU0FBTyxHQUFHLENBQUM7Q0FDWjs7Ozs7O0FBTUQsU0FBUyxhQUFhLENBQUUsRUFBRSxFQUFFO0FBQzFCLE1BQUksT0FBTyxFQUFFLEtBQUssUUFBUSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUU7QUFDeEMsV0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDO0dBQ25CO0FBQ0QsU0FBTyxFQUFFLENBQUM7Q0FDWDs7UUFFUSxRQUFRLEdBQVIsUUFBUTtRQUFFLFdBQVcsR0FBWCxXQUFXO1FBQUUsa0JBQWtCLEdBQWxCLGtCQUFrQjtRQUFFLE9BQU8sR0FBUCxPQUFPO1FBQUUsZ0JBQWdCLEdBQWhCLGdCQUFnQjtRQUNwRSxZQUFZLEdBQVosWUFBWTtRQUFFLGFBQWEsR0FBYixhQUFhO1FBQUUsYUFBYSxHQUFiLGFBQWEiLCJmaWxlIjoibGliL3V0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzQ29udGVudCAodmFsKSB7XG4gIHJldHVybiBfLmlzU3RyaW5nKHZhbCkgJiYgdmFsICE9PSBcIlwiO1xufVxuXG4vLyByZXR1cm4gdHJ1ZSBpZiB0aGUgdGhlIHZhbHVlIGlzIG5vdCB1bmRlZmluZWQsIG51bGwsIG9yIE5hTi5cbmZ1bmN0aW9uIGhhc1ZhbHVlICh2YWwpIHtcbiAgbGV0IGhhc1ZhbCA9IGZhbHNlO1xuICAvLyBhdm9pZCBpbmNvcnJlY3RseSBldmFsdWF0aW5nIGAwYCBhcyBmYWxzZVxuICBpZiAoXy5pc051bWJlcih2YWwpKSB7XG4gICAgaGFzVmFsID0gIV8uaXNOYU4odmFsKTtcbiAgfSBlbHNlIHtcbiAgICBoYXNWYWwgPSAhXy5pc1VuZGVmaW5lZCh2YWwpICYmICFfLmlzTnVsbCh2YWwpO1xuICB9XG5cbiAgcmV0dXJuIGhhc1ZhbDtcbn1cblxuLy8gZXNjYXBlIHNwYWNlcyBpbiBzdHJpbmcsIGZvciBjb21tYW5kbGluZSBjYWxsc1xuZnVuY3Rpb24gZXNjYXBlU3BhY2UgKHN0cikge1xuICByZXR1cm4gc3RyLnNwbGl0KC8gLykuam9pbignXFxcXCAnKTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlU3BlY2lhbENoYXJzIChzdHIsIHF1b3RlRXNjYXBlKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICBpZiAodHlwZW9mIHF1b3RlRXNjYXBlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcXVvdGVFc2NhcGUgPSBmYWxzZTtcbiAgfVxuICBzdHIgPSBzdHJcbiAgICAgICAgLnJlcGxhY2UoL1tcXFxcXS9nLCAnXFxcXFxcXFwnKVxuICAgICAgICAucmVwbGFjZSgvW1xcL10vZywgJ1xcXFwvJylcbiAgICAgICAgLnJlcGxhY2UoL1tcXGJdL2csICdcXFxcYicpXG4gICAgICAgIC5yZXBsYWNlKC9bXFxmXS9nLCAnXFxcXGYnKVxuICAgICAgICAucmVwbGFjZSgvW1xcbl0vZywgJ1xcXFxuJylcbiAgICAgICAgLnJlcGxhY2UoL1tcXHJdL2csICdcXFxccicpXG4gICAgICAgIC5yZXBsYWNlKC9bXFx0XS9nLCAnXFxcXHQnKVxuICAgICAgICAucmVwbGFjZSgvW1xcXCJdL2csICdcXFxcXCInKVxuICAgICAgICAucmVwbGFjZSgvXFxcXCcvZywgXCJcXFxcJ1wiKTtcbiAgaWYgKHF1b3RlRXNjYXBlKSB7XG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cChxdW90ZUVzY2FwZSwgXCJnXCIpO1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKHJlLCBcIlxcXFxcIiArIHF1b3RlRXNjYXBlKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuXG5mdW5jdGlvbiBsb2NhbElwICgpIHtcbiAgbGV0IGlwID0gXy5jaGFpbihvcy5uZXR3b3JrSW50ZXJmYWNlcygpKVxuICAgIC52YWx1ZXMoKVxuICAgIC5mbGF0dGVuKClcbiAgICAuZmlsdGVyKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiAodmFsLmZhbWlseSA9PT0gJ0lQdjQnICYmIHZhbC5pbnRlcm5hbCA9PT0gZmFsc2UpO1xuICAgIH0pXG4gICAgLm1hcCgnYWRkcmVzcycpXG4gICAgLmZpcnN0KClcbiAgICAudmFsdWUoKTtcbiAgcmV0dXJuIGlwO1xufVxuXG4vKlxuICogQ3JlYXRlcyBhIHByb21pc2UgdGhhdCBpcyBjYW5jZWxsYWJsZSwgYW5kIHdpbGwgdGltZW91dFxuICogYWZ0ZXIgYG1zYCBkZWxheVxuICovXG5mdW5jdGlvbiBjYW5jZWxsYWJsZURlbGF5IChtcykge1xuICBsZXQgdGltZXI7XG4gIHJldHVybiBuZXcgQi5Qcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9LCBtcyk7XG4gIH0pXG4gIC5jYW5jZWxsYWJsZSgpXG4gIC5jYXRjaChCLkNhbmNlbGxhdGlvbkVycm9yLCAoZXJyKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB0aHJvdyBlcnI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtdWx0aVJlc29sdmUgKHJvb3RzLCAuLi5hcmdzKSB7XG4gIHJldHVybiByb290cy5tYXAoKHJvb3QpID0+IHtcbiAgICByZXR1cm4gcGF0aC5yZXNvbHZlKHJvb3QsIC4uLmFyZ3MpO1xuICB9KTtcbn1cblxuLypcbiAqIFBhcnNlcyBhbiBvYmplY3QgaWYgcG9zc2libGUuIE90aGVyd2lzZSByZXR1cm5zIHRoZSBvYmplY3Qgd2l0aG91dCBwYXJzaW5nLlxuICovXG5mdW5jdGlvbiBzYWZlSnNvblBhcnNlIChvYmopIHtcbiAgdHJ5IHtcbiAgICBvYmogPSBKU09OLnBhcnNlKG9iaik7XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIC8vIGlnbm9yZTogdGhpcyBpcyBub3QganNvbiBwYXJzYWJsZVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qXG4gKiBSZW1vdmVzIHRoZSB3cmFwcGVyIGZyb20gZWxlbWVudCwgaWYgaXQgZXhpc3RzLlxuICogICB7IEVMRU1FTlQ6IDQgfSBiZWNvbWVzIDRcbiAqL1xuZnVuY3Rpb24gdW53cmFwRWxlbWVudCAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ29iamVjdCcgJiYgZWwuRUxFTUVOVCkge1xuICAgIHJldHVybiBlbC5FTEVNRU5UO1xuICB9XG4gIHJldHVybiBlbDtcbn1cblxuZXhwb3J0IHsgaGFzVmFsdWUsIGVzY2FwZVNwYWNlLCBlc2NhcGVTcGVjaWFsQ2hhcnMsIGxvY2FsSXAsIGNhbmNlbGxhYmxlRGVsYXksXG4gICAgICAgICBtdWx0aVJlc29sdmUsIHNhZmVKc29uUGFyc2UsIHVud3JhcEVsZW1lbnQgfTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
