'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _asyncbox = require('asyncbox');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var PIN_UNLOCK = "pin";
var PASSWORD_UNLOCK = "password";
var PATTERN_UNLOCK = "pattern";
var FINGERPRINT_UNLOCK = "fingerprint";
var UNLOCK_TYPES = [PIN_UNLOCK, PASSWORD_UNLOCK, PATTERN_UNLOCK, FINGERPRINT_UNLOCK];
var KEYCODE_NUMPAD_ENTER = "66";
var UNLOCK_WAIT_TIME = 100;
var HIDE_KEYBOARD_WAIT_TIME = 100;
var INPUT_KEYS_WAIT_TIME = 100;

var helpers = {};
helpers.isValidUnlockType = function (type) {
  return UNLOCK_TYPES.indexOf(type) !== -1;
};

helpers.isValidKey = function (type, key) {
  if (_lodash2['default'].isUndefined(key)) {
    return false;
  }
  if (type === PIN_UNLOCK || type === FINGERPRINT_UNLOCK) {
    return (/^[0-9]+$/.test(key.trim())
    );
  }
  if (type === PATTERN_UNLOCK) {
    if (!/^[1-9]{2,9}$/.test(key.trim())) {
      return false;
    }
    return !/([1-9]).*?\1/.test(key.trim());
  }
  // Dont trim password key, you can use blank spaces in your android password
  // ¯\_(ツ)_/¯
  if (type === PASSWORD_UNLOCK) {
    return (/.{4,}/g.test(key)
    );
  }
  throw new Error('Invalid unlock type ' + type);
};

helpers.dismissKeyguard = function callee$0$0(driver, adb) {
  var isKeyboardShown;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(driver.isKeyboardShown());

      case 2:
        isKeyboardShown = context$1$0.sent;

        if (!isKeyboardShown) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(driver.hideKeyboard());

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(HIDE_KEYBOARD_WAIT_TIME));

      case 8:
        // dismiss notifications
        _logger2['default'].info("Dismiss notifications from unlock view");
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.shell(["service", "call", "notification", "1"]));

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(adb.back());

      case 13:
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(adb.getApiLevel());

      case 15:
        context$1$0.t0 = context$1$0.sent;

        if (!(context$1$0.t0 > 21)) {
          context$1$0.next = 21;
          break;
        }

        _logger2['default'].info("Trying to dismiss keyguard");
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(adb.shell(["wm", "dismiss-keyguard"]));

      case 20:
        return context$1$0.abrupt('return');

      case 21:
        _logger2['default'].info("Swiping up to dismiss keyguard");
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(helpers.swipeUp(driver));

      case 24:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.swipeUp = function callee$0$0(driver) {
  var windowSize, x0, y0, yP, actions;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(driver.getWindowSize());

      case 2:
        windowSize = context$1$0.sent;
        x0 = parseInt(windowSize.x / 2, 10);
        y0 = windowSize.y - 10;
        yP = 100;
        actions = [{ action: 'press', options: { element: null, x: x0, y: y0 } }, { action: 'moveTo', options: { element: null, x: x0, y: yP } }, { action: 'release' }];
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(driver.performTouch(actions));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.encodePassword = function (key) {
  return key.replace(/\s/ig, "%s");
};

helpers.stringKeyToArr = function (key) {
  return key.trim().replace(/\s+/g, '').split(/\s*/);
};

helpers.fingerprintUnlock = function callee$0$0(adb, driver, capabilities) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(adb.getApiLevel());

      case 2:
        context$1$0.t0 = context$1$0.sent;

        if (!(context$1$0.t0 < 23)) {
          context$1$0.next = 5;
          break;
        }

        throw new Error("Fingerprint unlock only works for Android 6+ emulators");

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(adb.fingerprint(capabilities.unlockKey));

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(UNLOCK_WAIT_TIME));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.pinUnlock = function callee$0$0(adb, driver, capabilities) {
  var keys, els, pins, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, e, text, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, pin, _el, el, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _el2;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info('Trying to unlock device using pin ' + capabilities.unlockKey);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(helpers.dismissKeyguard(driver, adb));

      case 3:
        keys = helpers.stringKeyToArr(capabilities.unlockKey);
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(adb.getApiLevel());

      case 6:
        context$1$0.t0 = context$1$0.sent;

        if (!(context$1$0.t0 >= 21)) {
          context$1$0.next = 76;
          break;
        }

        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(driver.findElOrEls("id", "com.android.systemui:id/digit_text", true));

      case 10:
        els = context$1$0.sent;

        if (!_lodash2['default'].isEmpty(els)) {
          context$1$0.next = 13;
          break;
        }

        throw new Error("Error finding unlock pin buttons!");

      case 13:
        pins = {};
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 17;
        _iterator = _getIterator(els);

      case 19:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 28;
          break;
        }

        e = _step.value;
        context$1$0.next = 23;
        return _regeneratorRuntime.awrap(driver.getAttribute("text", e.ELEMENT));

      case 23:
        text = context$1$0.sent;

        pins[text] = e;

      case 25:
        _iteratorNormalCompletion = true;
        context$1$0.next = 19;
        break;

      case 28:
        context$1$0.next = 34;
        break;

      case 30:
        context$1$0.prev = 30;
        context$1$0.t1 = context$1$0['catch'](17);
        _didIteratorError = true;
        _iteratorError = context$1$0.t1;

      case 34:
        context$1$0.prev = 34;
        context$1$0.prev = 35;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 37:
        context$1$0.prev = 37;

        if (!_didIteratorError) {
          context$1$0.next = 40;
          break;
        }

        throw _iteratorError;

      case 40:
        return context$1$0.finish(37);

      case 41:
        return context$1$0.finish(34);

      case 42:
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 45;
        _iterator2 = _getIterator(keys);

      case 47:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 55;
          break;
        }

        pin = _step2.value;
        _el = pins[pin];
        context$1$0.next = 52;
        return _regeneratorRuntime.awrap(driver.click(_el.ELEMENT));

      case 52:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 47;
        break;

      case 55:
        context$1$0.next = 61;
        break;

      case 57:
        context$1$0.prev = 57;
        context$1$0.t2 = context$1$0['catch'](45);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t2;

      case 61:
        context$1$0.prev = 61;
        context$1$0.prev = 62;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 64:
        context$1$0.prev = 64;

        if (!_didIteratorError2) {
          context$1$0.next = 67;
          break;
        }

        throw _iteratorError2;

      case 67:
        return context$1$0.finish(64);

      case 68:
        return context$1$0.finish(61);

      case 69:
        context$1$0.next = 71;
        return _regeneratorRuntime.awrap(driver.findElOrEls("id", "com.android.systemui:id/key_enter", false));

      case 71:
        el = context$1$0.sent;
        context$1$0.next = 74;
        return _regeneratorRuntime.awrap(driver.click(el.ELEMENT));

      case 74:
        context$1$0.next = 112;
        break;

      case 76:
        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 79;
        _iterator3 = _getIterator(keys);

      case 81:
        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
          context$1$0.next = 93;
          break;
        }

        pin = _step3.value;
        context$1$0.next = 85;
        return _regeneratorRuntime.awrap(driver.findElOrEls("id", 'com.android.keyguard:id/key' + pin, false));

      case 85:
        _el2 = context$1$0.sent;

        if (!(_el2 === null)) {
          context$1$0.next = 88;
          break;
        }

        throw new Error('Error finding unlock pin \'' + pin + '\' button!');

      case 88:
        context$1$0.next = 90;
        return _regeneratorRuntime.awrap(driver.click(_el2.ELEMENT));

      case 90:
        _iteratorNormalCompletion3 = true;
        context$1$0.next = 81;
        break;

      case 93:
        context$1$0.next = 99;
        break;

      case 95:
        context$1$0.prev = 95;
        context$1$0.t3 = context$1$0['catch'](79);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t3;

      case 99:
        context$1$0.prev = 99;
        context$1$0.prev = 100;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 102:
        context$1$0.prev = 102;

        if (!_didIteratorError3) {
          context$1$0.next = 105;
          break;
        }

        throw _iteratorError3;

      case 105:
        return context$1$0.finish(102);

      case 106:
        return context$1$0.finish(99);

      case 107:
        context$1$0.next = 109;
        return _regeneratorRuntime.awrap(driver.findElOrEls("id", "com.android.keyguard:id/key_enter", false));

      case 109:
        el = context$1$0.sent;
        context$1$0.next = 112;
        return _regeneratorRuntime.awrap(driver.click(el.ELEMENT));

      case 112:
        context$1$0.next = 114;
        return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(UNLOCK_WAIT_TIME));

      case 114:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[17, 30, 34, 42], [35,, 37, 41], [45, 57, 61, 69], [62,, 64, 68], [79, 95, 99, 107], [100,, 102, 106]]);
};

helpers.passwordUnlock = function callee$0$0(adb, driver, capabilities) {
  var key;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info('Trying to unlock device using password ' + capabilities.unlockKey);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(helpers.dismissKeyguard(driver, adb));

      case 3:
        key = capabilities.unlockKey;

        // Replace blank spaces with %s
        key = helpers.encodePassword(key);
        // Why adb ? It was less flaky
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(adb.shell(["input", "text", key]));

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(INPUT_KEYS_WAIT_TIME));

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(adb.shell(["input", "keyevent", KEYCODE_NUMPAD_ENTER]));

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(UNLOCK_WAIT_TIME));

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getPatternKeyPosition = function (key, initPos, piece) {
  /*
  How the math works:
  We have 9 buttons divided in 3 columns and 3 rows inside the lockPatternView,
  every button has a position on the screen corresponding to the lockPatternView since
  it is the parent view right at the middle of each column or row.
  */
  var cols = 3;
  var pins = 9;
  var xPos = function xPos(key, x, piece) {
    return Math.round(x + (key % cols || cols) * piece - piece / 2);
  };
  var yPos = function yPos(key, y, piece) {
    return Math.round(y + (Math.ceil((key % pins || pins) / cols) * piece - piece / 2));
  };
  return { x: xPos(key, initPos.x, piece), y: yPos(key, initPos.y, piece) };
};

helpers.getPatternActions = function (keys, initPos, piece) {
  var actions = [];
  var lastPos = undefined;
  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = _getIterator(keys), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var key = _step4.value;

      var keyPos = helpers.getPatternKeyPosition(key, initPos, piece);
      if (key === keys[0]) {
        actions.push({ action: 'press', options: { element: null, x: keyPos.x, y: keyPos.y } });
        lastPos = keyPos;
        continue;
      }
      var _moveTo = { x: 0, y: 0 };
      var diffX = keyPos.x - lastPos.x;
      if (diffX > 0) {
        _moveTo.x = piece;
        if (Math.abs(diffX) > piece) {
          _moveTo.x += piece;
        }
      } else if (diffX < 0) {
        _moveTo.x = -1 * piece;
        if (Math.abs(diffX) > piece) {
          _moveTo.x -= piece;
        }
      }
      var diffY = keyPos.y - lastPos.y;
      if (diffY > 0) {
        _moveTo.y = piece;
        if (Math.abs(diffY) > piece) {
          _moveTo.y += piece;
        }
      } else if (diffY < 0) {
        _moveTo.y = -1 * piece;
        if (Math.abs(diffY) > piece) {
          _moveTo.y -= piece;
        }
      }
      actions.push({ action: 'moveTo', options: { element: null, x: _moveTo.x, y: _moveTo.y } });
      lastPos = keyPos;
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4['return']) {
        _iterator4['return']();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  actions.push({ action: 'release' });
  return actions;
};

helpers.patternUnlock = function callee$0$0(adb, driver, capabilities) {
  var keys, apiLevel, el, initPos, size, actions;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info('Trying to unlock device using pattern ' + capabilities.unlockKey);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(helpers.dismissKeyguard(driver, adb));

      case 3:
        keys = helpers.stringKeyToArr(capabilities.unlockKey);
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(adb.getApiLevel());

      case 6:
        apiLevel = context$1$0.sent;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(driver.findElOrEls("id", 'com.android.' + (apiLevel >= 21 ? 'systemui' : 'keyguard') + ':id/lockPatternView', false));

      case 9:
        el = context$1$0.sent;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(driver.getLocation(el.ELEMENT));

      case 12:
        initPos = context$1$0.sent;
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(driver.getSize(el.ELEMENT));

      case 15:
        size = context$1$0.sent;
        actions = helpers.getPatternActions(keys, initPos, size.width / 3);
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(driver.performTouch(actions));

      case 19:
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(UNLOCK_WAIT_TIME));

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.PIN_UNLOCK = PIN_UNLOCK;
helpers.PASSWORD_UNLOCK = PASSWORD_UNLOCK;
helpers.PATTERN_UNLOCK = PATTERN_UNLOCK;
helpers.FINGERPRINT_UNLOCK = FINGERPRINT_UNLOCK;

exports['default'] = helpers;
module.exports = exports['default'];

// Waits a bit for the keyboard to hide

// Waits a bit for the device to be unlocked

// Why sleeps ? Avoid some flakyness waiting for the input to receive the keys

// Waits a bit for the device to be unlocked

/* We set the device pattern buttons as number of a regular phone
 *  | • • • |     | 1 2 3 |
 *  | • • • | --> | 4 5 6 |
 *  | • • • |     | 7 8 9 |
 The pattern view buttons are not seeing by the uiautomator since they are
included inside a FrameLayout, so we are going to try clicking on the buttons
using the parent view bounds and math.
*/

// Get actions to perform

// Perform gesture

// Waits a bit for the device to be unlocked
//# sourceMappingURL=data:application/json;charset=utf8;base64,
