'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _2 = require('../..');

var _3 = _interopRequireDefault(_2);

var _helpers = require('./helpers');

var _desired = require('./desired');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var avd = process.env.ANDROID_25_AVD || 'Nexus_5_API_25';
var capabilities = _lodash2['default'].defaults({
  avd: avd,
  platformVersion: "7.1",
  chromeOptions: {
    args: ["--no-first-run"]
  }
}, _desired.CHROME_CAPS);

describe('createSession', function () {
  var _this = this;

  var driver = undefined;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _helpers.ensureAVDExists)(this, capabilities.avd));

        case 2:
          if (context$2$0.sent) {
            context$2$0.next = 4;
            break;
          }

          return context$2$0.abrupt('return');

        case 4:

          driver = new _3['default']();

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.deleteSession());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should start chrome and dismiss the welcome dialog', function callee$1$0() {
    var appActivity;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.createSession(capabilities));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(driver.getCurrentActivity());

        case 4:
          appActivity = context$2$0.sent;

          appActivity.should.not.equal("org.chromium.chrome.browser.firstrun.FirstRunActivity");

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jaHJvbWUtZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztvQkFBaUIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7aUJBQ25CLE9BQU87Ozs7dUJBQ0QsV0FBVzs7dUJBQ2YsV0FBVzs7c0JBQ3pCLFFBQVE7Ozs7QUFHdEIsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxnQkFBZ0IsQ0FBQztBQUMzRCxJQUFNLFlBQVksR0FBRyxvQkFBRSxRQUFRLENBQUM7QUFDOUIsS0FBRyxFQUFILEdBQUc7QUFDSCxpQkFBZSxFQUFFLEtBQUs7QUFDdEIsZUFBYSxFQUFFO0FBQ2IsUUFBSSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7R0FDekI7Q0FDRix1QkFBYyxDQUFDOztBQUVoQixRQUFRLENBQUMsZUFBZSxFQUFFLFlBQVk7OztBQUNwQyxNQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsUUFBTSxDQUFDOzs7OzsyQ0FDTSw4QkFBZ0IsSUFBSSxFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUM7Ozs7Ozs7Ozs7OztBQUlsRCxnQkFBTSxHQUFHLG1CQUFtQixDQUFDOzs7Ozs7O0dBQzlCLENBQUMsQ0FBQztBQUNILFdBQVMsQ0FBQzs7Ozs7MkNBQ0YsTUFBTSxDQUFDLGFBQWEsRUFBRTs7Ozs7OztHQUM3QixDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsb0RBQW9ELEVBQUU7UUFFbkQsV0FBVzs7Ozs7MkNBRFQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7Ozs7MkNBQ2hCLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRTs7O0FBQS9DLHFCQUFXOztBQUNmLHFCQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQzs7Ozs7OztHQUN2RixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsL2Nocm9tZS1lMmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBBbmRyb2lkRHJpdmVyIGZyb20gJy4uLy4uJztcbmltcG9ydCB7IGVuc3VyZUFWREV4aXN0cyB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBDSFJPTUVfQ0FQUyB9IGZyb20gJy4vZGVzaXJlZCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmNvbnN0IGF2ZCA9IHByb2Nlc3MuZW52LkFORFJPSURfMjVfQVZEIHx8ICdOZXh1c181X0FQSV8yNSc7XG5jb25zdCBjYXBhYmlsaXRpZXMgPSBfLmRlZmF1bHRzKHtcbiAgYXZkLFxuICBwbGF0Zm9ybVZlcnNpb246IFwiNy4xXCIsXG4gIGNocm9tZU9wdGlvbnM6IHtcbiAgICBhcmdzOiBbXCItLW5vLWZpcnN0LXJ1blwiXVxuICB9XG59LCBDSFJPTUVfQ0FQUyk7XG5cbmRlc2NyaWJlKCdjcmVhdGVTZXNzaW9uJywgZnVuY3Rpb24gKCkge1xuICBsZXQgZHJpdmVyO1xuICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGlmICghYXdhaXQgZW5zdXJlQVZERXhpc3RzKHRoaXMsIGNhcGFiaWxpdGllcy5hdmQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZHJpdmVyID0gbmV3IEFuZHJvaWREcml2ZXIoKTtcbiAgfSk7XG4gIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZHJpdmVyLmRlbGV0ZVNlc3Npb24oKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgc3RhcnQgY2hyb21lIGFuZCBkaXNtaXNzIHRoZSB3ZWxjb21lIGRpYWxvZycsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBkcml2ZXIuY3JlYXRlU2Vzc2lvbihjYXBhYmlsaXRpZXMpO1xuICAgIGxldCBhcHBBY3Rpdml0eSA9IGF3YWl0IGRyaXZlci5nZXRDdXJyZW50QWN0aXZpdHkoKTtcbiAgICBhcHBBY3Rpdml0eS5zaG91bGQubm90LmVxdWFsKFwib3JnLmNocm9taXVtLmNocm9tZS5icm93c2VyLmZpcnN0cnVuLkZpcnN0UnVuQWN0aXZpdHlcIik7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
