'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _libWebviewHelpers = require('../../lib/webview-helpers');

var _libWebviewHelpers2 = _interopRequireDefault(_libWebviewHelpers);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var sandbox = _sinon2['default'].sandbox.create();

describe('Webview Helpers', function () {
  var adb = new _appiumAdb2['default']();

  describe('When the webviews are obtained', function () {
    describe('for an app that embeds Chromium', function () {
      var webViews = undefined;

      beforeEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              sandbox.stub(adb, 'shell', function () {
                return 'Num       RefCount Protocol Flags    Type St Inode Path\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2818 /dev/socket/ss_conn_daemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  9231 @mcdaemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01 245445 @webview_devtools_remote_123\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2826 /dev/socket/installd\n';
              });

              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].getWebviews(adb, 'webview_devtools_remote_123'));

            case 3:
              webViews = context$4$0.sent;

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      afterEach(function () {
        sandbox.restore();
      });

      it('then the unix sockets are queried', function () {
        adb.shell.calledOnce.should.be['true'];
        adb.shell.getCall(0).args[0].should.deep.equal(['cat', '/proc/net/unix']);
      });

      it('then the webview is returned', function () {
        webViews.length.should.equal(1);
        webViews.should.deep.equal(['WEBVIEW_123']);
      });
    });

    describe('for a Chromium webview', function () {
      var webViews = undefined;

      beforeEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              sandbox.stub(adb, 'shell', function () {
                return 'Num       RefCount Protocol Flags    Type St Inode Path\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2818 /dev/socket/ss_conn_daemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  9231 @mcdaemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01 245445 @chrome_devtools_remote\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2826 /dev/socket/installd\n';
              });

              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].getWebviews(adb, 'chrome_devtools_remote'));

            case 3:
              webViews = context$4$0.sent;

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      afterEach(function () {
        sandbox.restore();
      });

      it('then the unix sockets are queried', function () {
        adb.shell.calledOnce.should.be['true'];
        adb.shell.getCall(0).args[0].should.deep.equal(['cat', '/proc/net/unix']);
      });

      it('then the webview is returned', function () {
        webViews.length.should.equal(1);
        webViews.should.deep.equal(['CHROMIUM']);
      });
    });

    describe('and no webviews exist', function () {
      var webViews = undefined;

      beforeEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              sandbox.stub(adb, 'shell', function () {
                return 'Num       RefCount Protocol Flags    Type St Inode Path\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2818 /dev/socket/ss_conn_daemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  9231 @mcdaemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2826 /dev/socket/installd\n';
              });

              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].getWebviews(adb));

            case 3:
              webViews = context$4$0.sent;

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      afterEach(function () {
        sandbox.restore();
      });

      it('then the unix sockets are queried', function () {
        adb.shell.calledOnce.should.be['true'];
        adb.shell.getCall(0).args[0].should.deep.equal(['cat', '/proc/net/unix']);
      });

      it('then no webviews are returned', function () {
        webViews.length.should.equal(0);
      });
    });

    describe('and webviews exist', function callee$2$0() {
      var webViews;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        var _this2 = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            webViews = undefined;

            beforeEach(function callee$3$0() {
              var shellStub;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    shellStub = sandbox.stub(adb, 'shell');

                    shellStub.onCall(0).returns('Num       RefCount Protocol Flags    Type St Inode Path\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2818 /dev/socket/ss_conn_daemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  9231 @mcdaemon\n' + '0000000000000000: 00000002 00000000 00010000 0001 01 245445 @webview_devtools_remote_1234\n' + '0000000000000000: 00000002 00000000 00010000 0001 01  2826 /dev/socket/installd\n');
                    shellStub.onCall(1).returns('USER      PID   PPID  VSIZE  RSS   WCHAN              PC  NAME\n' + 'root      1     0     5792   988   SyS_epoll_ 0000000000 S /init\n' + 'root      2     0     0      0       kthreadd 0000000000 S kthreadd\n' + 'root   1234     2     0      0     SyS_epoll_ 0000000000 S com.application.myapp\n');

                    context$4$0.next = 5;
                    return _regeneratorRuntime.awrap(_libWebviewHelpers2['default'].getWebviews(adb));

                  case 5:
                    webViews = context$4$0.sent;

                  case 6:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this2);
            });

            afterEach(function () {
              sandbox.restore();
            });

            it('then the unix sockets and process list are queried', function () {
              adb.shell.calledTwice.should.be['true'];
              adb.shell.getCall(0).args[0].should.deep.equal(['cat', '/proc/net/unix']);
              adb.shell.getCall(1).args[0].should.equal('ps');
            });

            it('then the webview is returned', function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    webViews.length.should.equal(1);
                    webViews.should.deep.equal(['WEBVIEW_com.application.myapp']);

                  case 2:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this2);
            });

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
