'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumAndroidBootstrap = require('appium-android-bootstrap');

var _appiumAndroidBootstrap2 = _interopRequireDefault(_appiumAndroidBootstrap);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mockFs = require('mock-fs');

var _mockFs2 = _interopRequireDefault(_mockFs);

var _ = require('../../..');

var _2 = _interopRequireDefault(_);

var _appiumSupport = require('appium-support');

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var driver = undefined;
var sandbox = _sinon2['default'].sandbox.create();
_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Actions', function () {
  before(function () {
    driver = new _2['default']();
    driver.bootstrap = new _appiumAndroidBootstrap2['default']();
    sandbox.stub(driver.bootstrap, 'sendAction');
  });
  after(function () {
    sandbox.restore();
  });
  describe('Swipe', function () {
    it('should swipe an element', function () {
      driver.swipe(0, 0, 1, 1, 0, 1, 'someElementId');
      driver.bootstrap.sendAction.calledWith('element:swipe').should.be['true'];
    });
    it('should swipe without an element', function () {
      driver.swipe(0, 0, 1, 1, 0, 1);
      driver.bootstrap.sendAction.calledWith('swipe').should.be['true'];
    });
  });
  describe('Flick', function () {
    it('should flick an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.flick('someElementId', 0, 0, 1, 1, 1));

          case 2:
            driver.bootstrap.sendAction.calledWith('element:flick').should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should flick without an element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.flick(null, 0, 0, 1, 1, 1));

          case 2:
            driver.bootstrap.sendAction.calledWith('flick').should.be['true'];

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
  describe('Drag', function () {
    it('should drag an element', function () {
      driver.drag(0, 0, 1, 1, 1, 1, 'someElementId');
      driver.bootstrap.sendAction.calledWith('element:drag').should.be['true'];
    });
    it('should drag without an element', function () {
      driver.drag(0, 0, 1, 1, 1, 1);
      driver.bootstrap.sendAction.calledWith('drag').should.be['true'];
    });
  });
  describe('pullFolder', function () {
    var zippedDir = undefined,
        unzippedDir = undefined,
        tempDir = undefined,
        tempPathStub = undefined;

    before(function () {
      var _mockFS;

      // Create in-memory mock file system for file writes
      zippedDir = '/mock/path/to/zipped';
      unzippedDir = '/mock/path/to/unzipped';
      tempDir = '/mock/path/to/temp-dir';
      (0, _mockFs2['default'])((_mockFS = {}, _defineProperty(_mockFS, zippedDir, {}), _defineProperty(_mockFS, unzippedDir, {}), _defineProperty(_mockFS, tempDir, {}), _mockFS));

      // Stub temp.path to use an in-memory filepath
      tempPathStub = _sinon2['default'].stub(_temp2['default'], 'path', function () {
        return tempDir;
      });
    });

    after(function () {
      tempPathStub.restore();
      _mockFs2['default'].restore();
    });

    it('should pull a folder and return base64 zip', function callee$2$0() {
      var adbPullStub, pull, zippedBase64;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        var _this2 = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adbPullStub = undefined;

            pull = function pull(ignore, localPath) {
              return _regeneratorRuntime.async(function pull$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(_path2['default'].resolve(localPath, 'a.txt'), 'hello world', { flags: 'w' }));

                  case 2:
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(_path2['default'].resolve(localPath, 'b.txt'), 'foobar', { flags: 'w' }));

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this2);
            };

            if (!driver.adb) {
              driver.adb = { pull: pull };
            } else {
              adbPullStub = _sinon2['default'].stub(driver.adb, 'pull', pull);
            }

            // Call 'driver.pullFolder' and zip the base64 contents to a .zip file
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.pullFolder('/does/not/matter'));

          case 5:
            zippedBase64 = context$3$0.sent;

            (typeof zippedBase64).should.equal('string');
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(_path2['default'].resolve(zippedDir, 'zipped.zip'), zippedBase64, { encoding: 'base64', flags: 'w' }));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(_appiumSupport.zip.extractAllTo(_path2['default'].resolve(zippedDir, 'zipped.zip'), unzippedDir));

          case 11:
            context$3$0.next = 13;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(_path2['default'].resolve(unzippedDir, 'a.txt'), 'utf8').should.eventually.equal('hello world'));

          case 13:
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(_path2['default'].resolve(unzippedDir, 'b.txt'), 'utf8').should.eventually.equal('foobar'));

          case 15:

            // Restore stub
            if (adbPullStub) {
              adbPullStub.restore();
            } else {
              delete driver.adb;
            }

          case 16:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});

// Stub in driver.adb and make it pull a folder with two files

// Extract the zip file and verify it's contents
//# sourceMappingURL=data:application/json;charset=utf8;base64,
