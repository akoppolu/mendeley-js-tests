'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumTestSupport = require('appium-test-support');

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _functionalHelpers = require('../functional/helpers');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('test helpers', function () {
  describe('getChromedriver220Asset', (0, _appiumTestSupport.withMocks)({ system: _appiumSupport.system }, function (mocks) {
    var basePath = _path2['default'].resolve(__dirname, '..', '..', '..');

    it('should get the correct path for Windows', function callee$2$0() {
      var cdPath;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.system.expects('isWindows').once().returns(true);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _functionalHelpers.getChromedriver220Asset)());

          case 3:
            cdPath = context$3$0.sent;

            cdPath.should.eql(basePath + '/test/assets/chromedriver-2.20/windows/chromedriver.exe');
            mocks.system.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the correct path for Mac', function callee$2$0() {
      var cdPath;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.system.expects('isWindows').once().returns(false);
            mocks.system.expects('isMac').once().returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _functionalHelpers.getChromedriver220Asset)());

          case 4:
            cdPath = context$3$0.sent;

            cdPath.should.eql(basePath + '/test/assets/chromedriver-2.20/mac/chromedriver');
            mocks.system.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the correct path for Unix 32-bit', function callee$2$0() {
      var cdPath;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.system.expects('isWindows').once().returns(false);
            mocks.system.expects('isMac').once().returns(false);
            mocks.system.expects('arch').once().returns('32');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _functionalHelpers.getChromedriver220Asset)());

          case 5:
            cdPath = context$3$0.sent;

            cdPath.should.eql(basePath + '/test/assets/chromedriver-2.20/linux-32/chromedriver');
            mocks.system.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get the correct path for Unix 64-bit', function callee$2$0() {
      var cdPath;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.system.expects('isWindows').once().returns(false);
            mocks.system.expects('isMac').once().returns(false);
            mocks.system.expects('arch').once().returns('64');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _functionalHelpers.getChromedriver220Asset)());

          case 5:
            cdPath = context$3$0.sent;

            cdPath.should.eql(basePath + '/test/assets/chromedriver-2.20/linux-64/chromedriver');
            mocks.system.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC90ZXN0LWhlbHBlci1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7b0JBQWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O2lDQUNuQixxQkFBcUI7OzZCQUN4QixnQkFBZ0I7O29CQUN0QixNQUFNOzs7O2lDQUNpQix1QkFBdUI7O0FBRy9ELGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsUUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFNO0FBQzdCLFVBQVEsQ0FBQyx5QkFBeUIsRUFBRSxrQ0FBVSxFQUFDLE1BQU0sdUJBQUEsRUFBQyxFQUFFLFVBQUMsS0FBSyxFQUFLO0FBQ2pFLFFBQUksUUFBUSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQzs7QUFFekQsTUFBRSxDQUFDLHlDQUF5QyxFQUFFO1VBRXhDLE1BQU07Ozs7QUFEVixpQkFBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDOzs2Q0FDcEMsaURBQXlCOzs7QUFBeEMsa0JBQU07O0FBQ1Ysa0JBQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFJLFFBQVEsNkRBQTBELENBQUM7QUFDeEYsaUJBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7S0FDdkIsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLHFDQUFxQyxFQUFFO1VBR3BDLE1BQU07Ozs7QUFGVixpQkFBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hELGlCQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7OzZDQUNoQyxpREFBeUI7OztBQUF4QyxrQkFBTTs7QUFDVixrQkFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUksUUFBUSxxREFBa0QsQ0FBQztBQUNoRixpQkFBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQzs7Ozs7OztLQUN2QixDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsNkNBQTZDLEVBQUU7VUFJNUMsTUFBTTs7OztBQUhWLGlCQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEQsaUJBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwRCxpQkFBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDOzs2Q0FDL0IsaURBQXlCOzs7QUFBeEMsa0JBQU07O0FBQ1Ysa0JBQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFJLFFBQVEsMERBQXVELENBQUM7QUFDckYsaUJBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7S0FDdkIsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLDZDQUE2QyxFQUFFO1VBSTVDLE1BQU07Ozs7QUFIVixpQkFBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hELGlCQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEQsaUJBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzs7NkNBQy9CLGlEQUF5Qjs7O0FBQXhDLGtCQUFNOztBQUNWLGtCQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBSSxRQUFRLDBEQUF1RCxDQUFDO0FBQ3JGLGlCQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDOzs7Ozs7O0tBQ3ZCLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQyxDQUFDO0NBQ0wsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdW5pdC90ZXN0LWhlbHBlci1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IHsgd2l0aE1vY2tzIH0gZnJvbSAnYXBwaXVtLXRlc3Qtc3VwcG9ydCc7XG5pbXBvcnQgeyBzeXN0ZW0gfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGdldENocm9tZWRyaXZlcjIyMEFzc2V0IH0gZnJvbSAnLi4vZnVuY3Rpb25hbC9oZWxwZXJzJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgndGVzdCBoZWxwZXJzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnZ2V0Q2hyb21lZHJpdmVyMjIwQXNzZXQnLCB3aXRoTW9ja3Moe3N5c3RlbX0sIChtb2NrcykgPT4ge1xuICAgIGxldCBiYXNlUGF0aCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICcuLicpO1xuXG4gICAgaXQoJ3Nob3VsZCBnZXQgdGhlIGNvcnJlY3QgcGF0aCBmb3IgV2luZG93cycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vY2tzLnN5c3RlbS5leHBlY3RzKCdpc1dpbmRvd3MnKS5vbmNlKCkucmV0dXJucyh0cnVlKTtcbiAgICAgIGxldCBjZFBhdGggPSBhd2FpdCBnZXRDaHJvbWVkcml2ZXIyMjBBc3NldCgpO1xuICAgICAgY2RQYXRoLnNob3VsZC5lcWwoYCR7YmFzZVBhdGh9L3Rlc3QvYXNzZXRzL2Nocm9tZWRyaXZlci0yLjIwL3dpbmRvd3MvY2hyb21lZHJpdmVyLmV4ZWApO1xuICAgICAgbW9ja3Muc3lzdGVtLnZlcmlmeSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgZ2V0IHRoZSBjb3JyZWN0IHBhdGggZm9yIE1hYycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vY2tzLnN5c3RlbS5leHBlY3RzKCdpc1dpbmRvd3MnKS5vbmNlKCkucmV0dXJucyhmYWxzZSk7XG4gICAgICBtb2Nrcy5zeXN0ZW0uZXhwZWN0cygnaXNNYWMnKS5vbmNlKCkucmV0dXJucyh0cnVlKTtcbiAgICAgIGxldCBjZFBhdGggPSBhd2FpdCBnZXRDaHJvbWVkcml2ZXIyMjBBc3NldCgpO1xuICAgICAgY2RQYXRoLnNob3VsZC5lcWwoYCR7YmFzZVBhdGh9L3Rlc3QvYXNzZXRzL2Nocm9tZWRyaXZlci0yLjIwL21hYy9jaHJvbWVkcml2ZXJgKTtcbiAgICAgIG1vY2tzLnN5c3RlbS52ZXJpZnkoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGdldCB0aGUgY29ycmVjdCBwYXRoIGZvciBVbml4IDMyLWJpdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vY2tzLnN5c3RlbS5leHBlY3RzKCdpc1dpbmRvd3MnKS5vbmNlKCkucmV0dXJucyhmYWxzZSk7XG4gICAgICBtb2Nrcy5zeXN0ZW0uZXhwZWN0cygnaXNNYWMnKS5vbmNlKCkucmV0dXJucyhmYWxzZSk7XG4gICAgICBtb2Nrcy5zeXN0ZW0uZXhwZWN0cygnYXJjaCcpLm9uY2UoKS5yZXR1cm5zKCczMicpO1xuICAgICAgbGV0IGNkUGF0aCA9IGF3YWl0IGdldENocm9tZWRyaXZlcjIyMEFzc2V0KCk7XG4gICAgICBjZFBhdGguc2hvdWxkLmVxbChgJHtiYXNlUGF0aH0vdGVzdC9hc3NldHMvY2hyb21lZHJpdmVyLTIuMjAvbGludXgtMzIvY2hyb21lZHJpdmVyYCk7XG4gICAgICBtb2Nrcy5zeXN0ZW0udmVyaWZ5KCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBnZXQgdGhlIGNvcnJlY3QgcGF0aCBmb3IgVW5peCA2NC1iaXQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBtb2Nrcy5zeXN0ZW0uZXhwZWN0cygnaXNXaW5kb3dzJykub25jZSgpLnJldHVybnMoZmFsc2UpO1xuICAgICAgbW9ja3Muc3lzdGVtLmV4cGVjdHMoJ2lzTWFjJykub25jZSgpLnJldHVybnMoZmFsc2UpO1xuICAgICAgbW9ja3Muc3lzdGVtLmV4cGVjdHMoJ2FyY2gnKS5vbmNlKCkucmV0dXJucygnNjQnKTtcbiAgICAgIGxldCBjZFBhdGggPSBhd2FpdCBnZXRDaHJvbWVkcml2ZXIyMjBBc3NldCgpO1xuICAgICAgY2RQYXRoLnNob3VsZC5lcWwoYCR7YmFzZVBhdGh9L3Rlc3QvYXNzZXRzL2Nocm9tZWRyaXZlci0yLjIwL2xpbnV4LTY0L2Nocm9tZWRyaXZlcmApO1xuICAgICAgbW9ja3Muc3lzdGVtLnZlcmlmeSgpO1xuICAgIH0pO1xuICB9KSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
