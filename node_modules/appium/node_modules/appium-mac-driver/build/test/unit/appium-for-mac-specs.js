require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libAppiumForMac = require('../../lib/appium-for-mac');

var _libAppiumForMac2 = _interopRequireDefault(_libAppiumForMac);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function buildAppiumForMacOpts() {
  return {
    app: 'foo',
    platformName: 'Mac',
    host: 'localhost',
    port: 4623
  };
}

describe('AppiumForMac', function () {
  describe('#startSession', (0, _appiumTestSupport.withMocks)({}, function (mocks, S) {
    var appium4MacDriver = new _libAppiumForMac2['default'](buildAppiumForMacOpts());

    it('should start a session', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = { foo: 'bar' };

            mocks.jwproxy = S.sandbox.mock(appium4MacDriver.jwproxy);
            mocks.jwproxy.expects("command").once().withExactArgs("/session", "POST", { desiredCapabilities: caps }).returns(_Promise.resolve());
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(appium4MacDriver.startSession(caps));

          case 5:
            mocks.jwproxy.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9hcHBpdW0tZm9yLW1hYy1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7b0JBRWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7OytCQUNwQiwwQkFBMEI7Ozs7aUNBQ3pCLHFCQUFxQjs7QUFFL0Msa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixTQUFTLHFCQUFxQixHQUFJO0FBQ2hDLFNBQU87QUFDTCxPQUFHLEVBQUUsS0FBSztBQUNWLGdCQUFZLEVBQUUsS0FBSztBQUNuQixRQUFJLEVBQUUsV0FBVztBQUNqQixRQUFJLEVBQUUsSUFBSTtHQUNYLENBQUM7Q0FDSDs7QUFFRCxRQUFRLENBQUMsY0FBYyxFQUFFLFlBQU07QUFDN0IsVUFBUSxDQUFDLGVBQWUsRUFBRSxrQ0FBVSxFQUFHLEVBQUUsVUFBQyxLQUFLLEVBQUUsQ0FBQyxFQUFLO0FBQ3JELFFBQUksZ0JBQWdCLEdBQUcsaUNBQWlCLHFCQUFxQixFQUFFLENBQUMsQ0FBQzs7QUFFakUsTUFBRSxDQUFDLHdCQUF3QixFQUFFO1VBQ3ZCLElBQUk7Ozs7QUFBSixnQkFBSSxHQUFHLEVBQUMsR0FBRyxFQUFFLEtBQUssRUFBQzs7QUFDdkIsaUJBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDekQsaUJBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUNwQyxhQUFhLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxFQUFDLG1CQUFtQixFQUFFLElBQUksRUFBQyxDQUFDLENBQzlELE9BQU8sQ0FBQyxTQUFRLE9BQU8sRUFBRSxDQUFDLENBQUM7OzZDQUN4QixnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDOzs7QUFDekMsaUJBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7S0FDeEIsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDLENBQUM7Q0FDTCxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2FwcGl1bS1mb3ItbWFjLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IEFwcGl1bUZvck1hYyBmcm9tICcuLi8uLi9saWIvYXBwaXVtLWZvci1tYWMnO1xuaW1wb3J0IHsgd2l0aE1vY2tzIH0gZnJvbSAnYXBwaXVtLXRlc3Qtc3VwcG9ydCc7XG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmZ1bmN0aW9uIGJ1aWxkQXBwaXVtRm9yTWFjT3B0cyAoKSB7XG4gIHJldHVybiB7XG4gICAgYXBwOiAnZm9vJyxcbiAgICBwbGF0Zm9ybU5hbWU6ICdNYWMnLFxuICAgIGhvc3Q6ICdsb2NhbGhvc3QnLFxuICAgIHBvcnQ6IDQ2MjNcbiAgfTtcbn1cblxuZGVzY3JpYmUoJ0FwcGl1bUZvck1hYycsICgpID0+IHtcbiAgZGVzY3JpYmUoJyNzdGFydFNlc3Npb24nLCB3aXRoTW9ja3MoeyB9LCAobW9ja3MsIFMpID0+IHtcbiAgICBsZXQgYXBwaXVtNE1hY0RyaXZlciA9IG5ldyBBcHBpdW1Gb3JNYWMoYnVpbGRBcHBpdW1Gb3JNYWNPcHRzKCkpO1xuXG4gICAgaXQoJ3Nob3VsZCBzdGFydCBhIHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgY2FwcyA9IHtmb286ICdiYXInfTtcbiAgICAgIG1vY2tzLmp3cHJveHkgPSBTLnNhbmRib3gubW9jayhhcHBpdW00TWFjRHJpdmVyLmp3cHJveHkpO1xuICAgICAgbW9ja3Muandwcm94eS5leHBlY3RzKFwiY29tbWFuZFwiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3MoXCIvc2Vzc2lvblwiLCBcIlBPU1RcIiwge2Rlc2lyZWRDYXBhYmlsaXRpZXM6IGNhcHN9KVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICBhd2FpdCBhcHBpdW00TWFjRHJpdmVyLnN0YXJ0U2Vzc2lvbihjYXBzKTtcbiAgICAgIG1vY2tzLmp3cHJveHkudmVyaWZ5KCk7XG4gICAgfSk7XG4gIH0pKTtcbn0pO1xuXG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
