#!/usr/bin/env node

/* eslint-disable no-console */

'use strict';

var fs = require('fs'),
    path = require('path');

function waitForDeps(cb) {
  // see if we can import the necessary code
  // try it a ridiculous (but finite) number of times
  var i = 0;
  function check() {
    i++;
    try {
      require('./build/lib/install');
      cb();
    } catch (err) {
      if (err.message.indexOf("Cannot find module './build/lib/install'") !== -1) {
        console.warn('Project does not appear to built yet. Please run `gulp transpile` first.');
        return cb('Could not install module: ' + err);
      }
      console.warn('Error trying to install Chromedriver binary. Waiting and trying again.', err.message);
      if (i <= 200) {
        setTimeout(check, 1000);
      } else {
        cb('Could not import installation module: ' + err);
      }
    }
  }
  check();
}

if (require.main === module) {
  // check if cur dir exists
  var installScript = path.resolve(__dirname, 'build', 'lib', 'install.js');
  waitForDeps(function (err) {
    if (err) {
      console.warn("Unable to import install script. Re-run `install appium-chromedriver` manually.");
      return;
    }
    fs.stat(installScript, function (err) {
      if (err) {
        console.warn("NOTE: Run 'gulp transpile' before using");
        return;
      }
      require('./build/lib/install').doInstall()['catch'](function (err) {
        console.error(err.stack ? err.stack : err);
        process.exit(1);
      });
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbGwtbnBtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNsQixJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUczQixTQUFTLFdBQVcsQ0FBRSxFQUFFLEVBQUU7OztBQUd4QixNQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDVixXQUFTLEtBQUssR0FBSTtBQUNoQixLQUFDLEVBQUUsQ0FBQztBQUNKLFFBQUk7QUFDRixhQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUMvQixRQUFFLEVBQUUsQ0FBQztLQUNOLENBQUMsT0FBTyxHQUFHLEVBQUU7QUFDWixVQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLDBDQUEwQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDMUUsZUFBTyxDQUFDLElBQUksQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO0FBQ3pGLGVBQU8sRUFBRSxDQUFDLDRCQUE0QixHQUFHLEdBQUcsQ0FBQyxDQUFDO09BQy9DO0FBQ0QsYUFBTyxDQUFDLElBQUksQ0FBQyx3RUFBd0UsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEcsVUFBSSxDQUFDLElBQUksR0FBRyxFQUFFO0FBQ1osa0JBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7T0FDekIsTUFBTTtBQUNMLFVBQUUsQ0FBQyx3Q0FBd0MsR0FBRyxHQUFHLENBQUMsQ0FBQztPQUNwRDtLQUNGO0dBQ0Y7QUFDRCxPQUFLLEVBQUUsQ0FBQztDQUNUOztBQUVELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7O0FBRTNCLE1BQUksYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDMUUsYUFBVyxDQUFDLFVBQVUsR0FBRyxFQUFFO0FBQ3pCLFFBQUksR0FBRyxFQUFFO0FBQ1AsYUFBTyxDQUFDLElBQUksQ0FBQyxpRkFBaUYsQ0FBQyxDQUFDO0FBQ2hHLGFBQU87S0FDUjtBQUNELE1BQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFVBQVUsR0FBRyxFQUFFO0FBQ3BDLFVBQUksR0FBRyxFQUFFO0FBQ1AsZUFBTyxDQUFDLElBQUksQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0FBQ3hELGVBQU87T0FDUjtBQUNELGFBQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLFNBQVMsRUFBRSxTQUFNLENBQUMsVUFBVSxHQUFHLEVBQUU7QUFDOUQsZUFBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDM0MsZUFBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUNqQixDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSiIsImZpbGUiOiJpbnN0YWxsLW5wbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpXG4gICwgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuXG5mdW5jdGlvbiB3YWl0Rm9yRGVwcyAoY2IpIHtcbiAgLy8gc2VlIGlmIHdlIGNhbiBpbXBvcnQgdGhlIG5lY2Vzc2FyeSBjb2RlXG4gIC8vIHRyeSBpdCBhIHJpZGljdWxvdXMgKGJ1dCBmaW5pdGUpIG51bWJlciBvZiB0aW1lc1xuICB2YXIgaSA9IDA7XG4gIGZ1bmN0aW9uIGNoZWNrICgpIHtcbiAgICBpKys7XG4gICAgdHJ5IHtcbiAgICAgIHJlcXVpcmUoJy4vYnVpbGQvbGliL2luc3RhbGwnKTtcbiAgICAgIGNiKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyLm1lc3NhZ2UuaW5kZXhPZihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnLi9idWlsZC9saWIvaW5zdGFsbCdcIikgIT09IC0xKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignUHJvamVjdCBkb2VzIG5vdCBhcHBlYXIgdG8gYnVpbHQgeWV0LiBQbGVhc2UgcnVuIGBndWxwIHRyYW5zcGlsZWAgZmlyc3QuJyk7XG4gICAgICAgIHJldHVybiBjYignQ291bGQgbm90IGluc3RhbGwgbW9kdWxlOiAnICsgZXJyKTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUud2FybignRXJyb3IgdHJ5aW5nIHRvIGluc3RhbGwgQ2hyb21lZHJpdmVyIGJpbmFyeS4gV2FpdGluZyBhbmQgdHJ5aW5nIGFnYWluLicsIGVyci5tZXNzYWdlKTtcbiAgICAgIGlmIChpIDw9IDIwMCkge1xuICAgICAgICBzZXRUaW1lb3V0KGNoZWNrLCAxMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNiKCdDb3VsZCBub3QgaW1wb3J0IGluc3RhbGxhdGlvbiBtb2R1bGU6ICcgKyBlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjaGVjaygpO1xufVxuXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgLy8gY2hlY2sgaWYgY3VyIGRpciBleGlzdHNcbiAgdmFyIGluc3RhbGxTY3JpcHQgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnYnVpbGQnLCAnbGliJywgJ2luc3RhbGwuanMnKTtcbiAgd2FpdEZvckRlcHMoZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIlVuYWJsZSB0byBpbXBvcnQgaW5zdGFsbCBzY3JpcHQuIFJlLXJ1biBgaW5zdGFsbCBhcHBpdW0tY2hyb21lZHJpdmVyYCBtYW51YWxseS5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZzLnN0YXQoaW5zdGFsbFNjcmlwdCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJOT1RFOiBSdW4gJ2d1bHAgdHJhbnNwaWxlJyBiZWZvcmUgdXNpbmdcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlcXVpcmUoJy4vYnVpbGQvbGliL2luc3RhbGwnKS5kb0luc3RhbGwoKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnN0YWNrID8gZXJyLnN0YWNrIDogZXJyKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIuLiJ9
