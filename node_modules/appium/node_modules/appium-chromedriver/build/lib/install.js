'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var log = _appiumSupport.logger.getLogger('Chromedriver Install');

var CD_VER = process.env.npm_config_chromedriver_version || process.env.CHROMEDRIVER_VERSION || '2.28';
var CD_CDN = process.env.npm_config_chromedriver_cdnurl || process.env.CHROMEDRIVER_CDNURL || 'https://chromedriver.storage.googleapis.com';
var CD_BASE_DIR = _path2['default'].resolve(__dirname, "..", "..", "chromedriver");
var CD_PLATS = ["linux", "win", "mac"];
var CD_ARCHS = ["32", "64"];

function getCurPlatform() {
  return _appiumSupport.system.isWindows() ? "win" : _appiumSupport.system.isMac() ? "mac" : "linux";
}

function getChromedriverDir() {
  var platform = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

  if (!platform) {
    platform = getCurPlatform();
  }
  return _path2['default'].resolve(CD_BASE_DIR, platform);
}

function getArchAndPlatform() {
  var arch, platform;
  return _regeneratorRuntime.async(function getArchAndPlatform$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.system.arch());

      case 2:
        arch = context$1$0.sent;
        platform = getCurPlatform();

        if (platform !== 'linux' && platform !== 'mac' && arch === '64') {
          arch = '32';
        }
        if (platform === 'mac' && parseFloat(CD_VER) < 2.23) {
          arch = '32';
        }
        return context$1$0.abrupt('return', { arch: arch, platform: platform });

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getChromedriverBinaryPath() {
  var platform = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
  var arch = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var baseDir, ext;
  return _regeneratorRuntime.async(function getChromedriverBinaryPath$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!platform) {
          platform = getCurPlatform();
        }
        baseDir = getChromedriverDir(platform);
        ext = "";

        if (!(platform === "win")) {
          context$1$0.next = 7;
          break;
        }

        ext = ".exe";
        context$1$0.next = 13;
        break;

      case 7:
        if (!(platform === "linux")) {
          context$1$0.next = 13;
          break;
        }

        if (arch) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(_appiumSupport.system.arch());

      case 11:
        arch = context$1$0.sent;

      case 12:
        ext = "_" + arch;

      case 13:
        return context$1$0.abrupt('return', _path2['default'].resolve(baseDir, 'chromedriver' + ext));

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getDownloadUrl(version, platform, arch) {
  return CD_CDN + '/' + version + '/chromedriver_' + platform + arch + '.zip';
}

function validatePlatform(platform, arch) {
  if (!_lodash2['default'].contains(CD_PLATS, platform)) {
    throw new Error('Invalid platform: ' + platform);
  }
  if (!_lodash2['default'].contains(CD_ARCHS, arch)) {
    throw new Error('Invalid arch: ' + arch);
  }
  if (arch === "64" && platform !== "linux" && platform !== 'mac') {
    throw new Error("Only linux has a 64-bit version of Chromedriver");
  }
}

function installForPlatform(version, platform, arch) {
  var url, binarySpec, tempFile, body, tempUnzipped, extractedBin, newBin, binContents;
  return _regeneratorRuntime.async(function installForPlatform$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(version === 'LATEST')) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.t0 = JSON;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_requestPromise2['default'].get({ uri: CD_CDN + '/LATEST_RELEASE' }));

      case 4:
        context$1$0.t1 = context$1$0.sent;
        version = context$1$0.t0.parse.call(context$1$0.t0, context$1$0.t1);

      case 6:
        validatePlatform(platform, arch);

        url = getDownloadUrl(version, platform, arch);

        log.info('Installing Chromedriver version \'' + version + '\' for platform \'' + platform + '\' and architecture \'' + arch + '\'');

        // set up a temp file to download the chromedriver zipfile to
        binarySpec = 'chromedriver_' + platform + arch;

        log.info('Opening temp file to write ' + binarySpec + ' to...');
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.open({
          prefix: binarySpec,
          suffix: '.zip'
        }));

      case 13:
        tempFile = context$1$0.sent;

        // actually download the zipfile and write it with appropriate perms
        log.info('Downloading ' + url + '...');
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(_requestPromise2['default'].get({ url: url, encoding: 'binary' }));

      case 17:
        body = context$1$0.sent;

        log.info('Writing binary content to ' + tempFile.path + '...');
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tempFile.path, body, { encoding: 'binary' }));

      case 21:
        context$1$0.next = 23;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.chmod(tempFile.path, 420));

      case 23:
        tempUnzipped = _path2['default'].resolve(_path2['default'].dirname(tempFile.path), binarySpec);

        log.info('Extracting ' + tempFile.path + ' to ' + tempUnzipped);
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(tempUnzipped));

      case 27:
        context$1$0.next = 29;
        return _regeneratorRuntime.awrap(_appiumSupport.zip.extractAllTo(tempFile.path, tempUnzipped));

      case 29:
        extractedBin = _path2['default'].resolve(tempUnzipped, "chromedriver");

        if (platform === "win") {
          extractedBin += ".exe";
        }

        // make build dirs that will hold the chromedriver binary
        log.info('Creating ' + _path2['default'].resolve(CD_BASE_DIR, platform) + '...');
        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(CD_BASE_DIR));

      case 34:
        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(_path2['default'].resolve(CD_BASE_DIR, platform)));

      case 36:
        context$1$0.next = 38;
        return _regeneratorRuntime.awrap(getChromedriverBinaryPath(platform, arch));

      case 38:
        newBin = context$1$0.sent;

        log.info('Copying unzipped binary, reading from ' + extractedBin + '...');
        context$1$0.next = 42;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(extractedBin, { encoding: 'binary' }));

      case 42:
        binContents = context$1$0.sent;

        log.info('Writing to ' + newBin + '...');
        context$1$0.next = 46;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(newBin, binContents, { encoding: 'binary', mode: 493 }));

      case 46:
        log.info(newBin + ' successfully put in place');

      case 47:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function install() {
  var _ref, arch, platform;

  return _regeneratorRuntime.async(function install$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getArchAndPlatform());

      case 2:
        _ref = context$1$0.sent;
        arch = _ref.arch;
        platform = _ref.platform;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(installForPlatform(CD_VER, platform, arch));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function conditionalInstall() {
  var _ref2, arch, platform, binPath;

  return _regeneratorRuntime.async(function conditionalInstall$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getArchAndPlatform());

      case 2:
        _ref2 = context$1$0.sent;
        arch = _ref2.arch;
        platform = _ref2.platform;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(getChromedriverBinaryPath(platform, arch));

      case 7:
        binPath = context$1$0.sent;
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(binPath));

      case 10:
        if (context$1$0.sent) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(installForPlatform(CD_VER, platform, arch));

      case 13:
        context$1$0.next = 16;
        break;

      case 15:
        log.info('No need to install chromedriver, ' + binPath + ' exists');

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function installAll() {
  var plats, downloads, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, platform, arch;

  return _regeneratorRuntime.async(function installAll$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        plats = [['linux', '32'], ['linux', '64'], ['win', '32']];

        // before 2.23 Mac version was 32 bit. After it is 64.
        plats.push(parseFloat(CD_VER) < 2.23 ? ['mac', '32'] : ['mac', '64']);
        downloads = [];
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 6;

        for (_iterator = _getIterator(plats); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _step$value = _slicedToArray(_step.value, 2);
          platform = _step$value[0];
          arch = _step$value[1];

          downloads.push(installForPlatform(CD_VER, platform, arch));
        }
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](6);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 14:
        context$1$0.prev = 14;
        context$1$0.prev = 15;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 17:
        context$1$0.prev = 17;

        if (!_didIteratorError) {
          context$1$0.next = 20;
          break;
        }

        throw _iteratorError;

      case 20:
        return context$1$0.finish(17);

      case 21:
        return context$1$0.finish(14);

      case 22:
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap((0, _asyncbox.parallel)(downloads));

      case 24:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 10, 14, 22], [15,, 17, 21]]);
}

function doInstall() {
  return _regeneratorRuntime.async(function doInstall$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(_lodash2['default'].contains(process.argv, '--all') || process.env.npm_config_chromedriver_install_all)) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(installAll());

      case 3:
        context$1$0.next = 12;
        break;

      case 5:
        if (!_lodash2['default'].contains(process.argv, '--conditional')) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(conditionalInstall());

      case 8:
        context$1$0.next = 12;
        break;

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(install());

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.getChromedriverBinaryPath = getChromedriverBinaryPath;
exports.install = install;
exports.installAll = installAll;
exports.CD_BASE_DIR = CD_BASE_DIR;
exports.getCurPlatform = getCurPlatform;
exports.conditionalInstall = conditionalInstall;
exports.doInstall = doInstall;

// extract downloaded zipfile to tempdir

// copy the extracted binary to the correct build dir
//# sourceMappingURL=data:application/json;charset=utf8;base64,
