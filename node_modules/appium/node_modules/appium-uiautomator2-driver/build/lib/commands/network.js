'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var extensions = {},
    commands = {};

commands.setWifiState = function callee$0$0(wifi) {
  var type;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        type = wifi << 1;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.uiautomator2.jwproxy.command('/network_connection', 'POST', { type: type }));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].error('Unable to set Network connection to WIFI, retrying with adb command. ERROR:: ' + context$1$0.t0.message);
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.adb.setWifiState(wifi, this.isEmulator()));

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
};

_Object$assign(extensions, commands);
exports.commands = commands;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9uZXR3b3JrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBZ0IsV0FBVzs7OztBQUUzQixJQUFJLFVBQVUsR0FBRyxFQUFFO0lBQUUsUUFBUSxHQUFHLEVBQUUsQ0FBQzs7QUFFbkMsUUFBUSxDQUFDLFlBQVksR0FBRyxvQkFBZSxJQUFJO01BQ3JDLElBQUk7Ozs7QUFBSixZQUFJLEdBQUcsSUFBSSxJQUFJLENBQUM7Ozt5Q0FFTCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsTUFBTSxFQUFFLEVBQUMsSUFBSSxFQUFKLElBQUksRUFBQyxDQUFDOzs7Ozs7Ozs7QUFFckYsNEJBQUksS0FBSyxtRkFBaUYsZUFBTSxPQUFPLENBQUcsQ0FBQzs7eUNBQ3JHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Ozs7Ozs7Q0FFdkQsQ0FBQzs7QUFFRixlQUFjLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzQixRQUFRLEdBQVIsUUFBUTtxQkFDRixVQUFVIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9uZXR3b3JrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5sZXQgZXh0ZW5zaW9ucyA9IHt9LCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5zZXRXaWZpU3RhdGUgPSBhc3luYyBmdW5jdGlvbih3aWZpKSB7XG4gIGxldCB0eXBlID0gd2lmaSA8PCAxO1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnVpYXV0b21hdG9yMi5qd3Byb3h5LmNvbW1hbmQoJy9uZXR3b3JrX2Nvbm5lY3Rpb24nLCAnUE9TVCcsIHt0eXBlfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgbG9nLmVycm9yKGBVbmFibGUgdG8gc2V0IE5ldHdvcmsgY29ubmVjdGlvbiB0byBXSUZJLCByZXRyeWluZyB3aXRoIGFkYiBjb21tYW5kLiBFUlJPUjo6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICBhd2FpdCB0aGlzLmFkYi5zZXRXaWZpU3RhdGUod2lmaSwgdGhpcy5pc0VtdWxhdG9yKCkpO1xuICB9XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzKTtcbmV4cG9ydCB7IGNvbW1hbmRzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
