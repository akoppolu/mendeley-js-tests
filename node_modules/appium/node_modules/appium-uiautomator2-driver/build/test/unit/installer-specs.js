//import _ from 'lodash';
'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumSupport = require('appium-support');

var _appiumTestSupport = require('appium-test-support');

var _libInstaller = require('../../lib/installer');

var _libLogger = require('../../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('appium-uiautomator2-installer', function () {
  describe('setupUiAutomator2', (0, _appiumTestSupport.withMocks)({ log: _libLogger2['default'] }, function (mocks) {
    it('should download the server APKs', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.log.expects("error").never();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _libInstaller.setupUiAutomator2)());

          case 3:
            mocks.log.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));

  describe('serverExists', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs }, function (mocks) {
    it('should return true if both server apk and test apk exist', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.UI2_SERVER_APK_PATH).returns(_Promise.resolve(true));
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.UI2_TEST_APK_PATH).returns(_Promise.resolve(true));
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _libInstaller.serverExists)());

          case 4:
            context$3$0.sent.should.be['true'];

            mocks.fs.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should return false if apk does not exist', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.UI2_SERVER_APK_PATH).returns(_Promise.resolve(false));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _libInstaller.serverExists)());

          case 3:
            context$3$0.sent.should.be['false'];

            mocks.fs.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should return false if fs.exists throws a ENOENT error', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.UI2_SERVER_APK_PATH).throws({ code: 'ENOENT' });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _libInstaller.serverExists)());

          case 3:
            context$3$0.sent.should.be['false'];

            mocks.fs.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should throw an error if fs.exists throws a non-ENOENT error', function callee$2$0() {
      var error;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            error = new Error();

            error.code = 'EACCES';
            mocks.fs.expects("exists").once().withExactArgs(_libInstaller.UI2_SERVER_APK_PATH).throws(error);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap((0, _libInstaller.serverExists)().should.eventually.be.rejectedWith(error));

          case 5:
            mocks.fs.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9pbnN0YWxsZXItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7b0JBQ2lCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7OzZCQUMxQixnQkFBZ0I7O2lDQUNULHFCQUFxQjs7NEJBQ3lDLHFCQUFxQjs7eUJBQzdGLGtCQUFrQjs7OztBQUdsQyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQywrQkFBK0IsRUFBRSxZQUFNO0FBQzlDLFVBQVEsQ0FBQyxtQkFBbUIsRUFBRSxrQ0FBVSxFQUFDLEdBQUcsd0JBQUEsRUFBQyxFQUFFLFVBQUMsS0FBSyxFQUFLO0FBQ3hELE1BQUUsQ0FBQyxpQ0FBaUMsRUFBRTs7OztBQUNwQyxpQkFBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7OzZDQUM3QixzQ0FBbUI7OztBQUN6QixpQkFBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQzs7Ozs7OztLQUNwQixDQUFDLENBQUM7R0FDSixDQUFDLENBQUMsQ0FBQzs7QUFFSixVQUFRLENBQUMsY0FBYyxFQUFFLGtDQUFVLEVBQUMsRUFBRSxtQkFBQSxFQUFDLEVBQUUsVUFBQyxLQUFLLEVBQUs7QUFDbEQsTUFBRSxDQUFDLDBEQUEwRCxFQUFFOzs7O0FBQzdELGlCQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDOUIsYUFBYSxtQ0FBcUIsQ0FDbEMsT0FBTyxDQUFDLFNBQVEsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDbEMsaUJBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUM5QixhQUFhLGlDQUFtQixDQUNoQyxPQUFPLENBQUMsU0FBUSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7NkNBQzNCLGlDQUFjOzs7NkJBQUUsTUFBTSxDQUFDLEVBQUU7O0FBQ2hDLGlCQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDOzs7Ozs7O0tBQ25CLENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQywyQ0FBMkMsRUFBRTs7OztBQUM5QyxpQkFBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQzlCLGFBQWEsbUNBQXFCLENBQ2xDLE9BQU8sQ0FBQyxTQUFRLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOzs2Q0FDNUIsaUNBQWM7Ozs2QkFBRSxNQUFNLENBQUMsRUFBRTs7QUFDaEMsaUJBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7S0FDbkIsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLHdEQUF3RCxFQUFFOzs7O0FBQzNELGlCQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDOUIsYUFBYSxtQ0FBcUIsQ0FDbEMsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7OzZDQUNwQixpQ0FBYzs7OzZCQUFFLE1BQU0sQ0FBQyxFQUFFOztBQUNoQyxpQkFBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQzs7Ozs7OztLQUNuQixDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsOERBQThELEVBQUU7VUFDN0QsS0FBSzs7OztBQUFMLGlCQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUU7O0FBQ3ZCLGlCQUFLLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztBQUN0QixpQkFBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQzlCLGFBQWEsbUNBQXFCLENBQ2xDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7NkNBQ1gsaUNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDOzs7QUFDN0QsaUJBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7S0FDbkIsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDLENBQUM7Q0FDTCxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2luc3RhbGxlci1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyB3aXRoTW9ja3MgfSBmcm9tICdhcHBpdW0tdGVzdC1zdXBwb3J0JztcbmltcG9ydCB7IHNlcnZlckV4aXN0cywgVUkyX1NFUlZFUl9BUEtfUEFUSCwgVUkyX1RFU1RfQVBLX1BBVEgsIHNldHVwVWlBdXRvbWF0b3IyIH0gZnJvbSAnLi4vLi4vbGliL2luc3RhbGxlcic7XG5pbXBvcnQgbG9nIGZyb20gJy4uLy4uL2xpYi9sb2dnZXInO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdhcHBpdW0tdWlhdXRvbWF0b3IyLWluc3RhbGxlcicsICgpID0+IHtcbiAgZGVzY3JpYmUoJ3NldHVwVWlBdXRvbWF0b3IyJywgd2l0aE1vY2tzKHtsb2d9LCAobW9ja3MpID0+IHtcbiAgICBpdCgnc2hvdWxkIGRvd25sb2FkIHRoZSBzZXJ2ZXIgQVBLcycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tzLmxvZy5leHBlY3RzKFwiZXJyb3JcIikubmV2ZXIoKTtcbiAgICAgIGF3YWl0IHNldHVwVWlBdXRvbWF0b3IyKCk7XG4gICAgICBtb2Nrcy5sb2cudmVyaWZ5KCk7XG4gICAgfSk7XG4gIH0pKTtcblxuICBkZXNjcmliZSgnc2VydmVyRXhpc3RzJywgd2l0aE1vY2tzKHtmc30sIChtb2NrcykgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUgaWYgYm90aCBzZXJ2ZXIgYXBrIGFuZCB0ZXN0IGFwayBleGlzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tzLmZzLmV4cGVjdHMoXCJleGlzdHNcIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKFVJMl9TRVJWRVJfQVBLX1BBVEgpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSh0cnVlKSk7XG4gICAgICBtb2Nrcy5mcy5leHBlY3RzKFwiZXhpc3RzXCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhVSTJfVEVTVF9BUEtfUEFUSClcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKHRydWUpKTtcbiAgICAgIChhd2FpdCBzZXJ2ZXJFeGlzdHMoKSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICBtb2Nrcy5mcy52ZXJpZnkoKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSBpZiBhcGsgZG9lcyBub3QgZXhpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2Nrcy5mcy5leHBlY3RzKFwiZXhpc3RzXCIpLm9uY2UoKVxuICAgICAgICAud2l0aEV4YWN0QXJncyhVSTJfU0VSVkVSX0FQS19QQVRIKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoZmFsc2UpKTtcbiAgICAgIChhd2FpdCBzZXJ2ZXJFeGlzdHMoKSkuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgbW9ja3MuZnMudmVyaWZ5KCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UgaWYgZnMuZXhpc3RzIHRocm93cyBhIEVOT0VOVCBlcnJvcicsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tzLmZzLmV4cGVjdHMoXCJleGlzdHNcIikub25jZSgpXG4gICAgICAgIC53aXRoRXhhY3RBcmdzKFVJMl9TRVJWRVJfQVBLX1BBVEgpXG4gICAgICAgIC50aHJvd3Moe2NvZGU6J0VOT0VOVCd9KTtcbiAgICAgIChhd2FpdCBzZXJ2ZXJFeGlzdHMoKSkuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgbW9ja3MuZnMudmVyaWZ5KCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciBpZiBmcy5leGlzdHMgdGhyb3dzIGEgbm9uLUVOT0VOVCBlcnJvcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcigpO1xuICAgICAgZXJyb3IuY29kZSA9ICdFQUNDRVMnO1xuICAgICAgbW9ja3MuZnMuZXhwZWN0cyhcImV4aXN0c1wiKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3MoVUkyX1NFUlZFUl9BUEtfUEFUSClcbiAgICAgICAgLnRocm93cyhlcnJvcik7XG4gICAgICBhd2FpdCBzZXJ2ZXJFeGlzdHMoKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoZXJyb3IpO1xuICAgICAgbW9ja3MuZnMudmVyaWZ5KCk7XG4gICAgfSk7XG4gIH0pKTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
