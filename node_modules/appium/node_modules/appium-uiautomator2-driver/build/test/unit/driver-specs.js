'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('driver.js', function () {
  describe('constructor', function () {
    it('calls BaseDriver constructor with opts', function () {
      var driver = new _2['default']({ foo: 'bar' });
      driver.should.exist;
      driver.opts.foo.should.equal('bar');
    });
  });

  describe('createSession', function () {
    it('should throw an error if app can not be found', function callee$2$0() {
      var driver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']({}, false);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.createSession({ app: 'foo.apk' }).should.be.rejectedWith('app apk'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should set sessionId', function callee$2$0() {
      var driver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']({}, false);

            _sinon2['default'].mock(driver).expects('checkAppPresent').once().returns(_Promise.resolve());
            _sinon2['default'].mock(driver).expects('startUiAutomator2Session').once().returns(_Promise.resolve());
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.createSession({ cap: 'foo' }));

          case 5:

            driver.sessionId.should.exist;
            driver.caps.cap.should.equal('foo');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should set the default context', function callee$2$0() {
      var driver;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = new _2['default']({}, false);

            _sinon2['default'].mock(driver).expects('checkAppPresent').returns(_Promise.resolve());
            _sinon2['default'].mock(driver).expects('startUiAutomator2Session').returns(_Promise.resolve());
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.createSession({}));

          case 5:
            driver.curContext.should.equal('NATIVE_APP');

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('checkAppPresent', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this2 = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          it('should resolve if app present', function callee$2$0() {
            var driver, app;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver = new _2['default']({}, false);
                  app = _path2['default'].resolve('.');

                  _sinon2['default'].mock(driver).expects('startUiAutomator2Session').returns(_Promise.resolve());
                  _sinon2['default'].mock(driver.helpers).expects('configureApp').returns(app);

                  context$3$0.next = 6;
                  return _regeneratorRuntime.awrap(driver.createSession({ app: app }));

                case 6:
                  context$3$0.next = 8;
                  return _regeneratorRuntime.awrap(driver.checkAppPresent());

                case 8:
                  // should not error

                  // configureApp is shared between the two,
                  // so restore mock or the next test will fail
                  driver.helpers.configureApp.restore();

                case 9:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this2);
          });

          it('should reject if app not present', function callee$2$0() {
            var driver, app;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  driver = new _2['default']({}, false);
                  app = _path2['default'].resolve('asdfasdf');

                  _sinon2['default'].mock(driver).expects('checkAppPresent').returns(_Promise.resolve());
                  _sinon2['default'].mock(driver).expects('startUiAutomator2Session').returns(_Promise.resolve());
                  _sinon2['default'].mock(driver.helpers).expects('configureApp').returns(app);

                  context$3$0.next = 7;
                  return _regeneratorRuntime.awrap(driver.createSession({ app: app }));

                case 7:

                  driver.checkAppPresent.restore();
                  context$3$0.next = 10;
                  return _regeneratorRuntime.awrap(driver.checkAppPresent().should.eventually.be.rejectedWith('Could not find'));

                case 10:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this2);
          });

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  describe('proxying', function () {
    var driver = undefined;
    before(function () {
      driver = new _2['default']({}, false);
      driver.sessionId = 'abc';
    });
    describe('#proxyActive', function () {
      it('should exist', function () {
        driver.proxyActive.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.proxyActive('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.proxyActive('aaa');
        }).should['throw'];
      });
    });

    describe('#getProxyAvoidList', function () {
      it('should exist', function () {
        driver.getProxyAvoidList.should.be.an['instanceof'](Function);
      });
      it('should return jwpProxyAvoid array', function () {
        var avoidList = driver.getProxyAvoidList('abc');
        avoidList.should.be.an['instanceof'](Array);
        avoidList.should.eql(driver.jwpProxyAvoid);
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.getProxyAvoidList('aaa');
        }).should['throw'];
      });
    });

    describe('#canProxy', function () {
      it('should exist', function () {
        driver.canProxy.should.be.an['instanceof'](Function);
      });
      it('should return true', function () {
        driver.canProxy('abc').should.be['true'];
      });
      it('should throw an error if session id is wrong', function () {
        (function () {
          driver.canProxy('aaa');
        }).should['throw'];
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
