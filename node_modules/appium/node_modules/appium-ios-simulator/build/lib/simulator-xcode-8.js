'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _simulatorXcode6 = require('./simulator-xcode-6');

var _simulatorXcode7 = require('./simulator-xcode-7');

var _simulatorXcode72 = _interopRequireDefault(_simulatorXcode7);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _asyncbox = require('asyncbox');

var _teen_process = require('teen_process');

var _nodeSimctl = require('node-simctl');

// these sims are sloooooooow
var STARTUP_TIMEOUT = 120 * 1000;

var SimulatorXcode8 = (function (_SimulatorXcode7) {
  _inherits(SimulatorXcode8, _SimulatorXcode7);

  function SimulatorXcode8(udid, xcodeVersion) {
    _classCallCheck(this, SimulatorXcode8);

    _get(Object.getPrototypeOf(SimulatorXcode8.prototype), 'constructor', this).call(this, udid, xcodeVersion);

    // list of files to check for when seeing if a simulator is "fresh"
    // (meaning it has never been booted).
    // If these files are present, we assume it's been successfully booted
    this.isFreshFiles = ['Library/Cookies', 'Library/Preferences/.GlobalPreferences.plist', 'Library/Preferences/com.apple.springboard.plist', 'var/run/syslog.pid'];
  }

  _createClass(SimulatorXcode8, [{
    key: 'isAppInstalled',
    value: function isAppInstalled(bundleId) {
      var appContainer;
      return _regeneratorRuntime.async(function isAppInstalled$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.getAppContainer)(this.udid, bundleId, false));

          case 3:
            appContainer = context$2$0.sent;
            return context$2$0.abrupt('return', appContainer.endsWith('.app'));

          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0['catch'](0);
            return context$2$0.abrupt('return', false);

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 7]]);
    }
  }, {
    key: 'waitForBoot',
    value: function waitForBoot(startupTimeout) {
      var startupTimestamp;
      return _regeneratorRuntime.async(function waitForBoot$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            startupTimestamp = process.hrtime();
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((function callee$2$0() {
              var isOnBootCompletedEmitted;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    isOnBootCompletedEmitted = false;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$3$0() {
                      var _ref, stdout;

                      return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                        while (1) switch (context$4$0.prev = context$4$0.next) {
                          case 0:
                            context$4$0.prev = 0;
                            context$4$0.next = 3;
                            return _regeneratorRuntime.awrap((0, _teen_process.exec)('bash', ['-c', 'ps axo command | grep Simulator | grep nsurlstoraged | grep -v bash | grep -v grep']));

                          case 3:
                            _ref = context$4$0.sent;
                            stdout = _ref.stdout;

                            if (!(stdout.trim().length > 0)) {
                              context$4$0.next = 10;
                              break;
                            }

                            if (!isOnBootCompletedEmitted) {
                              isOnBootCompletedEmitted = true;
                              this.emit(_simulatorXcode6.BOOT_COMPLETED_EVENT);
                            }
                            // 'springboard' process should be the last one to start after boot
                            // 'simctl launch' will block until this process is running
                            context$4$0.next = 9;
                            return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcrun', ['simctl', 'launch', this.udid, 'com.apple.springboard']));

                          case 9:
                            return context$4$0.abrupt('return', true);

                          case 10:
                            context$4$0.next = 14;
                            break;

                          case 12:
                            context$4$0.prev = 12;
                            context$4$0.t0 = context$4$0['catch'](0);

                          case 14:
                            return context$4$0.abrupt('return', false);

                          case 15:
                          case 'end':
                            return context$4$0.stop();
                        }
                      }, null, _this, [[0, 12]]);
                    }, { waitMs: startupTimeout, intervalMs: 500 }));

                  case 3:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2);
            })());

          case 4:
            context$2$0.next = 9;
            break;

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].errorAndThrow('Simulator is not booted after ' + process.hrtime(startupTimestamp)[0] + ' seconds');

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 6]]);
    }
  }, {
    key: 'openUrl',
    value: function openUrl(url) {
      var SAFARI_STARTUP_TIMEOUT, launchTimestamp;
      return _regeneratorRuntime.async(function openUrl$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            SAFARI_STARTUP_TIMEOUT = 15 * 1000;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.isRunning());

          case 3:
            if (context$2$0.sent) {
              context$2$0.next = 5;
              break;
            }

            throw new Error('Tried to open ' + url + ', but Simulator is not in Booted state');

          case 5:
            launchTimestamp = process.hrtime();
            context$2$0.prev = 6;
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$2$0() {
              var stdout, _ref2, _ref2$stdout;

              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    stdout = undefined;
                    context$3$0.prev = 2;
                    context$3$0.next = 5;
                    return _regeneratorRuntime.awrap((0, _teen_process.exec)('bash', ['-c', 'ps axo command | grep Simulator | grep MobileSafari | grep -v bash | grep -v grep']));

                  case 5:
                    _ref2 = context$3$0.sent;
                    _ref2$stdout = _ref2.stdout;

                    // jshint ignore:start
                    stdout = _ref2$stdout === undefined ? '' : _ref2$stdout;
                    context$3$0.next = 15;
                    break;

                  case 10:
                    context$3$0.prev = 10;
                    context$3$0.t0 = context$3$0['catch'](2);

                    if (!(context$3$0.t0.code !== 1)) {
                      context$3$0.next = 14;
                      break;
                    }

                    throw context$3$0.t0;

                  case 14:
                    stdout = '';

                  case 15:
                    if (!(stdout.trim().length > 0)) {
                      context$3$0.next = 20;
                      break;
                    }

                    context$3$0.next = 18;
                    return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcrun', ['simctl', 'openurl', this.udid, url]));

                  case 18:
                    context$3$0.next = 22;
                    break;

                  case 20:
                    context$3$0.next = 22;
                    return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcrun', ['simctl', 'launch', this.udid, 'com.apple.mobilesafari', url]));

                  case 22:
                    return context$3$0.abrupt('return', true);

                  case 25:
                    context$3$0.prev = 25;
                    context$3$0.t1 = context$3$0['catch'](0);

                    _logger2['default'].error('Failed to open \'' + url + '\' in Safari. Retrying...');

                  case 28:
                    return context$3$0.abrupt('return', false);

                  case 29:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3, [[0, 25], [2, 10]]);
            }, { waitMs: SAFARI_STARTUP_TIMEOUT, intervalMs: 500 }));

          case 9:
            context$2$0.next = 14;
            break;

          case 11:
            context$2$0.prev = 11;
            context$2$0.t0 = context$2$0['catch'](6);

            _logger2['default'].errorAndThrow('Safari cannot open \'' + url + '\' after ' + process.hrtime(launchTimestamp)[0] + ' seconds');

          case 14:
            _logger2['default'].debug('Safari has successfully opened \'' + url + '\' in ' + process.hrtime(launchTimestamp)[0] + ' seconds');

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[6, 11]]);
    }
  }, {
    key: 'startupTimeout',
    get: function get() {
      return STARTUP_TIMEOUT;
    }
  }]);

  return SimulatorXcode8;
})(_simulatorXcode72['default']);

exports['default'] = SimulatorXcode8;
module.exports = exports['default'];

// wait for the simulator to boot
// waiting for the simulator status to be 'booted' isn't good enough
// it claims to be booted way before finishing loading
// let's wait for the magic nsurlstoraged process, which signals the booting has been completed

// Continue iteration in case of error

// jshint ignore:end

// error code 1 can be thrown in normal situations when nothing is found

// Safari is already running. Open the url in the other tab

// Execute new Safari instance and open the url immediately
//# sourceMappingURL=data:application/json;charset=utf8;base64,
