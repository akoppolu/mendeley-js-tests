'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _simulatorXcode6 = require('./simulator-xcode-6');

var _simulatorXcode62 = _interopRequireDefault(_simulatorXcode6);

var _simulatorXcode7 = require('./simulator-xcode-7');

var _simulatorXcode72 = _interopRequireDefault(_simulatorXcode7);

var _simulatorXcode73 = require('./simulator-xcode-7.3');

var _simulatorXcode732 = _interopRequireDefault(_simulatorXcode73);

var _simulatorXcode8 = require('./simulator-xcode-8');

var _simulatorXcode82 = _interopRequireDefault(_simulatorXcode8);

var _utils = require('./utils');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function handleUnsupportedXcode(xcodeVersion) {
  if (xcodeVersion.major < 6) {
    throw new Error('Tried to use an iOS simulator with xcode ' + ('version ' + xcodeVersion.versionString + ' but only Xcode version ') + '6.0.0 and up are supported');
  } else if (xcodeVersion.major >= 9) {
    throw new Error('Xcode version ' + xcodeVersion.versionString + ' is ' + 'not yet supported');
  }
}

function getSimulator(udid) {
  var xcodeVersion;
  return _regeneratorRuntime.async(function getSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

      case 2:
        xcodeVersion = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _utils.simExists)(udid));

      case 5:
        if (context$1$0.sent) {
          context$1$0.next = 7;
          break;
        }

        throw new Error('No sim found with udid ' + udid);

      case 7:

        handleUnsupportedXcode(xcodeVersion);

        _logger2['default'].info('Constructing iOS simulator for Xcode version ' + xcodeVersion.versionString + ' ' + ('with udid \'' + udid + '\''));

        if (!(xcodeVersion.major === 6)) {
          context$1$0.next = 13;
          break;
        }

        return context$1$0.abrupt('return', new _simulatorXcode62['default'](udid, xcodeVersion));

      case 13:
        if (!(xcodeVersion.major >= 7 && xcodeVersion.major < 8)) {
          context$1$0.next = 21;
          break;
        }

        if (!(xcodeVersion.minor < 3)) {
          context$1$0.next = 18;
          break;
        }

        return context$1$0.abrupt('return', new _simulatorXcode72['default'](udid, xcodeVersion));

      case 18:
        return context$1$0.abrupt('return', new _simulatorXcode732['default'](udid, xcodeVersion));

      case 19:
        context$1$0.next = 23;
        break;

      case 21:
        if (!(xcodeVersion.major >= 8)) {
          context$1$0.next = 23;
          break;
        }

        return context$1$0.abrupt('return', new _simulatorXcode82['default'](udid, xcodeVersion));

      case 23:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getDeviceString(opts) {
  var xcodeVersion;
  return _regeneratorRuntime.async(function getDeviceString$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

      case 2:
        xcodeVersion = context$1$0.sent;

        handleUnsupportedXcode(xcodeVersion);

        _logger2['default'].info('Retrieving device name string for Xcode version ' + xcodeVersion.versionString);

        if (!(xcodeVersion.major === 8)) {
          context$1$0.next = 9;
          break;
        }

        return context$1$0.abrupt('return', _simulatorXcode72['default'].getDeviceString(opts));

      case 9:
        if (!(xcodeVersion.major === 7)) {
          context$1$0.next = 13;
          break;
        }

        return context$1$0.abrupt('return', _simulatorXcode72['default'].getDeviceString(opts));

      case 13:
        if (!(xcodeVersion.major === 6)) {
          context$1$0.next = 15;
          break;
        }

        return context$1$0.abrupt('return', _simulatorXcode62['default'].getDeviceString(opts));

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.getSimulator = getSimulator;
exports.getDeviceString = getDeviceString;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OzsrQkFBNEIscUJBQXFCOzs7OytCQUNyQixxQkFBcUI7Ozs7Z0NBQ3BCLHVCQUF1Qjs7OzsrQkFDeEIscUJBQXFCOzs7O3FCQUN2QixTQUFTOzsyQkFDakIsY0FBYzs7OztzQkFDaEIsVUFBVTs7OztBQUcxQixTQUFTLHNCQUFzQixDQUFFLFlBQVksRUFBRTtBQUM3QyxNQUFJLFlBQVksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO0FBQzFCLFVBQU0sSUFBSSxLQUFLLENBQUMsNERBQ1csWUFBWSxDQUFDLGFBQWEsOEJBQTBCLCtCQUNuQyxDQUFDLENBQUM7R0FDL0MsTUFBTSxJQUFJLFlBQVksQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFO0FBQ2xDLFVBQU0sSUFBSSxLQUFLLENBQUMsbUJBQWlCLFlBQVksQ0FBQyxhQUFhLCtCQUN4QixDQUFDLENBQUM7R0FDdEM7Q0FDRjs7QUFFRCxTQUFlLFlBQVksQ0FBRSxJQUFJO01BQzNCLFlBQVk7Ozs7O3lDQUFTLHlCQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUM7OztBQUEzQyxvQkFBWTs7eUNBRUwsc0JBQVUsSUFBSSxDQUFDOzs7Ozs7OztjQUNsQixJQUFJLEtBQUssNkJBQTJCLElBQUksQ0FBRzs7OztBQUduRCw4QkFBc0IsQ0FBQyxZQUFZLENBQUMsQ0FBQzs7QUFFckMsNEJBQUksSUFBSSxDQUFDLGtEQUFnRCxZQUFZLENBQUMsYUFBYSwyQkFDNUQsSUFBSSxRQUFHLENBQUMsQ0FBQzs7Y0FDNUIsWUFBWSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUE7Ozs7OzRDQUNuQixpQ0FBb0IsSUFBSSxFQUFFLFlBQVksQ0FBQzs7O2NBQ3JDLFlBQVksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLFlBQVksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFBOzs7OztjQUN0RCxZQUFZLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQTs7Ozs7NENBQ2pCLGlDQUFvQixJQUFJLEVBQUUsWUFBWSxDQUFDOzs7NENBRXZDLGtDQUFxQixJQUFJLEVBQUUsWUFBWSxDQUFDOzs7Ozs7O2NBRXhDLFlBQVksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFBOzs7Ozs0Q0FDekIsaUNBQW9CLElBQUksRUFBRSxZQUFZLENBQUM7Ozs7Ozs7Q0FFakQ7O0FBRUQsU0FBZSxlQUFlLENBQUUsSUFBSTtNQUM5QixZQUFZOzs7Ozt5Q0FBUyx5QkFBTSxVQUFVLENBQUMsSUFBSSxDQUFDOzs7QUFBM0Msb0JBQVk7O0FBRWhCLDhCQUFzQixDQUFDLFlBQVksQ0FBQyxDQUFDOztBQUVyQyw0QkFBSSxJQUFJLHNEQUFvRCxZQUFZLENBQUMsYUFBYSxDQUFHLENBQUM7O2NBQ3RGLFlBQVksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFBOzs7Ozs0Q0FDbkIsNkJBQWdCLGVBQWUsQ0FBQyxJQUFJLENBQUM7OztjQUNuQyxZQUFZLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQTs7Ozs7NENBQzFCLDZCQUFnQixlQUFlLENBQUMsSUFBSSxDQUFDOzs7Y0FDbkMsWUFBWSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUE7Ozs7OzRDQUMxQiw2QkFBZ0IsZUFBZSxDQUFDLElBQUksQ0FBQzs7Ozs7OztDQUUvQzs7UUFFUSxZQUFZLEdBQVosWUFBWTtRQUFFLGVBQWUsR0FBZixlQUFlIiwiZmlsZSI6ImxpYi9zaW11bGF0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2ltdWxhdG9yWGNvZGU2IGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTYnO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlNyBmcm9tICcuL3NpbXVsYXRvci14Y29kZS03JztcbmltcG9ydCBTaW11bGF0b3JYY29kZTczIGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTcuMyc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGU4IGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTgnO1xuaW1wb3J0IHsgc2ltRXhpc3RzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeGNvZGUgZnJvbSAnYXBwaXVtLXhjb2RlJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5cbmZ1bmN0aW9uIGhhbmRsZVVuc3VwcG9ydGVkWGNvZGUgKHhjb2RlVmVyc2lvbikge1xuICBpZiAoeGNvZGVWZXJzaW9uLm1ham9yIDwgNikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVHJpZWQgdG8gdXNlIGFuIGlPUyBzaW11bGF0b3Igd2l0aCB4Y29kZSBgICtcbiAgICAgICAgICAgICAgICAgICAgYHZlcnNpb24gJHt4Y29kZVZlcnNpb24udmVyc2lvblN0cmluZ30gYnV0IG9ubHkgWGNvZGUgdmVyc2lvbiBgICtcbiAgICAgICAgICAgICAgICAgICAgYDYuMC4wIGFuZCB1cCBhcmUgc3VwcG9ydGVkYCk7XG4gIH0gZWxzZSBpZiAoeGNvZGVWZXJzaW9uLm1ham9yID49IDkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFhjb2RlIHZlcnNpb24gJHt4Y29kZVZlcnNpb24udmVyc2lvblN0cmluZ30gaXMgYCArXG4gICAgICAgICAgICAgICAgICAgIGBub3QgeWV0IHN1cHBvcnRlZGApO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNpbXVsYXRvciAodWRpZCkge1xuICBsZXQgeGNvZGVWZXJzaW9uID0gYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbih0cnVlKTtcblxuICBpZiAoIWF3YWl0IHNpbUV4aXN0cyh1ZGlkKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm8gc2ltIGZvdW5kIHdpdGggdWRpZCAke3VkaWR9YCk7XG4gIH1cblxuICBoYW5kbGVVbnN1cHBvcnRlZFhjb2RlKHhjb2RlVmVyc2lvbik7XG5cbiAgbG9nLmluZm8oYENvbnN0cnVjdGluZyBpT1Mgc2ltdWxhdG9yIGZvciBYY29kZSB2ZXJzaW9uICR7eGNvZGVWZXJzaW9uLnZlcnNpb25TdHJpbmd9IGAgK1xuICAgICAgICAgICBgd2l0aCB1ZGlkICcke3VkaWR9J2ApO1xuICBpZiAoeGNvZGVWZXJzaW9uLm1ham9yID09PSA2KSB7XG4gICAgcmV0dXJuIG5ldyBTaW11bGF0b3JYY29kZTYodWRpZCwgeGNvZGVWZXJzaW9uKTtcbiAgfSBlbHNlIGlmICh4Y29kZVZlcnNpb24ubWFqb3IgPj0gNyAmJiB4Y29kZVZlcnNpb24ubWFqb3IgPCA4KSB7XG4gICAgaWYgKHhjb2RlVmVyc2lvbi5taW5vciA8IDMpIHtcbiAgICAgIHJldHVybiBuZXcgU2ltdWxhdG9yWGNvZGU3KHVkaWQsIHhjb2RlVmVyc2lvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgU2ltdWxhdG9yWGNvZGU3Myh1ZGlkLCB4Y29kZVZlcnNpb24pO1xuICAgIH1cbiAgfSBlbHNlIGlmICh4Y29kZVZlcnNpb24ubWFqb3IgPj0gOCkge1xuICAgIHJldHVybiBuZXcgU2ltdWxhdG9yWGNvZGU4KHVkaWQsIHhjb2RlVmVyc2lvbik7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RGV2aWNlU3RyaW5nIChvcHRzKSB7XG4gIGxldCB4Y29kZVZlcnNpb24gPSBhd2FpdCB4Y29kZS5nZXRWZXJzaW9uKHRydWUpO1xuXG4gIGhhbmRsZVVuc3VwcG9ydGVkWGNvZGUoeGNvZGVWZXJzaW9uKTtcblxuICBsb2cuaW5mbyhgUmV0cmlldmluZyBkZXZpY2UgbmFtZSBzdHJpbmcgZm9yIFhjb2RlIHZlcnNpb24gJHt4Y29kZVZlcnNpb24udmVyc2lvblN0cmluZ31gKTtcbiAgaWYgKHhjb2RlVmVyc2lvbi5tYWpvciA9PT0gOCkge1xuICAgIHJldHVybiBTaW11bGF0b3JYY29kZTcuZ2V0RGV2aWNlU3RyaW5nKG9wdHMpO1xuICB9IGVsc2UgaWYgKHhjb2RlVmVyc2lvbi5tYWpvciA9PT0gNykge1xuICAgIHJldHVybiBTaW11bGF0b3JYY29kZTcuZ2V0RGV2aWNlU3RyaW5nKG9wdHMpO1xuICB9IGVsc2UgaWYgKHhjb2RlVmVyc2lvbi5tYWpvciA9PT0gNikge1xuICAgIHJldHVybiBTaW11bGF0b3JYY29kZTYuZ2V0RGV2aWNlU3RyaW5nKG9wdHMpO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldFNpbXVsYXRvciwgZ2V0RGV2aWNlU3RyaW5nIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
