'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _remoteDebuggerServer = require('./remote-debugger-server');

function withConnectedServer(rds, fn) {
  var _this = this;

  // `rds` is a hack to allow us to
  return function () {
    var server = new _remoteDebuggerServer.RemoteDebuggerServer();

    beforeEach(function callee$2$0() {
      var rd;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.start());

          case 2:
            rd = rds[0];
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(rd.connect());

          case 5:

            // simulate selecting app and page
            rd.appIdKey = 1;
            rd.pageIdKey = 1;

            // set a really low page load timeout,
            // so we don't wait around too much
            rd.pageLoadMs = 10;

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.stop());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    fn(server);
  };
}

function withUnconnectedServer(fn) {
  var _this2 = this;

  return function () {
    var server = new _remoteDebuggerServer.RemoteDebuggerServer();

    beforeEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.start());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.stop());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
    fn(server);
  };
}

exports.withConnectedServer = withConnectedServer;
exports.withUnconnectedServer = withUnconnectedServer;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaGVscGVycy9zZXJ2ZXItc2V0dXAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7b0NBQXFDLDBCQUEwQjs7QUFHL0QsU0FBUyxtQkFBbUIsQ0FBRSxHQUFHLEVBQUUsRUFBRSxFQUFFOzs7O0FBRXJDLFNBQU8sWUFBTTtBQUNYLFFBQUksTUFBTSxHQUFHLGdEQUEwQixDQUFDOztBQUV4QyxjQUFVLENBQUM7VUFFTCxFQUFFOzs7Ozs2Q0FEQSxNQUFNLENBQUMsS0FBSyxFQUFFOzs7QUFDaEIsY0FBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7OzZDQUNULEVBQUUsQ0FBQyxPQUFPLEVBQUU7Ozs7O0FBR2xCLGNBQUUsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLGNBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDOzs7O0FBSWpCLGNBQUUsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDOzs7Ozs7O0tBQ3BCLENBQUMsQ0FBQztBQUNILGFBQVMsQ0FBQzs7Ozs7NkNBQ0YsTUFBTSxDQUFDLElBQUksRUFBRTs7Ozs7OztLQUNwQixDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDWixDQUFDO0NBQ0g7O0FBRUQsU0FBUyxxQkFBcUIsQ0FBRSxFQUFFLEVBQUU7OztBQUNsQyxTQUFPLFlBQU07QUFDWCxRQUFJLE1BQU0sR0FBRyxnREFBMEIsQ0FBQzs7QUFFeEMsY0FBVSxDQUFDOzs7Ozs2Q0FDSCxNQUFNLENBQUMsS0FBSyxFQUFFOzs7Ozs7O0tBQ3JCLENBQUMsQ0FBQztBQUNILGFBQVMsQ0FBQzs7Ozs7NkNBQ0YsTUFBTSxDQUFDLElBQUksRUFBRTs7Ozs7OztLQUNwQixDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDWixDQUFDO0NBQ0g7O1FBRVEsbUJBQW1CLEdBQW5CLG1CQUFtQjtRQUFFLHFCQUFxQixHQUFyQixxQkFBcUIiLCJmaWxlIjoidGVzdC9oZWxwZXJzL3NlcnZlci1zZXR1cC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbW90ZURlYnVnZ2VyU2VydmVyIH0gZnJvbSAnLi9yZW1vdGUtZGVidWdnZXItc2VydmVyJztcblxuXG5mdW5jdGlvbiB3aXRoQ29ubmVjdGVkU2VydmVyIChyZHMsIGZuKSB7XG4gIC8vIGByZHNgIGlzIGEgaGFjayB0byBhbGxvdyB1cyB0b1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGxldCBzZXJ2ZXIgPSBuZXcgUmVtb3RlRGVidWdnZXJTZXJ2ZXIoKTtcblxuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgc2VydmVyLnN0YXJ0KCk7XG4gICAgICBsZXQgcmQgPSByZHNbMF07XG4gICAgICBhd2FpdCByZC5jb25uZWN0KCk7XG5cbiAgICAgIC8vIHNpbXVsYXRlIHNlbGVjdGluZyBhcHAgYW5kIHBhZ2VcbiAgICAgIHJkLmFwcElkS2V5ID0gMTtcbiAgICAgIHJkLnBhZ2VJZEtleSA9IDE7XG5cbiAgICAgIC8vIHNldCBhIHJlYWxseSBsb3cgcGFnZSBsb2FkIHRpbWVvdXQsXG4gICAgICAvLyBzbyB3ZSBkb24ndCB3YWl0IGFyb3VuZCB0b28gbXVjaFxuICAgICAgcmQucGFnZUxvYWRNcyA9IDEwO1xuICAgIH0pO1xuICAgIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBzZXJ2ZXIuc3RvcCgpO1xuICAgIH0pO1xuICAgIGZuKHNlcnZlcik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHdpdGhVbmNvbm5lY3RlZFNlcnZlciAoZm4pIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBsZXQgc2VydmVyID0gbmV3IFJlbW90ZURlYnVnZ2VyU2VydmVyKCk7XG5cbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHNlcnZlci5zdGFydCgpO1xuICAgIH0pO1xuICAgIGFmdGVyRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBzZXJ2ZXIuc3RvcCgpO1xuICAgIH0pO1xuICAgIGZuKHNlcnZlcik7XG4gIH07XG59XG5cbmV4cG9ydCB7IHdpdGhDb25uZWN0ZWRTZXJ2ZXIsIHdpdGhVbmNvbm5lY3RlZFNlcnZlciB9O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
