require('source-map-support').install();

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _appiumSupport = require('appium-support');

var log = _appiumSupport.logger.getLogger('RemoteDebugger');
var WebSocketServer = _ws2['default'].Server;

// fake server for allowing both http requests and
// websocket requests, as needed to test Appium's
// version of webkit remote debugging support

var WebKitRemoteDebuggerServer = (function () {
  function WebKitRemoteDebuggerServer() {
    _classCallCheck(this, WebKitRemoteDebuggerServer);

    this.server = null;
    this.websocketServer = null;
    this.nextResponse = null;
  }

  // start the server
  // if a websocket server is needed, pass in `true`

  _createClass(WebKitRemoteDebuggerServer, [{
    key: 'start',
    value: function start() {
      var ws = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (ws) {
              context$2$0.next = 4;
              break;
            }

            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve) {
              _this.server = _http2['default'].createServer(function (req, res) {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                if (_this.nextResponse) {
                  res.end(JSON.stringify(_this.nextResponse));
                  _this.nextResponse = null;
                } else {
                  res.end(JSON.stringify({ id: 2, type: 'real' }));
                }
              });
              _this.server.listen(1337, 'localhost', resolve);
              log.debug('Server running at http://localhost:1337/');
            }));

          case 4:
            // need a fake websocket server
            // but it doesn't need to do anything but connect and disconnect
            this.ws = true;
            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve) {
              _this.server = new WebSocketServer({ host: 'localhost', port: 1337 }, resolve);
            }));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // stop one or both of the servers.
  }, {
    key: 'stop',
    value: function stop() {
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.ws) {
              context$2$0.next = 4;
              break;
            }

            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve) {
              if (_this2.server) {
                _this2.server.close(function (err) {
                  resolve('Stopped listening: ' + err);
                });
              } else {
                resolve('Not listening.');
              }
            }));

          case 4:
            // websocket server isn't asynchronous
            this.server.close();
            return context$2$0.abrupt('return', _bluebird2['default'].resolve());

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // set what the next call to the http server will respond with
  }, {
    key: 'respondWith',
    value: function respondWith(response) {
      this.nextResponse = response;
    }
  }]);

  return WebKitRemoteDebuggerServer;
})();

exports.WebKitRemoteDebuggerServer = WebKitRemoteDebuggerServer;

// just need a simple http server for non-websocket calls
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaGVscGVycy93ZWJraXQtcmVtb3RlLWRlYnVnZ2VyLXNlcnZlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O29CQUVpQixNQUFNOzs7O3dCQUNILFVBQVU7Ozs7a0JBQ2YsSUFBSTs7Ozs2QkFDSSxnQkFBZ0I7O0FBRXZDLElBQU0sR0FBRyxHQUFHLHNCQUFPLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQy9DLElBQUksZUFBZSxHQUFHLGdCQUFHLE1BQU0sQ0FBQzs7Ozs7O0lBTTFCLDBCQUEwQjtBQUNsQixXQURSLDBCQUEwQixHQUNmOzBCQURYLDBCQUEwQjs7QUFFNUIsUUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDbkIsUUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7QUFDNUIsUUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7R0FDMUI7Ozs7O2VBTEcsMEJBQTBCOztXQVNsQjtVQUFDLEVBQUUseURBQUcsS0FBSzs7Ozs7O2dCQUNoQixFQUFFOzs7OztnREFFRSwwQkFBWSxVQUFDLE9BQU8sRUFBSztBQUM5QixvQkFBSyxNQUFNLEdBQUcsa0JBQUssWUFBWSxDQUFDLFVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBSztBQUM1QyxtQkFBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBQyxjQUFjLEVBQUUsa0JBQWtCLEVBQUMsQ0FBQyxDQUFDO0FBQ3pELG9CQUFJLE1BQUssWUFBWSxFQUFFO0FBQ3JCLHFCQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBSyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQzNDLHdCQUFLLFlBQVksR0FBRyxJQUFJLENBQUM7aUJBQzFCLE1BQU07QUFDTCxxQkFBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNoRDtlQUNGLENBQUMsQ0FBQztBQUNILG9CQUFLLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMvQyxpQkFBRyxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO2FBQ3ZELENBQUM7Ozs7O0FBSUYsZ0JBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dEQUNSLDBCQUFZLFVBQUMsT0FBTyxFQUFLO0FBQzlCLG9CQUFLLE1BQU0sR0FBRyxJQUFJLGVBQWUsQ0FBQyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQzdFLENBQUM7Ozs7Ozs7S0FFTDs7Ozs7V0FHVTs7Ozs7O2dCQUNKLElBQUksQ0FBQyxFQUFFOzs7OztnREFDSCwwQkFBWSxVQUFDLE9BQU8sRUFBSztBQUM5QixrQkFBSSxPQUFLLE1BQU0sRUFBRTtBQUNmLHVCQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHLEVBQUs7QUFDekIseUJBQU8seUJBQXVCLEdBQUcsQ0FBRyxDQUFDO2lCQUN0QyxDQUFDLENBQUM7ZUFDSixNQUFNO0FBQ0wsdUJBQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2VBQzNCO2FBQ0YsQ0FBQzs7OztBQUdGLGdCQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2dEQUNiLHNCQUFRLE9BQU8sRUFBRTs7Ozs7OztLQUUzQjs7Ozs7V0FHVyxxQkFBQyxRQUFRLEVBQUU7QUFDckIsVUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUM7S0FDOUI7OztTQXpERywwQkFBMEI7OztRQTREdkIsMEJBQTBCLEdBQTFCLDBCQUEwQiIsImZpbGUiOiJ0ZXN0L2hlbHBlcnMvd2Via2l0LXJlbW90ZS1kZWJ1Z2dlci1zZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bWFpblxuXG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB3cyBmcm9tICd3cyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cbmNvbnN0IGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ1JlbW90ZURlYnVnZ2VyJyk7XG5sZXQgV2ViU29ja2V0U2VydmVyID0gd3MuU2VydmVyO1xuXG5cbi8vIGZha2Ugc2VydmVyIGZvciBhbGxvd2luZyBib3RoIGh0dHAgcmVxdWVzdHMgYW5kXG4vLyB3ZWJzb2NrZXQgcmVxdWVzdHMsIGFzIG5lZWRlZCB0byB0ZXN0IEFwcGl1bSdzXG4vLyB2ZXJzaW9uIG9mIHdlYmtpdCByZW1vdGUgZGVidWdnaW5nIHN1cHBvcnRcbmNsYXNzIFdlYktpdFJlbW90ZURlYnVnZ2VyU2VydmVyIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuc2VydmVyID0gbnVsbDtcbiAgICB0aGlzLndlYnNvY2tldFNlcnZlciA9IG51bGw7XG4gICAgdGhpcy5uZXh0UmVzcG9uc2UgPSBudWxsO1xuICB9XG5cbiAgLy8gc3RhcnQgdGhlIHNlcnZlclxuICAvLyBpZiBhIHdlYnNvY2tldCBzZXJ2ZXIgaXMgbmVlZGVkLCBwYXNzIGluIGB0cnVlYFxuICBhc3luYyBzdGFydCAod3MgPSBmYWxzZSkge1xuICAgIGlmICghd3MpIHtcbiAgICAgIC8vIGp1c3QgbmVlZCBhIHNpbXBsZSBodHRwIHNlcnZlciBmb3Igbm9uLXdlYnNvY2tldCBjYWxsc1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRoaXMuc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgICAgcmVzLndyaXRlSGVhZCgyMDAsIHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSk7XG4gICAgICAgICAgaWYgKHRoaXMubmV4dFJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHRoaXMubmV4dFJlc3BvbnNlKSk7XG4gICAgICAgICAgICB0aGlzLm5leHRSZXNwb25zZSA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoe2lkOiAyLCB0eXBlOiAncmVhbCd9KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXJ2ZXIubGlzdGVuKDEzMzcsICdsb2NhbGhvc3QnLCByZXNvbHZlKTtcbiAgICAgICAgbG9nLmRlYnVnKCdTZXJ2ZXIgcnVubmluZyBhdCBodHRwOi8vbG9jYWxob3N0OjEzMzcvJyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbmVlZCBhIGZha2Ugd2Vic29ja2V0IHNlcnZlclxuICAgICAgLy8gYnV0IGl0IGRvZXNuJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBidXQgY29ubmVjdCBhbmQgZGlzY29ubmVjdFxuICAgICAgdGhpcy53cyA9IHRydWU7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBuZXcgV2ViU29ja2V0U2VydmVyKHtob3N0OiAnbG9jYWxob3N0JywgcG9ydDogMTMzN30sIHJlc29sdmUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gc3RvcCBvbmUgb3IgYm90aCBvZiB0aGUgc2VydmVycy5cbiAgYXN5bmMgc3RvcCAoKSB7XG4gICAgaWYgKCF0aGlzLndzKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc2VydmVyKSB7XG4gICAgICAgICAgdGhpcy5zZXJ2ZXIuY2xvc2UoKGVycikgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShgU3RvcHBlZCBsaXN0ZW5pbmc6ICR7ZXJyfWApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoJ05vdCBsaXN0ZW5pbmcuJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB3ZWJzb2NrZXQgc2VydmVyIGlzbid0IGFzeW5jaHJvbm91c1xuICAgICAgdGhpcy5zZXJ2ZXIuY2xvc2UoKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgd2hhdCB0aGUgbmV4dCBjYWxsIHRvIHRoZSBodHRwIHNlcnZlciB3aWxsIHJlc3BvbmQgd2l0aFxuICByZXNwb25kV2l0aCAocmVzcG9uc2UpIHtcbiAgICB0aGlzLm5leHRSZXNwb25zZSA9IHJlc3BvbnNlO1xuICB9XG59XG5cbmV4cG9ydCB7IFdlYktpdFJlbW90ZURlYnVnZ2VyU2VydmVyIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
