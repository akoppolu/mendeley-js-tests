require('source-map-support').install();

// jshint ignore: start
'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$values = require('babel-runtime/core-js/object/values')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumBaseDriver = require('appium-base-driver');

var _remoteDebuggerRpcClient = require('./remote-debugger-rpc-client');

var _remoteDebuggerRpcClient2 = _interopRequireDefault(_remoteDebuggerRpcClient);

var _messageHandlers = require('./message-handlers');

var _messageHandlers2 = _interopRequireDefault(_messageHandlers);

var _helpers = require('./helpers');

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var DEBUGGER_TYPES = {
  webkit: 1,
  webinspector: 2
};
var SELECT_APP_RETRIES = 20;
var REMOTE_DEBUGGER_PORT = 27753;

/* How many milliseconds to wait for webkit to return a response before timing out */
var RPC_RESPONSE_TIMEOUT_MS = 5000;

var RemoteDebugger = (function (_events$EventEmitter) {
  _inherits(RemoteDebugger, _events$EventEmitter);

  /*
   * The constructor takes an opts hash with the following properties:
   *   - bundleId - id of the app being connected to
   *   - platformVersion - version of iOS
   *   - debuggerType - one of the DEBUGGER_TYPES
   *   - useNewSafari - for web inspector, whether this is a new Safari instance
   *   - pageLoadMs - the time, in ms, that should be waited for page loading
   *   - host - the remote debugger's host address
   *   - port - the remote debugger port through which to communicate
   */

  function RemoteDebugger() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, RemoteDebugger);

    _get(Object.getPrototypeOf(RemoteDebugger.prototype), 'constructor', this).call(this);

    var bundleId = opts.bundleId;
    var platformVersion = opts.platformVersion;
    var debuggerType = opts.debuggerType;
    var useNewSafari = opts.useNewSafari;
    var pageLoadMs = opts.pageLoadMs;
    var host = opts.host;
    var port = opts.port;

    this.bundleId = bundleId;
    this.platformVersion = platformVersion;
    this.debuggerType = debuggerType || DEBUGGER_TYPES.webinspector;
    if (this.debuggerType === DEBUGGER_TYPES.webinspector) {
      this.useNewSafari = useNewSafari || false;
      this.pageLoadMs = pageLoadMs;
      _logger2['default'].debug('useNewSafari --> ' + this.useNewSafari);
    }

    this.host = host || 'localhost';
    this.port = port || REMOTE_DEBUGGER_PORT;
  }

  // event emitted publically

  _createClass(RemoteDebugger, [{
    key: 'setup',
    value: function setup() {
      // app handling configuration
      this.appDict = {};
      this.appIdKey = null;
      this.pageIdKey = null;
      this.pageLoading = false;

      // set up the special callbacks for handling rd events
      this.specialCbs = {
        '_rpc_reportIdentifier:': _lodash2['default'].noop,
        '_rpc_forwardGetListing:': this.onPageChange.bind(this),
        '_rpc_reportConnectedApplicationList:': _lodash2['default'].noop,
        '_rpc_applicationConnected:': this.onAppConnect.bind(this),
        '_rpc_applicationDisconnected:': this.onAppDisconnect.bind(this),
        '_rpc_applicationUpdated:': this.onAppUpdate.bind(this),
        '_rpc_reportConnectedDriverList:': this.onReportDriverList.bind(this),
        'pageLoad': this.pageLoad.bind(this)
      };

      this.rpcClient = null;
    }
  }, {
    key: 'teardown',
    value: function teardown() {
      _logger2['default'].debug('Cleaning up listeners');

      this.appDict = {};
      this.appIdKey = null;
      this.pageIdKey = null;
      this.pageLoading = false;

      this.specialCbs = {};

      this.rpcClient = null;
    }
  }, {
    key: 'connect',
    value: function connect() {
      var appInfo;
      return _regeneratorRuntime.async(function connect$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.setup();

            // initialize the rpc client for
            this.rpcClient = new _remoteDebuggerRpcClient2['default'](this.host, this.port, this.specialCbs);
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.rpcClient.connect());

          case 4:
            context$2$0.prev = 4;
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.setConnectionKey());

          case 7:
            appInfo = context$2$0.sent;

            _logger2['default'].debug('Connected to application');
            return context$2$0.abrupt('return', appInfo);

          case 12:
            context$2$0.prev = 12;
            context$2$0.t0 = context$2$0['catch'](4);
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.disconnect());

          case 16:
            return context$2$0.abrupt('return', null);

          case 17:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[4, 12]]);
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      return _regeneratorRuntime.async(function disconnect$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.rpcClient.disconnect());

          case 2:
            this.teardown();
            this.emit(RemoteDebugger.EVENT_DISCONNECT, true);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'isConnected',
    value: function isConnected() {
      return !!(this.rpcClient && this.rpcClient.isConnected());
    }
  }, {
    key: 'logApplicationDictionary',
    value: function logApplicationDictionary(apps) {
      function getValueString(key, value) {
        if (_lodash2['default'].isFunction(value)) {
          return '[Function]';
        }
        if (key === 'pageDict' && !_lodash2['default'].isArray(value)) {
          return '"Waiting for data"';
        }
        return JSON.stringify(value);
      }
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(_lodash2['default'].toPairs(apps)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2);

          var app = _step$value[0];
          var info = _step$value[1];

          _logger2['default'].debug('Application: \'' + app + '\'');
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = _getIterator(_lodash2['default'].toPairs(info)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _step2$value = _slicedToArray(_step2.value, 2);

              var key = _step2$value[0];
              var value = _step2$value[1];

              var valueString = getValueString(key, value);
              _logger2['default'].debug('    ' + key + ': ' + valueString);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                _iterator2['return']();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: 'setConnectionKey',
    value: function setConnectionKey() {
      return _regeneratorRuntime.async(function setConnectionKey$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              // local callback, called when the remote debugger has established
              // a connection to the app under test
              // `app` will be an array of dictionaries of app information
              var connectCb = function connectCb(apps) {
                if (_lodash2['default'].isUndefined(apps) || _lodash2['default'].keys(apps).length === 0) {
                  _logger2['default'].debug('Received no apps from remote debugger. Unable to connect.');
                  return resolve(_this.appDict);
                }
                var newDict = {};

                // translate the received information into an easier-to-manage
                // hash with app id as key, and app info as value
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = _getIterator(_lodash2['default'].values(apps)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var dict = _step3.value;

                    var _appInfoFromDict = (0, _helpers.appInfoFromDict)(dict);

                    var _appInfoFromDict2 = _slicedToArray(_appInfoFromDict, 2);

                    var id = _appInfoFromDict2[0];
                    var entry = _appInfoFromDict2[1];

                    newDict[id] = entry;
                  }
                  // update the object's list of apps, and return it through the promise
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                      _iterator3['return']();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }

                _lodash2['default'].defaults(_this.appDict, newDict);
                resolve(newDict);
              };
              _this.rpcClient.setSpecialMessageHandler('_rpc_reportConnectedApplicationList:', reject, connectCb);

              _logger2['default'].debug('Sending connection key request');
              return (function callee$3$0() {
                var _ref, _ref2, simNameKey, simBuildKey, simPlatformVersion;

                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      context$4$0.next = 2;
                      return _regeneratorRuntime.awrap(this.rpcClient.send('setConnectionKey'));

                    case 2:
                      _ref = context$4$0.sent;
                      _ref2 = _slicedToArray(_ref, 3);
                      simNameKey = _ref2[0];
                      simBuildKey = _ref2[1];
                      simPlatformVersion = _ref2[2];

                      _logger2['default'].debug('Sim name: ' + simNameKey);
                      _logger2['default'].debug('Sim build: ' + simBuildKey);
                      _logger2['default'].debug('Sim platform version: ' + simPlatformVersion);

                    case 10:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this);
              })();
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'updateAppsWithDict',
    value: function updateAppsWithDict(dict) {
      // get the dictionary entry into a nice form, and add it to the
      // application dictionary
      this.appDict = this.appDict || {};

      var _appInfoFromDict3 = (0, _helpers.appInfoFromDict)(dict);

      var _appInfoFromDict32 = _slicedToArray(_appInfoFromDict3, 2);

      var id = _appInfoFromDict32[0];
      var entry = _appInfoFromDict32[1];

      if (this.appDict[id]) {
        // preserve the page dictionary for this entry
        entry.pageDict = this.appDict[id].pageDict;
      }
      this.appDict[id] = entry;

      // add a promise to get the page dictionary
      if (_lodash2['default'].isUndefined(entry.pageDict)) {
        entry.pageDict = (0, _helpers.deferredPromise)();
      }

      _logger2['default'].debug('Current applications available:');
      this.logApplicationDictionary(this.appDict);

      // try to get the app id from our connected apps
      if (!this.appIdKey) {
        this.appIdKey = (0, _helpers.getDebuggerAppKey)(this.bundleId, this.platformVersion, this.appDict);
      }
    }
  }, {
    key: 'selectApp',
    value: function selectApp() {
      var currentUrl = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
      var maxTries = arguments.length <= 1 || arguments[1] === undefined ? SELECT_APP_RETRIES : arguments[1];
      var ignoreAboutBlankUrl = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

      var pageDict, appIdKey, i, possibleAppIds, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, attemptedAppIdKey, _ref3, _ref32, found, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, appDict, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, dict, pagePromises, pageArray, fullPageArray, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, _step7$value, app, info, id, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, page, _pageDict;

      return _regeneratorRuntime.async(function selectApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Selecting application');

            if (!(!this.appDict || _lodash2['default'].keys(this.appDict).length === 0)) {
              context$2$0.next = 4;
              break;
            }

            _logger2['default'].debug('No applications currently connected.');
            return context$2$0.abrupt('return', []);

          case 4:
            pageDict = undefined, appIdKey = undefined;
            i = 0;

          case 6:
            if (!(i < maxTries)) {
              context$2$0.next = 114;
              break;
            }

            possibleAppIds = (0, _helpers.getPossibleDebuggerAppKeys)(this.bundleId, this.platformVersion, this.appDict);

            _logger2['default'].debug('Trying out the possible app ids: ' + possibleAppIds.join(', '));
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            context$2$0.prev = 12;
            _iterator4 = _getIterator(possibleAppIds);

          case 14:
            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
              context$2$0.next = 97;
              break;
            }

            attemptedAppIdKey = _step4.value;
            context$2$0.prev = 16;

            _logger2['default'].debug('Selecting app ' + attemptedAppIdKey + ' (try #' + (i + 1) + ' of ' + maxTries + ')');
            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.rpcClient.selectApp(attemptedAppIdKey, this.onAppConnect.bind(this)));

          case 20:
            _ref3 = context$2$0.sent;
            _ref32 = _slicedToArray(_ref3, 2);
            appIdKey = _ref32[0];
            pageDict = _ref32[1];

            if (!_lodash2['default'].isEmpty(pageDict)) {
              context$2$0.next = 27;
              break;
            }

            _logger2['default'].debug('Empty page dictionary received. Trying again.');
            return context$2$0.abrupt('continue', 94);

          case 27:

            // save the page array for this app
            this.appDict[appIdKey].pageDict = (0, _helpers.pageArrayFromDict)(pageDict);

            // if we are looking for a particular url, make sure we have the right page. Ignore empty or undefined urls. Ignore about:blank if requested.
            found = false;
            _iteratorNormalCompletion5 = true;
            _didIteratorError5 = false;
            _iteratorError5 = undefined;
            context$2$0.prev = 32;
            _iterator5 = _getIterator(_lodash2['default'].values(this.appDict));

          case 34:
            if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
              context$2$0.next = 70;
              break;
            }

            appDict = _step5.value;

            if (!found) {
              context$2$0.next = 38;
              break;
            }

            return context$2$0.abrupt('break', 70);

          case 38:
            _iteratorNormalCompletion6 = true;
            _didIteratorError6 = false;
            _iteratorError6 = undefined;
            context$2$0.prev = 41;
            _iterator6 = _getIterator(appDict.pageDict || []);

          case 43:
            if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
              context$2$0.next = 53;
              break;
            }

            dict = _step6.value;

            if (!((!ignoreAboutBlankUrl || dict.url !== 'about:blank') && (!currentUrl || dict.url === currentUrl))) {
              context$2$0.next = 50;
              break;
            }

            // save where we found the right page
            appIdKey = appDict.id;
            pageDict = dict;
            found = true;
            return context$2$0.abrupt('break', 70);

          case 50:
            _iteratorNormalCompletion6 = true;
            context$2$0.next = 43;
            break;

          case 53:
            context$2$0.next = 59;
            break;

          case 55:
            context$2$0.prev = 55;
            context$2$0.t0 = context$2$0['catch'](41);
            _didIteratorError6 = true;
            _iteratorError6 = context$2$0.t0;

          case 59:
            context$2$0.prev = 59;
            context$2$0.prev = 60;

            if (!_iteratorNormalCompletion6 && _iterator6['return']) {
              _iterator6['return']();
            }

          case 62:
            context$2$0.prev = 62;

            if (!_didIteratorError6) {
              context$2$0.next = 65;
              break;
            }

            throw _iteratorError6;

          case 65:
            return context$2$0.finish(62);

          case 66:
            return context$2$0.finish(59);

          case 67:
            _iteratorNormalCompletion5 = true;
            context$2$0.next = 34;
            break;

          case 70:
            context$2$0.next = 76;
            break;

          case 72:
            context$2$0.prev = 72;
            context$2$0.t1 = context$2$0['catch'](32);
            _didIteratorError5 = true;
            _iteratorError5 = context$2$0.t1;

          case 76:
            context$2$0.prev = 76;
            context$2$0.prev = 77;

            if (!_iteratorNormalCompletion5 && _iterator5['return']) {
              _iterator5['return']();
            }

          case 79:
            context$2$0.prev = 79;

            if (!_didIteratorError5) {
              context$2$0.next = 82;
              break;
            }

            throw _iteratorError5;

          case 82:
            return context$2$0.finish(79);

          case 83:
            return context$2$0.finish(76);

          case 84:
            if (found) {
              context$2$0.next = 88;
              break;
            }

            _logger2['default'].debug('Received app, but expected url (\'' + currentUrl + '\') was not found. Trying again.');
            pageDict = null;
            return context$2$0.abrupt('continue', 94);

          case 88:
            return context$2$0.abrupt('break', 114);

          case 91:
            context$2$0.prev = 91;
            context$2$0.t2 = context$2$0['catch'](16);

            _logger2['default'].debug('Error checking application: \'' + context$2$0.t2 + '\'. Retrying connection');

          case 94:
            _iteratorNormalCompletion4 = true;
            context$2$0.next = 14;
            break;

          case 97:
            context$2$0.next = 103;
            break;

          case 99:
            context$2$0.prev = 99;
            context$2$0.t3 = context$2$0['catch'](12);
            _didIteratorError4 = true;
            _iteratorError4 = context$2$0.t3;

          case 103:
            context$2$0.prev = 103;
            context$2$0.prev = 104;

            if (!_iteratorNormalCompletion4 && _iterator4['return']) {
              _iterator4['return']();
            }

          case 106:
            context$2$0.prev = 106;

            if (!_didIteratorError4) {
              context$2$0.next = 109;
              break;
            }

            throw _iteratorError4;

          case 109:
            return context$2$0.finish(106);

          case 110:
            return context$2$0.finish(103);

          case 111:
            i++;
            context$2$0.next = 6;
            break;

          case 114:

            // if, after all this, we have no dictionary, we have failed
            if (!pageDict) {
              _logger2['default'].errorAndThrow('Could not connect to a valid app after ' + maxTries + ' tries.');
            }

            if (this.appIdKey !== appIdKey) {
              _logger2['default'].debug('Received altered app id, updating from \'' + this.appIdKey + '\' to \'' + appIdKey + '\'');
              this.appIdKey = appIdKey;
            }

            // set the callback for getting a listing to the page change callback
            this.rpcClient.setSpecialMessageHandler('_rpc_forwardGetListing:', null, this.onPageChange.bind(this));

            // wait for all the promises are back, or 30s passes
            pagePromises = _Object$values(this.appDict).filter(function (app) {
              return !!app.pageDict && !!app.pageDict.promise;
            }).map(function (app) {
              return app.pageDict.promise;
            });

            if (!pagePromises.length) {
              context$2$0.next = 122;
              break;
            }

            _logger2['default'].debug('Waiting for ' + pagePromises.length + ' pages to be fulfilled');
            context$2$0.next = 122;
            return _regeneratorRuntime.awrap(_bluebird2['default'].any([_bluebird2['default'].delay(30000), _bluebird2['default'].all(pagePromises)]));

          case 122:
            pageArray = (0, _helpers.pageArrayFromDict)(pageDict);

            _logger2['default'].debug('Finally selecting app ' + this.appIdKey + ': ' + (0, _helpers.simpleStringify)(pageArray));

            fullPageArray = [];
            _iteratorNormalCompletion7 = true;
            _didIteratorError7 = false;
            _iteratorError7 = undefined;
            context$2$0.prev = 128;
            _iterator7 = _getIterator(_lodash2['default'].toPairs(this.appDict));

          case 130:
            if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
              context$2$0.next = 159;
              break;
            }

            _step7$value = _slicedToArray(_step7.value, 2);
            app = _step7$value[0];
            info = _step7$value[1];

            if (_lodash2['default'].isArray(info.pageDict)) {
              context$2$0.next = 136;
              break;
            }

            return context$2$0.abrupt('continue', 156);

          case 136:
            id = app.replace('PID:', '');
            _iteratorNormalCompletion8 = true;
            _didIteratorError8 = false;
            _iteratorError8 = undefined;
            context$2$0.prev = 140;

            for (_iterator8 = _getIterator(info.pageDict); !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
              page = _step8.value;

              if (page.url && (!ignoreAboutBlankUrl || page.url !== 'about:blank') && (!currentUrl || page.url === currentUrl)) {
                _pageDict = _lodash2['default'].clone(page);

                _pageDict.id = id + '.' + _pageDict.id;
                fullPageArray.push(_pageDict);
              }
            }
            context$2$0.next = 148;
            break;

          case 144:
            context$2$0.prev = 144;
            context$2$0.t4 = context$2$0['catch'](140);
            _didIteratorError8 = true;
            _iteratorError8 = context$2$0.t4;

          case 148:
            context$2$0.prev = 148;
            context$2$0.prev = 149;

            if (!_iteratorNormalCompletion8 && _iterator8['return']) {
              _iterator8['return']();
            }

          case 151:
            context$2$0.prev = 151;

            if (!_didIteratorError8) {
              context$2$0.next = 154;
              break;
            }

            throw _iteratorError8;

          case 154:
            return context$2$0.finish(151);

          case 155:
            return context$2$0.finish(148);

          case 156:
            _iteratorNormalCompletion7 = true;
            context$2$0.next = 130;
            break;

          case 159:
            context$2$0.next = 165;
            break;

          case 161:
            context$2$0.prev = 161;
            context$2$0.t5 = context$2$0['catch'](128);
            _didIteratorError7 = true;
            _iteratorError7 = context$2$0.t5;

          case 165:
            context$2$0.prev = 165;
            context$2$0.prev = 166;

            if (!_iteratorNormalCompletion7 && _iterator7['return']) {
              _iterator7['return']();
            }

          case 168:
            context$2$0.prev = 168;

            if (!_didIteratorError7) {
              context$2$0.next = 171;
              break;
            }

            throw _iteratorError7;

          case 171:
            return context$2$0.finish(168);

          case 172:
            return context$2$0.finish(165);

          case 173:
            return context$2$0.abrupt('return', fullPageArray);

          case 174:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[12, 99, 103, 111], [16, 91], [32, 72, 76, 84], [41, 55, 59, 67], [60,, 62, 66], [77,, 79, 83], [104,, 106, 110], [128, 161, 165, 173], [140, 144, 148, 156], [149,, 151, 155], [166,, 168, 172]]);
    }
  }, {
    key: 'selectPage',
    value: function selectPage(appIdKey, pageIdKey) {
      var skipReadyCheck = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
      var ready;
      return _regeneratorRuntime.async(function selectPage$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.appIdKey = 'PID:' + appIdKey;
            this.pageIdKey = pageIdKey;

            _logger2['default'].debug('Selecting page \'' + pageIdKey + '\' on app \'' + this.appIdKey + '\' and forwarding socket setup');

            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.rpcClient.send('setSenderKey', {
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey
            }));

          case 5:
            _logger2['default'].debug('Sender key set');

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.rpcClient.send('enablePage', {
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 8:
            _logger2['default'].debug('Enabled activity on page');

            // make sure everything is ready to go
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.checkPageIsReady());

          case 11:
            ready = context$2$0.sent;

            if (!(!skipReadyCheck && !ready)) {
              context$2$0.next = 15;
              break;
            }

            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.pageUnload());

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'executeAtom',
    value: function executeAtom(atom, args, frames) {
      var script, value;
      return _regeneratorRuntime.async(function executeAtom$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.rpcClient.connected) {
              context$2$0.next = 2;
              break;
            }

            throw new Error('Remote debugger is not connected');

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((0, _helpers.getScriptForAtom)(atom, args, frames));

          case 4:
            script = context$2$0.sent;
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.execute(script, true));

          case 7:
            value = context$2$0.sent;

            _logger2['default'].debug('Received result for atom \'' + atom + '\' execution: ' + (0, _helpers.simpleStringify)(value));
            return context$2$0.abrupt('return', value);

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'executeAtomAsync',
    value: function executeAtomAsync(atom, args, frames, responseUrl) {
      var asyncCallBack, script;
      return _regeneratorRuntime.async(function executeAtomAsync$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            asyncCallBack = 'function (res) { xmlHttp = new XMLHttpRequest(); ' + ('xmlHttp.open(\'POST\', \'' + responseUrl + '\', true);') + 'xmlHttp.setRequestHeader(\'Content-type\',\'application/json\'); ' + 'xmlHttp.send(res); }';
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _helpers.getScriptForAtom)(atom, args, frames, asyncCallBack));

          case 3:
            script = context$2$0.sent;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.execute(script));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'pageLoad',
    value: function pageLoad(startPageLoadMs) {
      var timeoutMs, start, verify;
      return _regeneratorRuntime.async(function pageLoad$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            timeoutMs = 500;
            start = startPageLoadMs || Date.now();

            _logger2['default'].debug('Page loaded, verifying whether ready');

            verify = function verify() {
              var ready;
              return _regeneratorRuntime.async(function verify$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    this.pageLoadDelay = _appiumSupport.util.cancellableDelay(timeoutMs);
                    context$3$0.prev = 1;
                    context$3$0.next = 4;
                    return _regeneratorRuntime.awrap(this.pageLoadDelay);

                  case 4:
                    context$3$0.next = 10;
                    break;

                  case 6:
                    context$3$0.prev = 6;
                    context$3$0.t0 = context$3$0['catch'](1);

                    if (!(context$3$0.t0 instanceof _bluebird2['default'].CancellationError)) {
                      context$3$0.next = 10;
                      break;
                    }

                    return context$3$0.abrupt('return');

                  case 10:
                    if (this.appIdKey) {
                      context$3$0.next = 13;
                      break;
                    }

                    _logger2['default'].debug('Not connected to an application. Ignoring page load');
                    return context$3$0.abrupt('return');

                  case 13:
                    context$3$0.next = 15;
                    return _regeneratorRuntime.awrap(this.checkPageIsReady());

                  case 15:
                    ready = context$3$0.sent;

                    if (!(ready || this.pageLoadMs > 0 && start + this.pageLoadMs < Date.now())) {
                      context$3$0.next = 21;
                      break;
                    }

                    _logger2['default'].debug('Page is ready');
                    this.pageLoading = false;
                    context$3$0.next = 24;
                    break;

                  case 21:
                    _logger2['default'].debug('Page was not ready, retrying');
                    context$3$0.next = 24;
                    return _regeneratorRuntime.awrap(verify());

                  case 24:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2, [[1, 6]]);
            };

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(verify());

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'cancelPageLoad',
    value: function cancelPageLoad() {
      return _regeneratorRuntime.async(function cancelPageLoad$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Unregistering from page readiness notifications');
            this.pageLoading = false;
            if (this.pageLoadDelay) {
              this.pageLoadDelay.cancel();
            }

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'pageUnload',
    value: function pageUnload() {
      return _regeneratorRuntime.async(function pageUnload$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Page unloading');
            this.pageLoading = true;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.waitForDom());

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'waitForDom',
    value: function waitForDom(startPageLoadMs) {
      return _regeneratorRuntime.async(function waitForDom$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Waiting for dom...');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.pageLoad(startPageLoadMs));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'checkPageIsReady',
    value: function checkPageIsReady() {
      var errors, readyCmd, readyState;
      return _regeneratorRuntime.async(function checkPageIsReady$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            errors = (0, _helpers.checkParams)({ appIdKey: this.appIdKey });

            if (!errors) {
              context$2$0.next = 3;
              break;
            }

            throw new Error(errors);

          case 3:

            _logger2['default'].debug('Checking document readyState');
            readyCmd = '(function (){ return document.readyState; })()';
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.execute(readyCmd, true));

          case 7:
            readyState = context$2$0.sent;

            _logger2['default'].debug('readyState was ' + (0, _helpers.simpleStringify)(readyState));

            return context$2$0.abrupt('return', readyState === 'complete');

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'navToUrl',
    value: function navToUrl(url) {
      var _errors;

      return _regeneratorRuntime.async(function navToUrl$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.debuggerType === DEBUGGER_TYPES.webinspector)) {
              context$2$0.next = 4;
              break;
            }

            _errors = (0, _helpers.checkParams)({ appIdKey: this.appIdKey, pageIdKey: this.pageIdKey });

            if (!_errors) {
              context$2$0.next = 4;
              break;
            }

            throw new Error(_errors);

          case 4:

            _logger2['default'].debug('Navigating to new URL: ' + url);
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.rpcClient.send('setUrl', {
              url: url,
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 7:
            if (this.useNewSafari) {
              context$2$0.next = 10;
              break;
            }

            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 10:
            if (!(this.debuggerType === DEBUGGER_TYPES.webinspector)) {
              context$2$0.next = 13;
              break;
            }

            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.waitForFrameNavigated());

          case 13:
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.waitForDom(Date.now()));

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'waitForFrameNavigated',
    value: function waitForFrameNavigated() {
      return _regeneratorRuntime.async(function waitForFrameNavigated$(context$2$0) {
        var _this4 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', new _bluebird2['default'](function callee$2$0(resolve, reject) {
              var startMs, navEventListener, timeout;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this3 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    _logger2['default'].debug('Waiting for frame navigated message...');
                    startMs = Date.now();

                    navEventListener = function navEventListener(value) {
                      _logger2['default'].debug('Frame navigated in ' + (Date.now() - startMs) / 1000 + ' sec from source: ' + value);
                      if (_this3.navigationDelay) {
                        _this3.navigationDelay.cancel();
                      }
                      resolve(value);
                    };

                    this.rpcClient.setSpecialMessageHandler('Page.frameNavigated', reject, navEventListener);

                    // timeout, in case remote debugger doesn't respond,
                    // or takes a long time

                    if (!(!this.useNewSafari || this.pageLoadMs >= 0)) {
                      context$3$0.next = 15;
                      break;
                    }

                    timeout = this.useNewSafari ? this.pageLoadMs : 500;

                    this.navigationDelay = _appiumSupport.util.cancellableDelay(timeout);
                    context$3$0.prev = 7;
                    context$3$0.next = 10;
                    return _regeneratorRuntime.awrap(this.navigationDelay);

                  case 10:
                    navEventListener('timeout');
                    context$3$0.next = 15;
                    break;

                  case 13:
                    context$3$0.prev = 13;
                    context$3$0.t0 = context$3$0['catch'](7);

                  case 15:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this4, [[7, 13]]);
            }));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startTimeline',

    // nothing to do: we only get here if the remote debugger
    // already notified of frame navigation, and the delay
    // was cancelled
    value: function startTimeline(fn) {
      return _regeneratorRuntime.async(function startTimeline$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Starting to record the timeline');
            this.rpcClient.setTimelineEventHandler(fn);
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.rpcClient.send('startTimeline', {
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stopTimeline',
    value: function stopTimeline() {
      return _regeneratorRuntime.async(function stopTimeline$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Stopping to record the timeline');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.rpcClient.send('stopTimeline', {
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'execute',
    value: function execute(command, override) {
      var _errors2, res;

      return _regeneratorRuntime.async(function execute$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.pageLoading && !override)) {
              context$2$0.next = 4;
              break;
            }

            _logger2['default'].debug('Trying to execute but page is not loaded.');
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.waitForDom());

          case 4:
            if (!(this.debuggerType === DEBUGGER_TYPES.webinspector)) {
              context$2$0.next = 8;
              break;
            }

            _errors2 = (0, _helpers.checkParams)({ appIdKey: this.appIdKey, pageIdKey: this.pageIdKey });

            if (!_errors2) {
              context$2$0.next = 8;
              break;
            }

            throw new Error(_errors2);

          case 8:

            _logger2['default'].debug('Sending javascript command ' + _lodash2['default'].truncate(command, { length: 50 }));
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.rpcClient.send('sendJSCommand', {
              command: command,
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 11:
            res = context$2$0.sent;
            return context$2$0.abrupt('return', this.convertResult(res));

          case 13:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'callFunction',
    value: function callFunction(objId, fn, args) {
      var errors, res;
      return _regeneratorRuntime.async(function callFunction$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            errors = (0, _helpers.checkParams)({ appIdKey: this.appIdKey, pageIdKey: this.pageIdKey });

            if (!errors) {
              context$2$0.next = 3;
              break;
            }

            throw new Error(errors);

          case 3:

            _logger2['default'].debug('Calling javascript function');
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.rpcClient.send('callJSFunction', {
              objId: objId,
              fn: fn,
              args: args,
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 6:
            res = context$2$0.sent;
            return context$2$0.abrupt('return', this.convertResult(res));

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'convertResult',
    value: function convertResult(res) {
      if (_lodash2['default'].isUndefined(res)) {
        throw new Error('Did not get OK result from remote debugger. Result was: ' + (0, _helpers.simpleStringify)(res));
      } else if (_lodash2['default'].isString(res)) {
        try {
          res = JSON.parse(res);
        } catch (err) {
          // we might get a serialized object, but we might not
          // if we get here, it is just a value
        }
      } else if (!_lodash2['default'].isObject(res)) {
          throw new Error('Result has unexpected type: (' + typeof res + ').');
        }

      if (res.status && res.status !== 0) {
        // we got some form of error.
        var message = res.value.message || res.value;
        throw new _appiumBaseDriver.errors.JavaScriptError(message + ' (status: ' + res.status + ')');
      }

      // with either have an object with a `value` property (even if `null`),
      // or a plain object
      return res.hasOwnProperty('value') ? res.value : res;
    }
  }, {
    key: 'allowNavigationWithoutReload',
    value: function allowNavigationWithoutReload() {
      var allow = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
      return _regeneratorRuntime.async(function allowNavigationWithoutReload$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.rpcClient.allowNavigationWithoutReload(allow);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return RemoteDebugger;
})(_events2['default'].EventEmitter);

RemoteDebugger.EVENT_PAGE_CHANGE = 'remote_debugger_page_change';
RemoteDebugger.EVENT_DISCONNECT = 'remote_debugger_disconnect';

// add generic callbacks
var _iteratorNormalCompletion9 = true;
var _didIteratorError9 = false;
var _iteratorError9 = undefined;

try {
  for (var _iterator9 = _getIterator(_lodash2['default'].toPairs(_messageHandlers2['default'])), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
    var _step9$value = _slicedToArray(_step9.value, 2);

    var _name = _step9$value[0];
    var handler = _step9$value[1];

    RemoteDebugger.prototype[_name] = handler;
  }
} catch (err) {
  _didIteratorError9 = true;
  _iteratorError9 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion9 && _iterator9['return']) {
      _iterator9['return']();
    }
  } finally {
    if (_didIteratorError9) {
      throw _iteratorError9;
    }
  }
}

exports.RemoteDebugger = RemoteDebugger;
exports.DEBUGGER_TYPES = DEBUGGER_TYPES;
exports.REMOTE_DEBUGGER_PORT = REMOTE_DEBUGGER_PORT;
exports.RPC_RESPONSE_TIMEOUT_MS = RPC_RESPONSE_TIMEOUT_MS;

// get the connection information about the app

// only resolve when the connection response is received

// iterative solution, as recursion was swallowing the promise at some point

// in iOS 8.2 the connect logic happens, but with an empty dictionary
// which leads to the remote debugger getting disconnected, and into a loop

// we have gotten the correct application by this point, so short circuit everything

// translate the dictionary into a useful form, and return to sender

// if the promise has been cancelled
// we want to skip checking the readiness

// we can get this called in the middle of trying to find a new app

// if we are ready, or we've spend too much time on this

// no need to do this check when using webkit

// a small pause for the browser to catch up

// add a handler for the `Page.frameNavigated` message
// from the remote debugger

// use pageLoadMs, or a small amount of time

// if the page is not loaded yet, wait for it

// no need to check errors if it is webkit
//# sourceMappingURL=data:application/json;charset=utf8;base64,
