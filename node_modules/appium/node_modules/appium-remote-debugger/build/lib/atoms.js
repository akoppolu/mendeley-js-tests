'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var atomsCache = {};

function getAtoms(atomName) {
  var atomFileName;
  return _regeneratorRuntime.async(function getAtoms$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        atomFileName = _path2['default'].resolve(__dirname, '..', '..', 'atoms', atomName + '.js');

        if (atomsCache.hasOwnProperty(atomName)) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(atomFileName));

      case 5:
        atomsCache[atomName] = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](2);
        throw new Error('Unable to load Atom \'' + atomName + '\' from file \'' + atomFileName + '\'');

      case 11:
        return context$1$0.abrupt('return', atomsCache[atomName]);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 8]]);
}

exports.getAtoms = getAtoms;
exports['default'] = getAtoms;

// check if we have already loaded an cached this atom
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hdG9tcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OzZCQUFtQixnQkFBZ0I7O29CQUNsQixNQUFNOzs7O0FBR3ZCLElBQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFdEIsU0FBZSxRQUFRLENBQUUsUUFBUTtNQUMzQixZQUFZOzs7O0FBQVosb0JBQVksR0FBRyxrQkFBSyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFLLFFBQVEsU0FBTTs7WUFHNUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7eUNBRVAsa0JBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQzs7O0FBQXRELGtCQUFVLENBQUMsUUFBUSxDQUFDOzs7Ozs7O2NBRWQsSUFBSSxLQUFLLDRCQUF5QixRQUFRLHVCQUFnQixZQUFZLFFBQUk7Ozs0Q0FJN0UsVUFBVSxDQUFDLFFBQVEsQ0FBQzs7Ozs7OztDQUM1Qjs7UUFFUSxRQUFRLEdBQVIsUUFBUTtxQkFDRixRQUFRIiwiZmlsZSI6ImxpYi9hdG9tcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cblxuY29uc3QgYXRvbXNDYWNoZSA9IHt9O1xuXG5hc3luYyBmdW5jdGlvbiBnZXRBdG9tcyAoYXRvbU5hbWUpIHtcbiAgbGV0IGF0b21GaWxlTmFtZSA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicsICdhdG9tcycsIGAke2F0b21OYW1lfS5qc2ApO1xuXG4gIC8vIGNoZWNrIGlmIHdlIGhhdmUgYWxyZWFkeSBsb2FkZWQgYW4gY2FjaGVkIHRoaXMgYXRvbVxuICBpZiAoIWF0b21zQ2FjaGUuaGFzT3duUHJvcGVydHkoYXRvbU5hbWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF0b21zQ2FjaGVbYXRvbU5hbWVdID0gYXdhaXQgZnMucmVhZEZpbGUoYXRvbUZpbGVOYW1lKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBsb2FkIEF0b20gJyR7YXRvbU5hbWV9JyBmcm9tIGZpbGUgJyR7YXRvbUZpbGVOYW1lfSdgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXRvbXNDYWNoZVthdG9tTmFtZV07XG59XG5cbmV4cG9ydCB7IGdldEF0b21zIH07XG5leHBvcnQgZGVmYXVsdCBnZXRBdG9tcztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
