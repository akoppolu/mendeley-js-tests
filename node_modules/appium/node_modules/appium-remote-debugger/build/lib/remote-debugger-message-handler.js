'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var RpcMessageHandler = (function () {
  function RpcMessageHandler(specialHandlers) {
    _classCallCheck(this, RpcMessageHandler);

    this.setHandlers();
    this.errorHandlers = {};
    this.specialHandlers = _lodash2['default'].clone(specialHandlers);
    this.dataHandlers = {};
    this.willNavigateWithoutReload = false;
  }

  _createClass(RpcMessageHandler, [{
    key: 'setDataMessageHandler',
    value: function setDataMessageHandler(key, errorHandler, handler) {
      this.errorHandlers[key] = errorHandler;
      this.dataHandlers[key] = handler;
    }
  }, {
    key: 'setSpecialMessageHandler',
    value: function setSpecialMessageHandler(key, errorHandler, handler) {
      this.errorHandlers[key] = errorHandler;
      this.specialHandlers[key] = handler;
    }
  }, {
    key: 'getSpecialMessageHandler',
    value: function getSpecialMessageHandler(key) {
      return this.specialHandlers[key];
    }
  }, {
    key: 'setTimelineEventHandler',
    value: function setTimelineEventHandler(timelineEventHandler) {
      this.timelineEventHandler = timelineEventHandler;
    }
  }, {
    key: 'hasErrorHandler',
    value: function hasErrorHandler(key) {
      return _lodash2['default'].has(this.errorHandlers, key);
    }
  }, {
    key: 'hasSpecialMessageHandler',
    value: function hasSpecialMessageHandler(key) {
      return _lodash2['default'].has(this.specialHandlers, key);
    }
  }, {
    key: 'allowNavigationWithoutReload',
    value: function allowNavigationWithoutReload() {
      var allow = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      this.willNavigateWithoutReload = allow;
    }
  }, {
    key: 'handleMessage',
    value: function handleMessage(plist) {
      var handlerFor = plist.__selector;
      if (!handlerFor) {
        _logger2['default'].debug('Got an invalid plist');
        return;
      }

      if (_lodash2['default'].has(this.handlers, handlerFor)) {
        this.handlers[handlerFor](plist);
      } else {
        _logger2['default'].debug('Debugger got a message for \'' + handlerFor + '\' and have no ' + 'handler, doing nothing.');
      }
    }
  }, {
    key: 'handleSpecialMessage',
    value: function handleSpecialMessage(handler) {
      var fn = this.specialHandlers[handler];
      if (fn) {
        // most responses are only to be called once, then
        // removed. But not the ones below, which handle
        // page change and app connect/disconnect
        if (handler !== '_rpc_forwardGetListing:' && handler !== '_rpc_applicationDisconnected:' && handler !== '_rpc_applicationConnected:' && handler !== '_rpc_applicationUpdated:' && handler !== '_rpc_reportConnectedDriverList:') {
          this.specialHandlers[handler] = null;
        }

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        fn.apply(undefined, args);
      } else {
        _logger2['default'].warn('Tried to access special message handler \'' + handler + '\' ' + 'but none was found');
      }
    }
  }, {
    key: 'handleDataMessage',
    value: function handleDataMessage(plist) {
      var dataKey, msgId, result, error, message;
      return _regeneratorRuntime.async(function handleDataMessage$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            dataKey = JSON.parse(plist.__argument.WIRMessageDataKey.toString('utf8'));
            msgId = dataKey.id;
            result = dataKey.result;
            error = dataKey.error || null;

            // we can get an error, or we can get a response that is an error
            if (result && result.wasThrown) {
              message = result.result && (result.result.value || result.result.description) ? result.result.value || result.result.description : 'Error occurred in handling data message';

              error = new Error(message);
            }

            if (!_lodash2['default'].isNull(msgId) && !_lodash2['default'].isUndefined(msgId)) {
              msgId = msgId.toString();
            }

            if (!error) {
              context$2$0.next = 9;
              break;
            }

            if (this.hasErrorHandler(msgId)) {
              this.errorHandlers[msgId](error);
            } else {
              _logger2['default'].error('Error occurred in handling data message: ' + error);
              _logger2['default'].error('No error handler present, ignoring');
            }

            // short circuit
            return context$2$0.abrupt('return');

          case 9:
            if (!(dataKey.method === 'Profiler.resetProfiles')) {
              context$2$0.next = 13;
              break;
            }

            _logger2['default'].debug('Device is telling us to reset profiles. Should probably ' + 'do some kind of callback here');
            context$2$0.next = 23;
            break;

          case 13:
            if (!(dataKey.method === 'Page.frameNavigated')) {
              context$2$0.next = 17;
              break;
            }

            if (!this.willNavigateWithoutReload && !this.pageLoading) {
              _logger2['default'].debug('Frame navigated, unloading page');
              if (_lodash2['default'].isFunction(this.specialHandlers['Page.frameNavigated'])) {
                this.specialHandlers['Page.frameNavigated']('remote-debugger');
                this.specialHandlers['Page.frameNavigated'] = null;
              } else {
                _logger2['default'].debug('No frame navigation callback set.');
              }
            } else {
              _logger2['default'].debug('Frame navigated but we were warned about it, not ' + 'considering page state unloaded');
              this.willNavigateWithoutReload = false;
            }
            context$2$0.next = 23;
            break;

          case 17:
            if (!(dataKey.method === 'Page.loadEventFired')) {
              context$2$0.next = 22;
              break;
            }

            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.specialHandlers.pageLoad());

          case 20:
            context$2$0.next = 23;
            break;

          case 22:
            if (dataKey.method === 'Timeline.eventRecorded') {
              this.timelineEventHandler(dataKey.params.record);
            } else if (_lodash2['default'].isFunction(this.dataHandlers[msgId])) {
              _logger2['default'].debug('Found data handler for response');
              // we will either get back a result object that has a result.value
              // in which case that is what we want,
              // or else we return the whole thing
              if (result.result && result.result.value) {
                result = result.result.value;
              }
              this.dataHandlers[msgId](result);
              this.dataHandlers[msgId] = null;
            } else if (this.dataHandlers[msgId] === null) {
              _logger2['default'].error('Debugger returned data for message ' + msgId + ' ' + 'but we already ran that callback! WTF??');
            } else {
              if (msgId || result || error) {
                _logger2['default'].error('Debugger returned data for message \'' + msgId + '\' ' + 'but we were not waiting for that message! ' + ('result: \'' + JSON.stringify(result) + '\'; ') + ('error: \'' + error + '\''));
              }
            }

          case 23:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setHandlers',
    value: function setHandlers() {
      var _this = this;

      this.handlers = {
        '_rpc_reportSetup:': function _rpc_reportSetup(plist) {
          _this.handleSpecialMessage('_rpc_reportIdentifier:', plist.__argument.WIRSimulatorNameKey, plist.__argument.WIRSimulatorBuildKey, plist.__argument.WIRSimulatorProductVersionKey);
        },
        '_rpc_reportConnectedApplicationList:': function _rpc_reportConnectedApplicationList(plist) {
          _this.handleSpecialMessage('_rpc_reportConnectedApplicationList:', plist.__argument.WIRApplicationDictionaryKey);
        },
        '_rpc_applicationSentListing:': function _rpc_applicationSentListing(plist) {
          _this.handleSpecialMessage('_rpc_forwardGetListing:', plist.__argument.WIRApplicationIdentifierKey, plist.__argument.WIRListingKey);
        },
        '_rpc_applicationConnected:': function _rpc_applicationConnected(plist) {
          _this.handleSpecialMessage('_rpc_applicationConnected:', plist.__argument);
        },
        '_rpc_applicationDisconnected:': function _rpc_applicationDisconnected(plist) {
          _this.handleSpecialMessage('_rpc_applicationDisconnected:', plist.__argument);
        },
        '_rpc_applicationUpdated:': function _rpc_applicationUpdated(plist) {
          _this.handleSpecialMessage('_rpc_applicationUpdated:', plist.__argument);
        },
        '_rpc_reportConnectedDriverList:': function _rpc_reportConnectedDriverList(plist) {
          _this.handleSpecialMessage('_rpc_reportConnectedDriverList:', plist.__argument);
        },
        '_rpc_applicationSentData:': this.handleDataMessage.bind(this)
      };
    }
  }]);

  return RpcMessageHandler;
})();

exports['default'] = RpcMessageHandler;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
