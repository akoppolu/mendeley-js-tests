'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _atoms = require('./atoms');

var _atoms2 = _interopRequireDefault(_atoms);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var WEB_CONTENT_BUNDLE_ID = 'com.apple.WebKit.WebContent';

/*
 * Takes a dictionary from the remote debugger and makes a more manageable
 * dictionary whose keys are understandable
 */
function appInfoFromDict(dict) {
  var id = dict.WIRApplicationIdentifierKey;
  var isProxy = _lodash2['default'].isString(dict.WIRIsApplicationProxyKey) ? dict.WIRIsApplicationProxyKey.toLowerCase() === 'true' : dict.WIRIsApplicationProxyKey;
  var entry = {
    id: id,
    isProxy: isProxy,
    name: dict.WIRApplicationNameKey,
    bundleId: dict.WIRApplicationBundleIdentifierKey,
    hostId: dict.WIRHostApplicationIdentifierKey,
    isActive: dict.WIRIsApplicationActiveKey,
    isAutomationEnabled: !!dict.WIRRemoteAutomationEnabledKey
  };

  return [id, entry];
}

/*
 * Take a dictionary from the remote debugger and makes a more manageable
 * dictionary of pages available.
 */
function pageArrayFromDict(pageDict) {
  if (pageDict.id) {
    // the page is already translated, so wrap in an array and pass back
    return [pageDict];
  }
  var newPageArray = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(_lodash2['default'].values(pageDict)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var dict = _step.value;

      // count only WIRTypeWeb pages and ignore all others (WIRTypeJavaScript etc)
      if (_lodash2['default'].isUndefined(dict.WIRTypeKey) || dict.WIRTypeKey === 'WIRTypeWeb') {
        newPageArray.push({
          id: dict.WIRPageIdentifierKey,
          title: dict.WIRTitleKey,
          url: dict.WIRURLKey,
          isKey: !_lodash2['default'].isUndefined(dict.WIRConnectionIdentifierKey)
        });
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return newPageArray;
}

/*
 * Given a bundle id, finds the correct remote debugger app that is
 * connected.
 */
function getDebuggerAppKey(bundleId, platformVersion, appDict) {
  var appId = undefined;
  if (parseFloat(platformVersion) >= 8) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _getIterator(_lodash2['default'].toPairs(appDict)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _step2$value = _slicedToArray(_step2.value, 2);

        var key = _step2$value[0];
        var data = _step2$value[1];

        if (data.bundleId === bundleId) {
          appId = key;
          break;
        }
      }
      // now we need to determine if we should pick a proxy for this instead
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    if (appId) {
      _logger2['default'].debug('Found app id key \'' + appId + '\' for bundle \'' + bundleId + '\'');
      var proxiedAppIds = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = _getIterator(_lodash2['default'].toPairs(appDict)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _step3$value = _slicedToArray(_step3.value, 2);

          var key = _step3$value[0];
          var data = _step3$value[1];

          if (data.isProxy && data.hostId === appId) {
            _logger2['default'].debug('Found separate bundleId \'' + data.bundleId + '\' ' + ('acting as proxy for \'' + bundleId + '\', with app id \'' + key + '\''));
            proxiedAppIds.push(key);
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3['return']) {
            _iterator3['return']();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      if (proxiedAppIds.length) {
        // use the last app being proxied
        appId = _lodash2['default'].last(proxiedAppIds);
        _logger2['default'].debug('Using proxied app id \'' + appId + '\'');
      }
    }
  } else {
    if (_lodash2['default'].has(appDict, bundleId)) {
      appId = bundleId;
    }
  }

  return appId;
}

function appIdForBundle(_x2, _x3) {
  var _again = true;

  _function: while (_again) {
    var bundleId = _x2,
        appDict = _x3;
    _again = false;

    var appId = undefined;
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = _getIterator(_lodash2['default'].toPairs(appDict)), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var _step4$value = _slicedToArray(_step4.value, 2);

        var key = _step4$value[0];
        var data = _step4$value[1];

        if (data.bundleId === bundleId) {
          appId = key;
          break;
        }
      }

      // if nothing is found, try to get the generic app
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4['return']) {
          _iterator4['return']();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    if (!appId && bundleId !== WEB_CONTENT_BUNDLE_ID) {
      _x2 = WEB_CONTENT_BUNDLE_ID;
      _x3 = appDict;
      _again = true;
      appId = _iteratorNormalCompletion4 = _didIteratorError4 = _iteratorError4 = undefined;
      continue _function;
    }

    return appId;
  }
}

function getPossibleDebuggerAppKeys(bundleId, platformVersion, appDict) {
  var proxiedAppIds = [];
  if (parseFloat(platformVersion) >= 8) {
    var appId = appIdForBundle(bundleId, appDict);

    // now we need to determine if we should pick a proxy for this instead
    if (appId) {
      _logger2['default'].debug('Found app id key \'' + appId + '\' for bundle \'' + bundleId + '\'');
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = _getIterator(_lodash2['default'].toPairs(appDict)), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _step5$value = _slicedToArray(_step5.value, 2);

          var key = _step5$value[0];
          var data = _step5$value[1];

          if (data.isProxy && data.hostId === appId) {
            _logger2['default'].debug('Found separate bundleId \'' + data.bundleId + '\' ' + ('acting as proxy for \'' + bundleId + '\', with app id \'' + key + '\''));
            proxiedAppIds.push(key);
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5['return']) {
            _iterator5['return']();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      if (proxiedAppIds.length === 0) {
        proxiedAppIds = [appId];
      }
    }
  } else {
    if (_lodash2['default'].has(appDict, bundleId)) {
      proxiedAppIds = [bundleId];
    }
  }

  return proxiedAppIds;
}

function checkParams(params) {
  var errors = [];
  var _iteratorNormalCompletion6 = true;
  var _didIteratorError6 = false;
  var _iteratorError6 = undefined;

  try {
    for (var _iterator6 = _getIterator(_lodash2['default'].toPairs(params)), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
      var _step6$value = _slicedToArray(_step6.value, 2);

      var param = _step6$value[0];
      var value = _step6$value[1];

      try {
        _assert2['default'].ok(value);
      } catch (err) {
        errors.push(param);
      }
    }
  } catch (err) {
    _didIteratorError6 = true;
    _iteratorError6 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion6 && _iterator6['return']) {
        _iterator6['return']();
      }
    } finally {
      if (_didIteratorError6) {
        throw _iteratorError6;
      }
    }
  }

  if (errors.length) {
    return errors;
  }
}

function wrapScriptForFrame(script, frame) {
  var elFromCache;
  return _regeneratorRuntime.async(function wrapScriptForFrame$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Wrapping script for frame \'' + frame + '\'');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _atoms2['default'])('get_element_from_cache'));

      case 3:
        elFromCache = context$1$0.sent;
        return context$1$0.abrupt('return', '(function (window) { var document = window.document; ' + ('return (' + script + '); })((' + elFromCache.toString('utf8') + ')(' + JSON.stringify(frame) + '))'));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getScriptForAtom(atom, args, frames) {
  var asyncCallBack = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

  var atomSrc, script, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, frame;

  return _regeneratorRuntime.async(function getScriptForAtom$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _atoms2['default'])(atom));

      case 2:
        atomSrc = context$1$0.sent;
        script = undefined;

        if (!(frames.length > 0)) {
          context$1$0.next = 35;
          break;
        }

        script = atomSrc;
        _iteratorNormalCompletion7 = true;
        _didIteratorError7 = false;
        _iteratorError7 = undefined;
        context$1$0.prev = 9;
        _iterator7 = _getIterator(frames);

      case 11:
        if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
          context$1$0.next = 19;
          break;
        }

        frame = _step7.value;
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(wrapScriptForFrame(script, frame));

      case 15:
        script = context$1$0.sent;

      case 16:
        _iteratorNormalCompletion7 = true;
        context$1$0.next = 11;
        break;

      case 19:
        context$1$0.next = 25;
        break;

      case 21:
        context$1$0.prev = 21;
        context$1$0.t0 = context$1$0['catch'](9);
        _didIteratorError7 = true;
        _iteratorError7 = context$1$0.t0;

      case 25:
        context$1$0.prev = 25;
        context$1$0.prev = 26;

        if (!_iteratorNormalCompletion7 && _iterator7['return']) {
          _iterator7['return']();
        }

      case 28:
        context$1$0.prev = 28;

        if (!_didIteratorError7) {
          context$1$0.next = 31;
          break;
        }

        throw _iteratorError7;

      case 31:
        return context$1$0.finish(28);

      case 32:
        return context$1$0.finish(25);

      case 33:
        context$1$0.next = 37;
        break;

      case 35:
        _logger2['default'].debug('Executing \'' + atom + '\' atom in default context');
        script = '(' + atomSrc + ')';

      case 37:

        // add the arguments, as strings
        args = args.map(JSON.stringify);
        if (asyncCallBack) {
          script += '(' + args.join(',') + ', ' + asyncCallBack + ', true )';
        } else {
          script += '(' + args.join(',') + ')';
        }

        return context$1$0.abrupt('return', script);

      case 40:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 21, 25, 33], [26,, 28, 32]]);
}

function simpleStringify(value) {
  if (!value) return JSON.stringify(value);

  // we get back objects sometimes with string versions of functions
  // which muddy the logs
  var cleanValue = _lodash2['default'].clone(value);
  var _arr = ['ceil', 'clone', 'floor', 'round', 'scale', 'toString'];
  for (var _i = 0; _i < _arr.length; _i++) {
    var property = _arr[_i];
    delete cleanValue[property];
  }
  return JSON.stringify(cleanValue);
}

function deferredPromise() {
  // http://bluebirdjs.com/docs/api/deferred-migration.html
  var resolve = undefined;
  var reject = undefined;
  var promise = new _bluebird2['default'](function (res, rej) {
    resolve = res;
    reject = rej;
  });
  return {
    promise: promise,
    resolve: resolve,
    reject: reject
  };
}

exports.appInfoFromDict = appInfoFromDict;
exports.pageArrayFromDict = pageArrayFromDict;
exports.getDebuggerAppKey = getDebuggerAppKey;
exports.getPossibleDebuggerAppKeys = getPossibleDebuggerAppKeys;
exports.checkParams = checkParams;
exports.wrapScriptForFrame = wrapScriptForFrame;
exports.getScriptForAtom = getScriptForAtom;
exports.simpleStringify = simpleStringify;
exports.deferredPromise = deferredPromise;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
