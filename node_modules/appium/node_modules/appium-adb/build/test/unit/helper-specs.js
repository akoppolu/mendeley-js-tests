'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _libHelpers = require('../../lib/helpers');

var _appiumTestSupport = require('appium-test-support');

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var should = _chai2['default'].should;

describe('helpers', function () {
  describe('getDirectories', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs }, function (mocks) {
    it('should sort the directories', function callee$2$0() {
      var rootPath, directories;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            rootPath = '/path/to/root';
            directories = ['c', 'b', 'a', '1', '2'];

            mocks.fs.expects('readdir').once().withExactArgs(rootPath).returns(directories);
            mocks.fs.expects('lstat').exactly(5).returns(_Promise.resolve({ isDirectory: function isDirectory() {
                return true;
              } }));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap((0, _libHelpers.getDirectories)(rootPath));

          case 6:
            context$3$0.t0 = ['1', '2', 'a', 'b', 'c'];
            context$3$0.sent.should.eql(context$3$0.t0);

            mocks.fs.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));

  describe('getAndroidPlatformAndPath', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs, path: _path2['default'] }, function (mocks) {
    it('should return null if no ANDROID_HOME is set', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _libHelpers.getAndroidPlatformAndPath)());

          case 2:
            context$3$0.t0 = context$3$0.sent;
            should(context$3$0.t0).not.exist;

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should get the latest available API', function callee$2$0() {
      var oldAndroidHome, platformAndPath;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            oldAndroidHome = process.env.ANDROID_HOME;

            process.env.ANDROID_HOME = '/path/to/android/home';
            mocks.fs.expects('exists').exactly(2).onCall(0).returns(false).onCall(1).returns(true);
            mocks.path.expects('resolve').exactly(3).onCall(0).returns('/path/to').onCall(1).returns('/path/to/apis1').onCall(2).returns('/path/to/apis2');

            context$3$0.next = 6;
            return _regeneratorRuntime.awrap((0, _libHelpers.getAndroidPlatformAndPath)());

          case 6:
            platformAndPath = context$3$0.sent;

            platformAndPath.platform.should.equal('android-24');
            platformAndPath.platformPath.should.equal('/path/to/apis2');

            mocks.fs.verify();
            mocks.path.verify();
            process.env.ANDROID_HOME = oldAndroidHome;

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));

  describe('buildStartCmd', function () {
    var startOptions = {
      pkg: 'com.something',
      activity: '.SomeActivity'
    };

    it('should parse optionalIntentArguments with single key', function () {
      var cmd = (0, _libHelpers.buildStartCmd)(_lodash2['default'].defaults({ optionalIntentArguments: '-d key' }, startOptions), 20);
      cmd[cmd.length - 2].should.eql('-d');
      cmd[cmd.length - 1].should.eql('key');
    });
    it('should parse optionalIntentArguments with single key/value pair', function () {
      var cmd = (0, _libHelpers.buildStartCmd)(_lodash2['default'].defaults({ optionalIntentArguments: '-d key value' }, startOptions), 20);
      cmd[cmd.length - 3].should.eql('-d');
      cmd[cmd.length - 2].should.eql('key');
      cmd[cmd.length - 1].should.eql('value');
    });
    it('should parse optionalIntentArguments with single key/value pair with spaces', function () {
      var cmd = (0, _libHelpers.buildStartCmd)(_lodash2['default'].defaults({ optionalIntentArguments: '-d key value value2' }, startOptions), 20);
      cmd[cmd.length - 3].should.eql('-d');
      cmd[cmd.length - 2].should.eql('key');
      cmd[cmd.length - 1].should.eql('value value2');
    });
    it('should parse optionalIntentArguments with multiple keys', function () {
      var cmd = (0, _libHelpers.buildStartCmd)(_lodash2['default'].defaults({ optionalIntentArguments: '-d key1 -e key2' }, startOptions), 20);
      cmd[cmd.length - 4].should.eql('-d');
      cmd[cmd.length - 3].should.eql('key1');
      cmd[cmd.length - 2].should.eql('-e');
      cmd[cmd.length - 1].should.eql('key2');
    });
    it('should parse optionalIntentArguments with multiple key/value pairs', function () {
      var cmd = (0, _libHelpers.buildStartCmd)(_lodash2['default'].defaults({ optionalIntentArguments: '-d key1 value1 -e key2 value2' }, startOptions), 20);
      cmd[cmd.length - 6].should.eql('-d');
      cmd[cmd.length - 5].should.eql('key1');
      cmd[cmd.length - 4].should.eql('value1');
      cmd[cmd.length - 3].should.eql('-e');
      cmd[cmd.length - 2].should.eql('key2');
      cmd[cmd.length - 1].should.eql('value2');
    });
    it('should parse optionalIntentArguments with hyphens', function () {
      var arg = 'http://some-url-with-hyphens.com/';
      var cmd = (0, _libHelpers.buildStartCmd)(_lodash2['default'].defaults({ optionalIntentArguments: '-d ' + arg }, startOptions), 20);
      cmd[cmd.length - 2].should.eql('-d');
      cmd[cmd.length - 1].should.eql(arg);
    });
    it('should parse optionalIntentArguments with multiple arguments with hyphens', function () {
      var arg1 = 'http://some-url-with-hyphens.com/';
      var arg2 = 'http://some-other-url-with-hyphens.com/';
      var cmd = (0, _libHelpers.buildStartCmd)(_lodash2['default'].defaults({
        optionalIntentArguments: '-d ' + arg1 + ' -e key ' + arg2
      }, startOptions), 20);
      cmd[cmd.length - 5].should.eql('-d');
      cmd[cmd.length - 4].should.eql(arg1);
      cmd[cmd.length - 3].should.eql('-e');
      cmd[cmd.length - 2].should.eql('key');
      cmd[cmd.length - 1].should.eql(arg2);
    });
    it('should have -S option when stopApp is set', function callee$2$0() {
      var cmd;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            cmd = (0, _libHelpers.buildStartCmd)(_lodash2['default'].defaults({ stopApp: true }, startOptions), 20);

            cmd[cmd.length - 1].should.eql('-S');

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should not have -S option when stopApp is not set', function callee$2$0() {
      var cmd;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            cmd = (0, _libHelpers.buildStartCmd)(_lodash2['default'].defaults({ stopApp: false }, startOptions), 20);

            cmd[cmd.length - 1].should.not.eql('-S');

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
