'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _libHelpersJs = require('../../lib/helpers.js');

var helpers = _interopRequireWildcard(_libHelpersJs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _appiumSupport = require('appium-support');

var appiumSupport = _interopRequireWildcard(_appiumSupport);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].use(_chaiAsPromised2['default']);

var selendroidTestApp = _path2['default'].resolve(helpers.rootDir, 'test', 'fixtures', 'selendroid-test-app.apk'),
    helperJarPath = _path2['default'].resolve(helpers.rootDir, 'jars'),
    keystorePath = _path2['default'].resolve(helpers.rootDir, 'test', 'fixtures', 'appiumtest.keystore'),
    keyAlias = 'appiumtest',
    password = 'android',
    selendroidTestAppPackage = 'io.selendroid.testapp',
    java_dummy_path = 'java_dummy_path',
    java_home = 'java_home',
    tempDir = appiumSupport.tempDir,
    fs = appiumSupport.fs;

describe('signing', function () {
  var adb = new _2['default']();
  adb.keystorePath = keystorePath;
  adb.keyAlias = keyAlias;
  adb.keystorePassword = password;
  adb.keyPassword = password;

  describe('signWithDefaultCert', (0, _appiumTestSupport.withMocks)({ teen_process: teen_process, helpers: helpers }, function (mocks) {
    it('should call exec with correct args', function callee$2$0() {
      var signPath;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            signPath = _path2['default'].resolve(helperJarPath, 'sign.jar');

            mocks.helpers.expects("getJavaForOs").returns(java_dummy_path);
            mocks.teen_process.expects("exec").once().withExactArgs(java_dummy_path, ['-jar', signPath, selendroidTestApp, '--override']).returns("");
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.signWithDefaultCert(selendroidTestApp));

          case 5:
            mocks.teen_process.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should throw error for invalid file path', function callee$2$0() {
      var dummyPath;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            dummyPath = "dummyPath";
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.signWithDefaultCert(dummyPath).should.eventually.be.rejected);

          case 3:
            mocks.teen_process.verify();
            mocks.helpers.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('signWithCustomCert', (0, _appiumTestSupport.withMocks)({ teen_process: teen_process, helpers: helpers }, function (mocks) {
    it('should call exec with correct args', function callee$2$0() {
      var jarsigner;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            jarsigner = _path2['default'].resolve(java_home, 'bin', 'jarsigner');

            if (appiumSupport.system.isWindows()) {
              jarsigner = jarsigner + '.exe';
            }
            adb.useKeystore = true;
            mocks.helpers.expects("getJavaHome").returns(java_home);
            mocks.helpers.expects("getJavaForOs").returns(java_dummy_path);
            mocks.teen_process.expects("exec").withExactArgs(java_dummy_path, ['-jar', _path2['default'].resolve(helperJarPath, 'unsign.jar'), selendroidTestApp]).returns("");
            mocks.teen_process.expects("exec").withExactArgs(jarsigner, ['-sigalg', 'MD5withRSA', '-digestalg', 'SHA1', '-keystore', keystorePath, '-storepass', password, '-keypass', password, selendroidTestApp, keyAlias]).returns("");
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(adb.signWithCustomCert(selendroidTestApp));

          case 9:
            mocks.teen_process.verify();
            mocks.helpers.verify();

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getKeystoreMd5', (0, _appiumTestSupport.withMocks)({ teen_process: teen_process }, function (mocks) {
    it('should call exec with correct args', function callee$2$0() {
      var h, keytool, md5Str, md5;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            h = "a-fA-F0-9";
            keytool = _path2['default'].resolve(java_home, 'bin', 'keytool');
            md5Str = ['.*MD5.*((?:[', h, ']{2}:){15}[', h, ']{2})'].join('');
            md5 = new RegExp(md5Str, 'mi');

            adb.useKeystore = true;
            mocks.teen_process.expects("exec").once().withExactArgs(keytool, ['-v', '-list', '-alias', keyAlias, '-keystore', keystorePath, '-storepass', password]).returns("");
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(adb.getKeystoreMd5(keytool, md5));

          case 8:
            mocks.teen_process.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  // Skipping as unable to mock mkdirp, this case is covered in e2e tests for now.
  // TODO: find ways to mock mkdirp
  describe.skip('zipAlignApk', (0, _appiumTestSupport.withMocks)({ teen_process: teen_process, adb: adb, appiumSupport: appiumSupport, fs: fs, tempDir: tempDir }, function (mocks) {
    it('should call exec with correct args', function callee$2$0() {
      var alignedApk;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            alignedApk = "dummy_path";

            mocks.tempDir.expects('path').once().withExactArgs({ prefix: 'appium', suffix: '.tmp' }).returns(alignedApk);
            mocks.adb.expects('initZipAlign').once().withExactArgs().returns("");
            mocks.appiumSupport.expects('mkdirp').once().withExactArgs(_path2['default'].dirname(alignedApk)).returns("");
            mocks.teen_process.expects("exec").once().withExactArgs(adb.binaries.zipalign, ['-f', '4', selendroidTestApp, alignedApk]);
            mocks.fs.expects("mv").once().withExactArgs(alignedApk, selendroidTestApp, { mkdirp: true }).returns("");
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(adb.zipAlignApk(selendroidTestApp));

          case 8:
            mocks.adb.verify();
            mocks.appiumSupport.verify();
            mocks.teen_process.verify();
            mocks.tempDir.verify();
            mocks.fs.verify();

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('checkApkCert', (0, _appiumTestSupport.withMocks)({ teen_process: teen_process, helpers: helpers, adb: adb }, function (mocks) {
    it('should return false for apk not present', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.helpers.expects("getJavaForOs").returns(java_dummy_path);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.checkApkCert('dummyPath', 'dummyPackage'));

          case 3:
            context$3$0.sent.should.be['false'];

            mocks.helpers.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call exec and zipAlign when not using keystore', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.helpers.expects("getJavaForOs").returns(java_dummy_path);
            mocks.teen_process.expects("exec").once().withExactArgs(java_dummy_path, ['-jar', _path2['default'].resolve(helperJarPath, 'verify.jar'), selendroidTestApp]).returns("");
            mocks.adb.expects('zipAlignApk').once().withExactArgs(selendroidTestApp).returns("");
            adb.useKeystore = false;
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(adb.checkApkCert(selendroidTestApp, selendroidTestAppPackage));

          case 6:
            mocks.adb.verify();
            mocks.teen_process.verify();
            mocks.helpers.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call checkCustomApkCert when using keystore', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.helpers.expects("getJavaForOs").returns(java_dummy_path);
            mocks.adb.expects('checkCustomApkCert').once().withExactArgs(selendroidTestApp, selendroidTestAppPackage).returns("");
            adb.useKeystore = true;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.checkApkCert(selendroidTestApp, selendroidTestAppPackage));

          case 5:
            mocks.adb.verify();
            mocks.helpers.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
