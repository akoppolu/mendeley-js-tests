'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].use(_chaiAsPromised2['default']);
_chai2['default'].should();

var emulators = [{ udid: 'emulator-5554', state: 'device', port: 5554 }, { udid: 'emulator-5556', state: 'device', port: 5556 }];
var fingerprintId = 1111;

describe('adb emulator commands', function () {
  var adb = new _2['default']();
  describe("emu", function () {
    describe("isEmulatorConnected", (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it("should verify emulators state", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("getConnectedEmulators").atLeast(3).returns(emulators);
              adb.curDeviceId = "emulator-5554";
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(adb.isEmulatorConnected());

            case 4:
              context$4$0.sent.should.equal(true);

              adb.curDeviceId = "emulator-5556";
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(adb.isEmulatorConnected());

            case 8:
              context$4$0.sent.should.equal(true);

              adb.curDeviceId = "emulator-5558";
              context$4$0.next = 12;
              return _regeneratorRuntime.awrap(adb.isEmulatorConnected());

            case 12:
              context$4$0.sent.should.equal(false);

              mocks.adb.verify();

            case 14:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe("verifyEmulatorConnected", (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it("should throw an exception on emulator not connected", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              adb.curDeviceId = "emulator-5558";
              mocks.adb.expects("isEmulatorConnected").once().returns(false);
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(adb.verifyEmulatorConnected().should.eventually.be.rejected);

            case 4:
              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe("fingerprint", (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it("should throw exception on undefined fingerprintId", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(adb.fingerprint().should.eventually.be.rejected);

            case 2:
              mocks.adb.verify();

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should throw exception on apiLevel lower than 23", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("getApiLevel").once().withExactArgs().returns(21);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(adb.fingerprint(fingerprintId).should.eventually.be.rejected);

            case 3:
              mocks.adb.verify();

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should call adbExec with the correct args", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("getApiLevel").once().withExactArgs().returns(23);
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "finger", "touch", fingerprintId]).returns();
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(adb.fingerprint(fingerprintId));

            case 6:
              mocks.adb.verify();

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe("rotate", (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it("should call adbExec with the correct args", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "rotate"]).returns();
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.rotate());

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe("power methods", (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it("should throw exception on invalid power ac state", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(adb.powerAC('dead').should.eventually.be.rejectedWith("Wrong power AC state"));

            case 2:
              mocks.adb.verify();

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set the power ac off", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "power", "ac", adb.POWER_AC_STATES.POWER_AC_OFF]).returns();
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.powerAC('off'));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set the power ac on", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "power", "ac", adb.POWER_AC_STATES.POWER_AC_ON]).returns();
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.powerAC('on'));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should throw exception on invalid power battery percent", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(adb.powerCapacity(-1).should.eventually.be.rejectedWith("should be valid integer between 0 and 100"));

            case 2:
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(adb.powerCapacity("a").should.eventually.be.rejectedWith("should be valid integer between 0 and 100"));

            case 4:
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(adb.powerCapacity(500).should.eventually.be.rejectedWith("should be valid integer between 0 and 100"));

            case 6:
              mocks.adb.verify();

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set the power capacity", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "power", "capacity", 0]).returns();
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.powerCapacity(0));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should call methods to power off the emulator", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("powerAC").once().withExactArgs('off').returns();
              mocks.adb.expects("powerCapacity").once().withExactArgs(0).returns();
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(adb.powerOFF());

            case 4:
              mocks.adb.verify();

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe("sendSMS", (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it("should throw exception on invalid message", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(adb.sendSMS("+549341312345678").should.eventually.be.rejectedWith("Sending an SMS requires a message"));

            case 2:
              mocks.adb.verify();

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should throw exception on invalid phoneNumber", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(adb.sendSMS("00549341a312345678", 'Hello Appium').should.eventually.be.rejectedWith("Invalid sendSMS phoneNumber"));

            case 2:
              mocks.adb.verify();

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should call adbExec with the correct args", function callee$3$0() {
        var phoneNumber, message;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              phoneNumber = 4509;
              message = " Hello Appium ";

              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "sms", "send", "4509", "Hello Appium"]).returns();
              context$4$0.next = 7;
              return _regeneratorRuntime.awrap(adb.sendSMS(phoneNumber, message));

            case 7:
              mocks.adb.verify();

            case 8:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe("gsm signal method", (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it("should throw exception on invalid strength", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(adb.gsmSignal(5).should.eventually.be.rejectedWith("Invalid signal strength"));

            case 2:
              mocks.adb.verify();

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should call adbExecEmu with the correct args", function callee$3$0() {
        var signalStrength;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              signalStrength = 0;

              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", 'signal-profile', signalStrength]).returns();
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(adb.gsmSignal(signalStrength));

            case 6:
              mocks.adb.verify();

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe("gsm call methods", (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it("should throw exception on invalid action", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(adb.gsmCall("+549341312345678").should.eventually.be.rejectedWith("Invalid gsm action"));

            case 2:
              mocks.adb.verify();

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should throw exception on invalid phoneNumber", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(adb.gsmCall("+5493413a12345678", "call").should.eventually.be.rejectedWith("Invalid gsmCall phoneNumber"));

            case 2:
              mocks.adb.verify();

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set the correct method for making gsm call", function callee$3$0() {
        var phoneNumber;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              phoneNumber = 4509;

              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", adb.GSM_CALL_ACTIONS.GSM_CALL, "4509"]).returns();
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(adb.gsmCall(phoneNumber, "call"));

            case 6:
              mocks.adb.verify();

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set the correct method for accepting gsm call", function callee$3$0() {
        var phoneNumber;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              phoneNumber = 4509;

              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", adb.GSM_CALL_ACTIONS.GSM_ACCEPT, "4509"]).returns();
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(adb.gsmCall(phoneNumber, "accept"));

            case 6:
              mocks.adb.verify();

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set the correct method for refusing gsm call", function callee$3$0() {
        var phoneNumber;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              phoneNumber = 4509;

              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", adb.GSM_CALL_ACTIONS.GSM_CANCEL, "4509"]).returns();
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(adb.gsmCall(phoneNumber, "cancel"));

            case 6:
              mocks.adb.verify();

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set the correct method for holding gsm call", function callee$3$0() {
        var phoneNumber;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              phoneNumber = 4509;

              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", adb.GSM_CALL_ACTIONS.GSM_HOLD, "4509"]).returns();
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(adb.gsmCall(phoneNumber, "hold"));

            case 6:
              mocks.adb.verify();

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
    describe("gsm voice method", (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
      it("should throw exception on invalid strength", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(adb.gsmVoice('weird').should.eventually.be.rejectedWith("Invalid gsm voice state"));

            case 2:
              mocks.adb.verify();

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set gsm voice to unregistered", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_UNREGISTERED]).returns();
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.gsmVoice("unregistered"));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set gsm voice to home", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_HOME]).returns();
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.gsmVoice("home"));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set gsm voice to roaming", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_ROAMING]).returns();
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.gsmVoice("roaming"));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set gsm voice to searching", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_SEARCHING]).returns();
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.gsmVoice("searching"));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set gsm voice to denied", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_DENIED]).returns();
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.gsmVoice("denied"));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set gsm voice to off", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_OFF]).returns();
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.gsmVoice("off"));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it("should set gsm voice to on", function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              mocks.adb.expects("isEmulatorConnected").once().withExactArgs().returns(true);
              mocks.adb.expects("resetTelnetAuthToken").once().withExactArgs().returns();
              mocks.adb.expects("adbExec").once().withExactArgs(["emu", "gsm", "voice", adb.GSM_VOICE_STATES.GSM_VOICE_ON]).returns();
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(adb.gsmVoice("on"));

            case 5:
              mocks.adb.verify();

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
