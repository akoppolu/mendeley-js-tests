'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libAdb = require('../../lib/adb');

var _libAdb2 = _interopRequireDefault(_libAdb);

var _libLogcat = require('../../lib/logcat');

var _libLogcat2 = _interopRequireDefault(_libLogcat);

var _setup = require('./setup');

_chai2['default'].use(_chaiAsPromised2['default']);

describe('logcat', function () {
  var _this = this;

  this.timeout(_setup.MOCHA_TIMEOUT);

  var adb = undefined;
  var logcat = undefined;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_libAdb2['default'].createADB());

        case 2:
          adb = context$2$0.sent;

          logcat = new _libLogcat2['default']({ adb: adb.executable, debug: false, debugTrace: false });

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getLogs should return logs', function callee$1$0() {
    var logs;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(logcat.startCapture());

        case 2:
          logs = logcat.getLogs();

          logs.should.have.length.above(0);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(logcat.stopCapture());

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('getAllLogs should return all logs', function callee$1$0() {
    var logs;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(logcat.startCapture());

        case 2:
          logs = logcat.getAllLogs();

          logs.should.have.length.above(0);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(logcat.stopCapture());

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9sb2djYXQtZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztvQkFBaUIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7c0JBQzdCLGVBQWU7Ozs7eUJBQ1osa0JBQWtCOzs7O3FCQUNQLFNBQVM7O0FBRXZDLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsWUFBWTs7O0FBQzdCLE1BQUksQ0FBQyxPQUFPLHNCQUFlLENBQUM7O0FBRTVCLE1BQUksR0FBRyxZQUFBLENBQUM7QUFDUixNQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsUUFBTSxDQUFDOzs7OzsyQ0FDTyxvQkFBSSxTQUFTLEVBQUU7OztBQUEzQixhQUFHOztBQUNILGdCQUFNLEdBQUcsMkJBQVcsRUFBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDOzs7Ozs7O0dBQzdFLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyw0QkFBNEIsRUFBRTtRQUUzQixJQUFJOzs7OzsyQ0FERixNQUFNLENBQUMsWUFBWSxFQUFFOzs7QUFDdkIsY0FBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQUU7O0FBQzNCLGNBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7OzJDQUMzQixNQUFNLENBQUMsV0FBVyxFQUFFOzs7Ozs7O0dBQzNCLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyxtQ0FBbUMsRUFBRTtRQUVsQyxJQUFJOzs7OzsyQ0FERixNQUFNLENBQUMsWUFBWSxFQUFFOzs7QUFDdkIsY0FBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUU7O0FBQzlCLGNBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7OzJDQUMzQixNQUFNLENBQUMsV0FBVyxFQUFFOzs7Ozs7O0dBQzNCLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2Z1bmN0aW9uYWwvbG9nY2F0LWUyZS1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IEFEQiBmcm9tICcuLi8uLi9saWIvYWRiJztcbmltcG9ydCBMb2djYXQgZnJvbSAnLi4vLi4vbGliL2xvZ2NhdCc7XG5pbXBvcnQgeyBNT0NIQV9USU1FT1VUIH0gZnJvbSAnLi9zZXR1cCc7XG5cbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ2xvZ2NhdCcsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50aW1lb3V0KE1PQ0hBX1RJTUVPVVQpO1xuXG4gIGxldCBhZGI7XG4gIGxldCBsb2djYXQ7XG4gIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgYWRiID0gYXdhaXQgQURCLmNyZWF0ZUFEQigpO1xuICAgIGxvZ2NhdCA9IG5ldyBMb2djYXQoe2FkYjogYWRiLmV4ZWN1dGFibGUsIGRlYnVnOiBmYWxzZSwgZGVidWdUcmFjZTogZmFsc2V9KTtcbiAgfSk7XG4gIGl0KCdnZXRMb2dzIHNob3VsZCByZXR1cm4gbG9ncycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBsb2djYXQuc3RhcnRDYXB0dXJlKCk7XG4gICAgbGV0IGxvZ3MgPSBsb2djYXQuZ2V0TG9ncygpO1xuICAgIGxvZ3Muc2hvdWxkLmhhdmUubGVuZ3RoLmFib3ZlKDApO1xuICAgIGF3YWl0IGxvZ2NhdC5zdG9wQ2FwdHVyZSgpO1xuICB9KTtcbiAgaXQoJ2dldEFsbExvZ3Mgc2hvdWxkIHJldHVybiBhbGwgbG9ncycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBsb2djYXQuc3RhcnRDYXB0dXJlKCk7XG4gICAgbGV0IGxvZ3MgPSBsb2djYXQuZ2V0QWxsTG9ncygpO1xuICAgIGxvZ3Muc2hvdWxkLmhhdmUubGVuZ3RoLmFib3ZlKDApO1xuICAgIGF3YWl0IGxvZ2NhdC5zdG9wQ2FwdHVyZSgpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
