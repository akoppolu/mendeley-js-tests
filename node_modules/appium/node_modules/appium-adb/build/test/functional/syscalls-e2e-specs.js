'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _setup = require('./setup');

_chai2['default'].use(_chaiAsPromised2['default']);

describe('System calls', function () {
  var _this = this;

  this.timeout(_setup.MOCHA_TIMEOUT);

  var adb = undefined;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_2['default'].createADB());

        case 2:
          adb = context$2$0.sent;

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getConnectedDevices should get devices', function callee$1$0() {
    var devices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getConnectedDevices());

        case 2:
          devices = context$2$0.sent;

          devices.should.have.length.above(0);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getDevicesWithRetry should get devices', function callee$1$0() {
    var devices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getDevicesWithRetry());

        case 2:
          devices = context$2$0.sent;

          devices.should.have.length.above(0);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('adbExec should get devices when with devices', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.adbExec("devices"));

        case 2:
          context$2$0.sent.should.contain("List of devices attached");

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('isDeviceConnected should be true', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.isDeviceConnected());

        case 2:
          context$2$0.sent.should.be['true'];

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('shell should execute command in adb shell ', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.shell(['getprop', 'ro.build.version.sdk']));

        case 2:
          context$2$0.t0 = _setup.apiLevel;
          context$2$0.sent.should.equal(context$2$0.t0);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getConnectedEmulators should get all connected emulators', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getConnectedEmulators());

        case 2:
          context$2$0.sent.length.should.be.above(0);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getRunningAVD should get all connected avd', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getRunningAVD(_setup.avdName));

        case 2:
          context$2$0.sent.should.not.be['null'];

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getRunningAVDWithRetry should get all connected avds', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.getRunningAVDWithRetry(_setup.avdName));

        case 2:
          context$2$0.sent.should.not.be['null'];

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  // Skipping for now. Will unskip depending on how it behaves on CI
  it.skip('launchAVD should get all connected avds', function callee$1$0() {
    var proc;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          this.timeout(_setup.MOCHA_LONG_TIMEOUT);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(adb.launchAVD(_setup.avdName));

        case 3:
          proc = context$2$0.sent;
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(adb.getConnectedEmulators());

        case 6:
          context$2$0.sent.length.should.be.above(0);

          proc.stop();

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('waitForDevice should get all connected avds', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.waitForDevice(2));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('reboot should reboot the device', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          this.timeout(_setup.MOCHA_LONG_TIMEOUT);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(adb.reboot(process.env.TRAVIS ? 200 : undefined));

        case 3:
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(adb.ping());

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('fileExists should detect when files do and do not exist', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.fileExists('/foo/bar/baz.zip'));

        case 2:
          context$2$0.sent.should.be['false'];
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(adb.fileExists('/system/etc/system_fonts.xml'));

        case 5:
          context$2$0.sent.should.be['true'];

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  it('ls should list files', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(adb.ls('/foo/bar'));

        case 2:
          context$2$0.t0 = [];
          context$2$0.sent.should.eql(context$2$0.t0);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(adb.ls('/system/etc'));

        case 6:
          context$2$0.sent.should.contain('system_fonts.xml');

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9zeXNjYWxscy1lMmUtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O29CQUFpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztnQkFDN0IsT0FBTzs7OztxQkFDOEMsU0FBUzs7QUFHOUUsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsUUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFZOzs7QUFDbkMsTUFBSSxDQUFDLE9BQU8sc0JBQWUsQ0FBQzs7QUFFNUIsTUFBSSxHQUFHLFlBQUEsQ0FBQztBQUNSLFFBQU0sQ0FBQzs7Ozs7MkNBQ08sY0FBSSxTQUFTLEVBQUU7OztBQUEzQixhQUFHOzs7Ozs7O0dBQ0osQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLHdDQUF3QyxFQUFFO1FBQ3ZDLE9BQU87Ozs7OzJDQUFTLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRTs7O0FBQXpDLGlCQUFPOztBQUNYLGlCQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0dBQ3JDLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyx3Q0FBd0MsRUFBRTtRQUN2QyxPQUFPOzs7OzsyQ0FBUyxHQUFHLENBQUMsbUJBQW1CLEVBQUU7OztBQUF6QyxpQkFBTzs7QUFDWCxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7OztHQUNyQyxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsOENBQThDLEVBQUU7Ozs7OzJDQUMxQyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQzs7OzJCQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsMEJBQTBCOzs7Ozs7O0dBQ3pFLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyxrQ0FBa0MsRUFBRTs7Ozs7MkNBQzlCLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRTs7OzJCQUFFLE1BQU0sQ0FBQyxFQUFFOzs7Ozs7O0dBQzFDLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyw0Q0FBNEMsRUFBRTs7Ozs7MkNBQ3hDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsQ0FBQzs7OzsyQkFBRSxNQUFNLENBQUMsS0FBSzs7Ozs7OztHQUNwRSxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsMERBQTBELEVBQUU7Ozs7OzJDQUN0RCxHQUFHLENBQUMscUJBQXFCLEVBQUU7OzsyQkFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Ozs7OztHQUM3RCxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsNENBQTRDLEVBQUU7Ozs7OzJDQUN4QyxHQUFHLENBQUMsYUFBYSxnQkFBUzs7OzJCQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRTs7Ozs7OztHQUNqRCxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsc0RBQXNELEVBQUU7Ozs7OzJDQUNsRCxHQUFHLENBQUMsc0JBQXNCLGdCQUFTOzs7MkJBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFOzs7Ozs7O0dBQzFELENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsSUFBSSxDQUFDLHlDQUF5QyxFQUFFO1FBRTdDLElBQUk7Ozs7QUFEUixjQUFJLENBQUMsT0FBTywyQkFBb0IsQ0FBQzs7MkNBQ2hCLEdBQUcsQ0FBQyxTQUFTLGdCQUFTOzs7QUFBbkMsY0FBSTs7MkNBQ0QsR0FBRyxDQUFDLHFCQUFxQixFQUFFOzs7MkJBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBQzVELGNBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7Ozs7OztHQUNiLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyw2Q0FBNkMsRUFBRTs7Ozs7MkNBQzFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0dBQzNCLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyxpQ0FBaUMsRUFBRTs7OztBQUNwQyxjQUFJLENBQUMsT0FBTywyQkFBb0IsQ0FBQzs7MkNBQzNCLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQzs7OzsyQ0FDaEQsR0FBRyxDQUFDLElBQUksRUFBRTs7Ozs7OztHQUNqQixDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMseURBQXlELEVBQUU7Ozs7OzJDQUNyRCxHQUFHLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDOzs7MkJBQUUsTUFBTSxDQUFDLEVBQUU7OzJDQUM3QyxHQUFHLENBQUMsVUFBVSxDQUFDLDhCQUE4QixDQUFDOzs7MkJBQUUsTUFBTSxDQUFDLEVBQUU7Ozs7Ozs7R0FDakUsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLHNCQUFzQixFQUFFOzs7OzsyQ0FDbEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUM7OzsyQkFBYSxFQUFFOzJCQUFiLE1BQU0sQ0FBQyxHQUFHOzsyQ0FDOUIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7OzsyQkFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLGtCQUFrQjs7Ozs7OztHQUNoRSxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsL3N5c2NhbGxzLWUyZS1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IEFEQiBmcm9tICcuLi8uLic7XG5pbXBvcnQgeyBhcGlMZXZlbCwgYXZkTmFtZSwgTU9DSEFfVElNRU9VVCwgTU9DSEFfTE9OR19USU1FT1VUIH0gZnJvbSAnLi9zZXR1cCc7XG5cblxuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgnU3lzdGVtIGNhbGxzJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnRpbWVvdXQoTU9DSEFfVElNRU9VVCk7XG5cbiAgbGV0IGFkYjtcbiAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICBhZGIgPSBhd2FpdCBBREIuY3JlYXRlQURCKCk7XG4gIH0pO1xuICBpdCgnZ2V0Q29ubmVjdGVkRGV2aWNlcyBzaG91bGQgZ2V0IGRldmljZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGRldmljZXMgPSBhd2FpdCBhZGIuZ2V0Q29ubmVjdGVkRGV2aWNlcygpO1xuICAgIGRldmljZXMuc2hvdWxkLmhhdmUubGVuZ3RoLmFib3ZlKDApO1xuICB9KTtcbiAgaXQoJ2dldERldmljZXNXaXRoUmV0cnkgc2hvdWxkIGdldCBkZXZpY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgYWRiLmdldERldmljZXNXaXRoUmV0cnkoKTtcbiAgICBkZXZpY2VzLnNob3VsZC5oYXZlLmxlbmd0aC5hYm92ZSgwKTtcbiAgfSk7XG4gIGl0KCdhZGJFeGVjIHNob3VsZCBnZXQgZGV2aWNlcyB3aGVuIHdpdGggZGV2aWNlcycsIGFzeW5jICgpID0+IHtcbiAgICAoYXdhaXQgYWRiLmFkYkV4ZWMoXCJkZXZpY2VzXCIpKS5zaG91bGQuY29udGFpbihcIkxpc3Qgb2YgZGV2aWNlcyBhdHRhY2hlZFwiKTtcbiAgfSk7XG4gIGl0KCdpc0RldmljZUNvbm5lY3RlZCBzaG91bGQgYmUgdHJ1ZScsIGFzeW5jICgpID0+IHtcbiAgICAoYXdhaXQgYWRiLmlzRGV2aWNlQ29ubmVjdGVkKCkpLnNob3VsZC5iZS50cnVlO1xuICB9KTtcbiAgaXQoJ3NoZWxsIHNob3VsZCBleGVjdXRlIGNvbW1hbmQgaW4gYWRiIHNoZWxsICcsIGFzeW5jICgpID0+IHtcbiAgICAoYXdhaXQgYWRiLnNoZWxsKFsnZ2V0cHJvcCcsICdyby5idWlsZC52ZXJzaW9uLnNkayddKSkuc2hvdWxkLmVxdWFsKGFwaUxldmVsKTtcbiAgfSk7XG4gIGl0KCdnZXRDb25uZWN0ZWRFbXVsYXRvcnMgc2hvdWxkIGdldCBhbGwgY29ubmVjdGVkIGVtdWxhdG9ycycsIGFzeW5jICgpID0+IHtcbiAgICAoYXdhaXQgYWRiLmdldENvbm5lY3RlZEVtdWxhdG9ycygpKS5sZW5ndGguc2hvdWxkLmJlLmFib3ZlKDApO1xuICB9KTtcbiAgaXQoJ2dldFJ1bm5pbmdBVkQgc2hvdWxkIGdldCBhbGwgY29ubmVjdGVkIGF2ZCcsIGFzeW5jICgpID0+IHtcbiAgICAoYXdhaXQgYWRiLmdldFJ1bm5pbmdBVkQoYXZkTmFtZSkpLnNob3VsZC5ub3QuYmUubnVsbDtcbiAgfSk7XG4gIGl0KCdnZXRSdW5uaW5nQVZEV2l0aFJldHJ5IHNob3VsZCBnZXQgYWxsIGNvbm5lY3RlZCBhdmRzJywgYXN5bmMgKCkgPT4ge1xuICAgIChhd2FpdCBhZGIuZ2V0UnVubmluZ0FWRFdpdGhSZXRyeShhdmROYW1lKSkuc2hvdWxkLm5vdC5iZS5udWxsO1xuICB9KTtcbiAgLy8gU2tpcHBpbmcgZm9yIG5vdy4gV2lsbCB1bnNraXAgZGVwZW5kaW5nIG9uIGhvdyBpdCBiZWhhdmVzIG9uIENJXG4gIGl0LnNraXAoJ2xhdW5jaEFWRCBzaG91bGQgZ2V0IGFsbCBjb25uZWN0ZWQgYXZkcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRpbWVvdXQoTU9DSEFfTE9OR19USU1FT1VUKTtcbiAgICBsZXQgcHJvYyA9IGF3YWl0IGFkYi5sYXVuY2hBVkQoYXZkTmFtZSk7XG4gICAgKGF3YWl0IGFkYi5nZXRDb25uZWN0ZWRFbXVsYXRvcnMoKSkubGVuZ3RoLnNob3VsZC5iZS5hYm92ZSgwKTtcbiAgICBwcm9jLnN0b3AoKTtcbiAgfSk7XG4gIGl0KCd3YWl0Rm9yRGV2aWNlIHNob3VsZCBnZXQgYWxsIGNvbm5lY3RlZCBhdmRzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IGFkYi53YWl0Rm9yRGV2aWNlKDIpO1xuICB9KTtcbiAgaXQoJ3JlYm9vdCBzaG91bGQgcmVib290IHRoZSBkZXZpY2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50aW1lb3V0KE1PQ0hBX0xPTkdfVElNRU9VVCk7XG4gICAgYXdhaXQgYWRiLnJlYm9vdChwcm9jZXNzLmVudi5UUkFWSVMgPyAyMDAgOiB1bmRlZmluZWQpO1xuICAgIGF3YWl0IGFkYi5waW5nKCk7XG4gIH0pO1xuICBpdCgnZmlsZUV4aXN0cyBzaG91bGQgZGV0ZWN0IHdoZW4gZmlsZXMgZG8gYW5kIGRvIG5vdCBleGlzdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAoYXdhaXQgYWRiLmZpbGVFeGlzdHMoJy9mb28vYmFyL2Jhei56aXAnKSkuc2hvdWxkLmJlLmZhbHNlO1xuICAgIChhd2FpdCBhZGIuZmlsZUV4aXN0cygnL3N5c3RlbS9ldGMvc3lzdGVtX2ZvbnRzLnhtbCcpKS5zaG91bGQuYmUudHJ1ZTtcbiAgfSk7XG4gIGl0KCdscyBzaG91bGQgbGlzdCBmaWxlcycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAoYXdhaXQgYWRiLmxzKCcvZm9vL2JhcicpKS5zaG91bGQuZXFsKFtdKTtcbiAgICAoYXdhaXQgYWRiLmxzKCcvc3lzdGVtL2V0YycpKS5zaG91bGQuY29udGFpbignc3lzdGVtX2ZvbnRzLnhtbCcpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
