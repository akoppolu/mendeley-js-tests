'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _teen_process = require('teen_process');

var _appiumSupport = require('appium-support');

var log = _appiumSupport.logger.getLogger('Logcat');

var Logcat = (function () {
  function Logcat() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Logcat);

    this.adb = opts.adb;
    this.debug = opts.debug;
    this.debugTrace = opts.debugTrace;
    this.logs = [];
    this.logsSinceLastRequest = [];
  }

  _createClass(Logcat, [{
    key: 'startCapture',
    value: function startCapture() {
      var _this2 = this;

      return new _Promise(function callee$2$0(resolve, reject) {
        return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
          var _this = this;

          while (1) switch (context$3$0.prev = context$3$0.next) {
            case 0:
              log.debug("Starting logcat capture");
              this.proc = new _teen_process.SubProcess(this.adb.path, this.adb.defaultArgs.concat(['logcat', '-v', 'threadtime']));
              context$3$0.next = 4;
              return _regeneratorRuntime.awrap(this.proc.start(0));

            case 4:
              this.proc.on('exit', function (code, signal) {
                log.error('Logcat terminated with code ' + code + ', signal ' + signal);
                _this.proc = null;
              });
              this.proc.on('lines-stderr', function (lines) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = _getIterator(lines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var line = _step.value;

                    if (/execvp\(\)/.test(line)) {
                      log.error('Logcat process failed to start');
                      reject(new Error('Logcat process failed to start. stderr: ' + line));
                    }
                    _this.outputHandler(line, 'STDERR: ');
                  }
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                      _iterator['return']();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }

                resolve();
              });
              this.proc.on('lines-stdout', function (lines) {
                resolve();
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                  for (var _iterator2 = _getIterator(lines), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var line = _step2.value;

                    _this.outputHandler(line);
                  }
                } catch (err) {
                  _didIteratorError2 = true;
                  _iteratorError2 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                      _iterator2['return']();
                    }
                  } finally {
                    if (_didIteratorError2) {
                      throw _iteratorError2;
                    }
                  }
                }
              });

            case 7:
            case 'end':
              return context$3$0.stop();
          }
        }, null, _this2);
      });
    }
  }, {
    key: 'outputHandler',
    value: function outputHandler(output) {
      var prefix = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

      output = output.trim();
      if (output) {
        var outputObj = {
          timestamp: Date.now(),
          level: 'ALL',
          message: output
        };
        this.logs.push(outputObj);
        this.logsSinceLastRequest.push(outputObj);
        var isTrace = /W\/Trace/.test(output);
        if (this.debug && (!isTrace || this.debugTrace)) {
          log.debug(prefix + output);
        }
      }
    }
  }, {
    key: 'stopCapture',
    value: function stopCapture() {
      return _regeneratorRuntime.async(function stopCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            log.debug("Stopping logcat capture");

            if (!(this.proc === null)) {
              context$2$0.next = 4;
              break;
            }

            log.debug("Logcat already stopped");
            return context$2$0.abrupt('return');

          case 4:
            this.proc.removeAllListeners('exit');
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.proc.stop());

          case 7:
            this.proc = null;

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getLogs',
    value: function getLogs() {
      var logs = this.logsSinceLastRequest;
      this.logsSinceLastRequest = [];
      return logs;
    }
  }, {
    key: 'getAllLogs',
    value: function getAllLogs() {
      return this.logs;
    }
  }]);

  return Logcat;
})();

exports['default'] = Logcat;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzFDLFlBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEMsWUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUEsQUFBQyxFQUFFO0FBQy9DLGFBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1NBQzVCO09BQ0Y7S0FDRjs7O1dBRWlCOzs7O0FBQ2hCLGVBQUcsQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQzs7a0JBQ2pDLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFBOzs7OztBQUNwQixlQUFHLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7Ozs7QUFHdEMsZ0JBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7OzZDQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTs7O0FBQ3RCLGdCQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQzs7Ozs7OztLQUNsQjs7O1dBRU8sbUJBQUc7QUFDVCxVQUFJLElBQUksR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUM7QUFDckMsVUFBSSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsQ0FBQztBQUMvQixhQUFPLElBQUksQ0FBQztLQUNiOzs7V0FFVSxzQkFBRztBQUNaLGFBQU8sSUFBSSxDQUFDLElBQUksQ0FBQztLQUNsQjs7O1NBekVHLE1BQU07OztxQkE0RUcsTUFBTSIsImZpbGUiOiJsaWIvbG9nY2F0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3ViUHJvY2VzcyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cbmNvbnN0IGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ0xvZ2NhdCcpO1xuXG5jbGFzcyBMb2djYXQge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgdGhpcy5hZGIgPSBvcHRzLmFkYjtcbiAgICB0aGlzLmRlYnVnID0gb3B0cy5kZWJ1ZztcbiAgICB0aGlzLmRlYnVnVHJhY2UgPSBvcHRzLmRlYnVnVHJhY2U7XG4gICAgdGhpcy5sb2dzID0gW107XG4gICAgdGhpcy5sb2dzU2luY2VMYXN0UmVxdWVzdCA9IFtdO1xuICB9XG5cbiAgc3RhcnRDYXB0dXJlICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbG9nLmRlYnVnKFwiU3RhcnRpbmcgbG9nY2F0IGNhcHR1cmVcIik7XG4gICAgICB0aGlzLnByb2MgPSBuZXcgU3ViUHJvY2Vzcyh0aGlzLmFkYi5wYXRoLCB0aGlzLmFkYi5kZWZhdWx0QXJncy5jb25jYXQoWydsb2djYXQnLCAnLXYnLCAndGhyZWFkdGltZSddKSk7XG4gICAgICBhd2FpdCB0aGlzLnByb2Muc3RhcnQoMCk7XG4gICAgICB0aGlzLnByb2Mub24oJ2V4aXQnLCAoY29kZSwgc2lnbmFsKSA9PiB7XG4gICAgICAgIGxvZy5lcnJvcihgTG9nY2F0IHRlcm1pbmF0ZWQgd2l0aCBjb2RlICR7Y29kZX0sIHNpZ25hbCAke3NpZ25hbH1gKTtcbiAgICAgICAgdGhpcy5wcm9jID0gbnVsbDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wcm9jLm9uKCdsaW5lcy1zdGRlcnInLCAobGluZXMpID0+IHtcbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiBsaW5lcykge1xuICAgICAgICAgIGlmICgvZXhlY3ZwXFwoXFwpLy50ZXN0KGxpbmUpKSB7XG4gICAgICAgICAgICBsb2cuZXJyb3IoJ0xvZ2NhdCBwcm9jZXNzIGZhaWxlZCB0byBzdGFydCcpO1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgTG9nY2F0IHByb2Nlc3MgZmFpbGVkIHRvIHN0YXJ0LiBzdGRlcnI6ICR7bGluZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMub3V0cHV0SGFuZGxlcihsaW5lLCAnU1RERVJSOiAnKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucHJvYy5vbignbGluZXMtc3Rkb3V0JywgKGxpbmVzKSA9PiB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiBsaW5lcykge1xuICAgICAgICAgIHRoaXMub3V0cHV0SGFuZGxlcihsaW5lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBvdXRwdXRIYW5kbGVyIChvdXRwdXQsIHByZWZpeCA9ICcnKSB7XG4gICAgb3V0cHV0ID0gb3V0cHV0LnRyaW0oKTtcbiAgICBpZiAob3V0cHV0KSB7XG4gICAgICBsZXQgb3V0cHV0T2JqID0ge1xuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgIGxldmVsOiAnQUxMJyxcbiAgICAgICAgbWVzc2FnZTogb3V0cHV0XG4gICAgICB9O1xuICAgICAgdGhpcy5sb2dzLnB1c2gob3V0cHV0T2JqKTtcbiAgICAgIHRoaXMubG9nc1NpbmNlTGFzdFJlcXVlc3QucHVzaChvdXRwdXRPYmopO1xuICAgICAgbGV0IGlzVHJhY2UgPSAvV1xcL1RyYWNlLy50ZXN0KG91dHB1dCk7XG4gICAgICBpZiAodGhpcy5kZWJ1ZyAmJiAoIWlzVHJhY2UgfHwgdGhpcy5kZWJ1Z1RyYWNlKSkge1xuICAgICAgICBsb2cuZGVidWcocHJlZml4ICsgb3V0cHV0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyBzdG9wQ2FwdHVyZSAoKSB7XG4gICAgbG9nLmRlYnVnKFwiU3RvcHBpbmcgbG9nY2F0IGNhcHR1cmVcIik7XG4gICAgaWYgKHRoaXMucHJvYyA9PT0gbnVsbCkge1xuICAgICAgbG9nLmRlYnVnKFwiTG9nY2F0IGFscmVhZHkgc3RvcHBlZFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wcm9jLnJlbW92ZUFsbExpc3RlbmVycygnZXhpdCcpO1xuICAgIGF3YWl0IHRoaXMucHJvYy5zdG9wKCk7XG4gICAgdGhpcy5wcm9jID0gbnVsbDtcbiAgfVxuXG4gIGdldExvZ3MgKCkge1xuICAgIGxldCBsb2dzID0gdGhpcy5sb2dzU2luY2VMYXN0UmVxdWVzdDtcbiAgICB0aGlzLmxvZ3NTaW5jZUxhc3RSZXF1ZXN0ID0gW107XG4gICAgcmV0dXJuIGxvZ3M7XG4gIH1cblxuICBnZXRBbGxMb2dzICgpIHtcbiAgICByZXR1cm4gdGhpcy5sb2dzO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2NhdDtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
