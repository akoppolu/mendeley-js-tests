'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _loggerJs = require('./logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _teen_process = require('teen_process');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var rootDir = _path2['default'].resolve(__dirname, process.env.NO_PRECOMPILE ? '..' : '../..');
var androidPlatforms = ['android-4.2', 'android-17', 'android-4.3', 'android-18', 'android-4.4', 'android-19', 'android-L', 'android-20', 'android-5.0', 'android-21', 'android-22', 'android-MNC', 'android-23', 'android-6.0', 'android-N', 'android-24', 'android-25'];

function getDirectories(rootPath) {
  var files, dirs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, pathString;

  return _regeneratorRuntime.async(function getDirectories$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readdir(rootPath));

      case 2:
        files = context$1$0.sent;
        dirs = [];
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 7;
        _iterator = _getIterator(files);

      case 9:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 19;
          break;
        }

        file = _step.value;
        pathString = _path2['default'].resolve(rootPath, file);
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.lstat(pathString));

      case 14:
        if (!context$1$0.sent.isDirectory()) {
          context$1$0.next = 16;
          break;
        }

        dirs.push(file);

      case 16:
        _iteratorNormalCompletion = true;
        context$1$0.next = 9;
        break;

      case 19:
        context$1$0.next = 25;
        break;

      case 21:
        context$1$0.prev = 21;
        context$1$0.t0 = context$1$0['catch'](7);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 25:
        context$1$0.prev = 25;
        context$1$0.prev = 26;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 28:
        context$1$0.prev = 28;

        if (!_didIteratorError) {
          context$1$0.next = 31;
          break;
        }

        throw _iteratorError;

      case 31:
        return context$1$0.finish(28);

      case 32:
        return context$1$0.finish(25);

      case 33:
        return context$1$0.abrupt('return', dirs.sort());

      case 34:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[7, 21, 25, 33], [26,, 28, 32]]);
}

function getAndroidPlatformAndPath() {
  var androidHome, platforms, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, platform, platformPath;

  return _regeneratorRuntime.async(function getAndroidPlatformAndPath$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        androidHome = process.env.ANDROID_HOME;

        if (_lodash2['default'].isString(androidHome)) {
          context$1$0.next = 4;
          break;
        }

        _loggerJs2['default'].error("ANDROID_HOME was not exported!");
        return context$1$0.abrupt('return', null);

      case 4:
        platforms = _path2['default'].resolve(androidHome, 'platforms');
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 8;
        _iterator2 = _getIterator(_lodash2['default'].clone(androidPlatforms).reverse());

      case 10:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 20;
          break;
        }

        platform = _step2.value;
        platformPath = _path2['default'].resolve(platforms, platform);
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(platformPath));

      case 15:
        if (!context$1$0.sent) {
          context$1$0.next = 17;
          break;
        }

        return context$1$0.abrupt('return', { platform: platform, platformPath: platformPath });

      case 17:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 10;
        break;

      case 20:
        context$1$0.next = 26;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](8);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t0;

      case 26:
        context$1$0.prev = 26;
        context$1$0.prev = 27;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 29:
        context$1$0.prev = 29;

        if (!_didIteratorError2) {
          context$1$0.next = 32;
          break;
        }

        throw _iteratorError2;

      case 32:
        return context$1$0.finish(29);

      case 33:
        return context$1$0.finish(26);

      case 34:
        return context$1$0.abrupt('return', null);

      case 35:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 22, 26, 34], [27,, 29, 33]]);
}

function unzipFile(zipPath) {
  return _regeneratorRuntime.async(function unzipFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Unzipping ' + zipPath);
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(assertZipArchive(zipPath));

      case 4:
        if (!_appiumSupport.system.isWindows()) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.zip.extractAllTo(zipPath, _path2['default'].dirname(zipPath)));

      case 7:
        _loggerJs2['default'].debug("Unzip successful");
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('unzip', ['-o', zipPath], { cwd: _path2['default'].dirname(zipPath) }));

      case 12:
        _loggerJs2['default'].debug("Unzip successful");

      case 13:
        context$1$0.next = 18;
        break;

      case 15:
        context$1$0.prev = 15;
        context$1$0.t0 = context$1$0['catch'](1);
        throw new Error('Error occurred while unzipping. Original error: ' + context$1$0.t0.message);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 15]]);
}

function assertZipArchive(zipPath) {
  var execOpts;
  return _regeneratorRuntime.async(function assertZipArchive$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Testing zip archive: ' + zipPath);

        if (!_appiumSupport.system.isWindows()) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(zipPath));

      case 4:
        if (!context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        _loggerJs2['default'].debug("Zip archive tested clean");
        context$1$0.next = 9;
        break;

      case 8:
        throw new Error('Zip archive not present at ' + zipPath);

      case 9:
        context$1$0.next = 14;
        break;

      case 11:
        execOpts = { cwd: _path2['default'].dirname(zipPath) };
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('unzip', ['-tq', zipPath], execOpts));

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getIMEListFromOutput(stdout) {
  var engines = [];
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = _getIterator(stdout.split('\n')), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var line = _step3.value;

      if (line.length > 0 && line[0] !== ' ') {
        // remove newline and trailing colon, and add to the list
        engines.push(line.trim().replace(/:$/, ''));
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3['return']) {
        _iterator3['return']();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return engines;
}

function getJavaForOs() {
  var sep = _path2['default'].sep;
  var java = '' + getJavaHome() + sep + 'bin' + sep + 'java';
  if (_appiumSupport.system.isWindows()) {
    java = java + '.exe';
  }
  return java;
}

function getJavaHome() {
  if (process.env.JAVA_HOME) {
    return process.env.JAVA_HOME;
  }
  throw new Error("JAVA_HOME is not set currently. Please set JAVA_HOME.");
}

/*
 * Checks mShowingLockscreen in dumpsys output to determine if lock screen is showing
 */
function isShowingLockscreen(dumpsys) {
  var m = /mShowingLockscreen=\w+/gi.exec(dumpsys);
  var ret = m && m.length && m[0].split('=')[1] === 'true' || false;
  return ret;
}

/*
 * Checks mCurrentFocus in dumpsys output to determine if Keyguard is activated
 */
function isCurrentFocusOnKeyguard(dumpsys) {
  var m = /mCurrentFocus.+Keyguard/gi.exec(dumpsys);
  return m && m.length && m[0] ? true : false;
}

/*
 * Reads SurfaceOrientation in dumpsys output
 */
function getSurfaceOrientation(dumpsys) {
  var m = /SurfaceOrientation: \d/gi.exec(dumpsys);
  return m && parseInt(m[0].split(':')[1]);
}

/*
 * Checks mScreenOnFully in dumpsys output to determine if screen is showing
 * Default is true
 */
function isScreenOnFully(dumpsys) {
  var m = /mScreenOnFully=\w+/gi.exec(dumpsys);
  return !m || // if information is missing we assume screen is fully on
  m && m.length > 0 && m[0].split('=')[1] === 'true' || false;
}

function buildStartCmd(startAppOptions, apiLevel) {
  var cmd = ['am', 'start', '-W', '-n', startAppOptions.pkg + '/' + startAppOptions.activity];
  if (startAppOptions.stopApp && apiLevel >= 15) {
    cmd.push('-S');
  }
  if (startAppOptions.action) {
    cmd.push('-a', startAppOptions.action);
  }
  if (startAppOptions.category) {
    cmd.push('-c', startAppOptions.category);
  }
  if (startAppOptions.flags) {
    cmd.push('-f', startAppOptions.flags);
  }
  if (startAppOptions.optionalIntentArguments) {
    // expect optionalIntentArguments to be a single string of the form:
    //     "-flag key"
    //     "-flag key value"
    // or a combination of these (e.g., "-flag1 key1 -flag2 key2 value2")

    // take a string and parse out the part before any spaces, and anything after
    // the first space
    var parseKeyValue = function parseKeyValue(str) {
      str = str.trim();
      var space = str.indexOf(' ');
      if (space === -1) {
        return str.length ? [str] : [];
      } else {
        return [str.substring(0, space).trim(), str.substring(space + 1).trim()];
      }
    };

    // cycle through the optionalIntentArguments and pull out the arguments
    // add a space initially so flags can be distinguished from arguments that
    // have internal hyphens
    var optionalIntentArguments = ' ' + startAppOptions.optionalIntentArguments;
    var re = / (-[^\s]+) (.+)/;
    while (true) {
      // eslint-disable-line no-constant-condition
      var args = re.exec(optionalIntentArguments);
      if (!args) {
        if (optionalIntentArguments.length) {
          // no more flags, so the remainder can be treated as 'key' or 'key value'
          cmd.push.apply(cmd, parseKeyValue(optionalIntentArguments));
        }
        // we are done
        break;
      }

      // take the flag and see if it is at the beginning of the string
      // if it is not, then it means we have been through already, and
      // what is before the flag is the argument for the previous flag
      var flag = args[1];
      var flagPos = optionalIntentArguments.indexOf(flag);
      if (flagPos !== 0) {
        var prevArgs = optionalIntentArguments.substring(0, flagPos);
        cmd.push.apply(cmd, parseKeyValue(prevArgs));
      }

      // add the flag, as there are no more earlier arguments
      cmd.push(flag);

      // make optionalIntentArguments hold the remainder
      optionalIntentArguments = args[2];
    }
  }
  return cmd;
}

function getSdkToolsVersion() {
  var androidHome, propertiesPath, propertiesContent, versionMatcher, match;
  return _regeneratorRuntime.async(function getSdkToolsVersion$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        androidHome = process.env.ANDROID_HOME;

        if (!androidHome) {
          _loggerJs2['default'].errorAndThrow('ANDROID_HOME environment varibale is expected to be set');
        }
        propertiesPath = _path2['default'].resolve(androidHome, 'tools', 'source.properties');
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(propertiesPath));

      case 5:
        if (context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        _loggerJs2['default'].warn('Cannot find ' + propertiesPath + ' file to read SDK version from');
        return context$1$0.abrupt('return');

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(propertiesPath, 'utf8'));

      case 10:
        propertiesContent = context$1$0.sent;
        versionMatcher = new RegExp(/Pkg\.Revision=(\d+)\.?(\d+)?\.?(\d+)?/);
        match = versionMatcher.exec(propertiesContent);

        if (!match) {
          context$1$0.next = 15;
          break;
        }

        return context$1$0.abrupt('return', { major: parseInt(match[1], 10),
          minor: match[2] ? parseInt(match[2], 10) : 0,
          build: match[3] ? parseInt(match[3], 10) : 0 });

      case 15:
        _loggerJs2['default'].warn('Cannot parse "Pkg.Revision" value from ' + propertiesPath);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.getDirectories = getDirectories;
exports.getAndroidPlatformAndPath = getAndroidPlatformAndPath;
exports.unzipFile = unzipFile;
exports.assertZipArchive = assertZipArchive;
exports.getIMEListFromOutput = getIMEListFromOutput;
exports.getJavaForOs = getJavaForOs;
exports.isShowingLockscreen = isShowingLockscreen;
exports.isCurrentFocusOnKeyguard = isCurrentFocusOnKeyguard;
exports.getSurfaceOrientation = getSurfaceOrientation;
exports.isScreenOnFully = isScreenOnFully;
exports.buildStartCmd = buildStartCmd;
exports.getJavaHome = getJavaHome;
exports.rootDir = rootDir;
exports.androidPlatforms = androidPlatforms;
exports.getSdkToolsVersion = getSdkToolsVersion;

// It is not a clean way to sort it, but in this case would work fine because
// we have numerics and alphanumeric
// will return some thing like this
// ["17.0.0", "18.0.1", "19.0.0", "19.0.1", "19.1.0", "20.0.0",
//  "android-4.2.2", "android-4.3", "android-4.4"]

// get the latest platform and path
//# sourceMappingURL=data:application/json;charset=utf8;base64,
