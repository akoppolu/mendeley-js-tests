'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _teen_process = require('teen_process');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _appiumSupport = require('appium-support');

var _helpersJs = require('../helpers.js');

var apkSigningMethods = {};

apkSigningMethods.signWithDefaultCert = function callee$0$0(apk) {
  var java, signPath;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        java = (0, _helpersJs.getJavaForOs)();
        signPath = _path2['default'].resolve(this.helperJarPath, 'sign.jar');

        _loggerJs2['default'].debug("Resigning apk.");
        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(apk));

      case 6:
        if (context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        throw new Error(apk + ' file doesn\'t exist.');

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(java, ['-jar', signPath, apk, '--override']));

      case 10:
        context$1$0.next = 15;
        break;

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](3);

        _loggerJs2['default'].errorAndThrow('Could not sign with default ceritficate. Original error ' + context$1$0.t0.message);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 12]]);
};

apkSigningMethods.signWithCustomCert = function callee$0$0(apk) {
  var java, javaHome, jarsigner;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Signing \'' + apk + '\' with custom cert');
        java = (0, _helpersJs.getJavaForOs)();
        javaHome = (0, _helpersJs.getJavaHome)();
        jarsigner = _path2['default'].resolve(javaHome, 'bin', 'jarsigner');

        if (_appiumSupport.system.isWindows()) {
          jarsigner = jarsigner + '.exe';
        }
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.keystorePath));

      case 7:
        if (context$1$0.sent) {
          context$1$0.next = 9;
          break;
        }

        throw new Error('Keystore: ' + this.keystorePath + ' doesn\'t exist.');

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(apk));

      case 11:
        if (context$1$0.sent) {
          context$1$0.next = 13;
          break;
        }

        throw new Error(apk + ' file doesn\'t exist.');

      case 13:
        context$1$0.prev = 13;

        _loggerJs2['default'].debug("Unsigning apk.");
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(java, ['-jar', _path2['default'].resolve(this.helperJarPath, 'unsign.jar'), apk]));

      case 17:
        _loggerJs2['default'].debug("Signing apk.");
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(jarsigner, ['-sigalg', 'MD5withRSA', '-digestalg', 'SHA1', '-keystore', this.keystorePath, '-storepass', this.keystorePassword, '-keypass', this.keyPassword, apk, this.keyAlias]));

      case 20:
        context$1$0.next = 25;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](13);

        _loggerJs2['default'].errorAndThrow('Could not sign with custom ceritficate. Original error ' + context$1$0.t0.message);

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[13, 22]]);
};

apkSigningMethods.sign = function callee$0$0(apk) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.useKeystore) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.signWithCustomCert(apk));

      case 3:
        context$1$0.next = 7;
        break;

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.signWithDefaultCert(apk));

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.zipAlignApk(apk));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkSigningMethods.zipAlignApk = function callee$0$0(apk) {
  var alignedApk;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Zip-aligning \'' + apk + '\'');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.initZipAlign());

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({ prefix: 'appium', suffix: '.tmp' }));

      case 5:
        alignedApk = context$1$0.sent;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(_path2['default'].dirname(alignedApk)));

      case 8:
        _loggerJs2['default'].debug("Zip-aligning apk.");
        context$1$0.prev = 9;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.binaries.zipalign, ['-f', '4', apk, alignedApk]));

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.mv(alignedApk, apk, { mkdirp: true }));

      case 14:
        context$1$0.next = 19;
        break;

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](9);

        _loggerJs2['default'].errorAndThrow('zipAlignApk failed. Original error: ' + context$1$0.t0.message);

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 16]]);
};

// returns true when already signed, false otherwise.
apkSigningMethods.checkApkCert = function callee$0$0(apk, pkg) {
  var java;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        java = (0, _helpersJs.getJavaForOs)();
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(apk));

      case 3:
        if (context$1$0.sent) {
          context$1$0.next = 6;
          break;
        }

        _loggerJs2['default'].debug('APK doesn\'t exist. ' + apk);
        return context$1$0.abrupt('return', false);

      case 6:
        if (!this.useKeystore) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.checkCustomApkCert(apk, pkg));

      case 9:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 10:
        _loggerJs2['default'].debug('Checking app cert for ' + apk + '.');
        context$1$0.prev = 11;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(java, ['-jar', _path2['default'].resolve(this.helperJarPath, 'verify.jar'), apk]));

      case 14:
        _loggerJs2['default'].debug("App already signed.");
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(this.zipAlignApk(apk));

      case 17:
        return context$1$0.abrupt('return', true);

      case 20:
        context$1$0.prev = 20;
        context$1$0.t0 = context$1$0['catch'](11);

        _loggerJs2['default'].debug("App not signed with debug cert.");
        return context$1$0.abrupt('return', false);

      case 24:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[11, 20]]);
};

apkSigningMethods.checkCustomApkCert = function callee$0$0(apk, pkg) {
  var h, md5Str, md5, javaHome, keytool, keystoreHash;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Checking custom app cert for ' + apk);
        h = "a-fA-F0-9";
        md5Str = ['.*MD5.*((?:[' + h + ']{2}:){15}[' + h + ']{2})'];
        md5 = new RegExp(md5Str, 'mi');
        javaHome = (0, _helpersJs.getJavaHome)();
        keytool = _path2['default'].resolve(javaHome, 'bin', 'keytool');

        keytool = _appiumSupport.system.isWindows() ? keytool + '.exe' : keytool;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.getKeystoreMd5(keytool, md5));

      case 9:
        keystoreHash = context$1$0.sent;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.checkApkKeystoreMatch(keytool, md5, keystoreHash, pkg, apk));

      case 12:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkSigningMethods.getKeystoreMd5 = function callee$0$0(keytool, md5re) {
  var keystoreHash, _ref, stdout;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        keystoreHash = undefined;

        _loggerJs2['default'].debug("Printing keystore md5.");
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(keytool, ['-v', '-list', '-alias', this.keyAlias, '-keystore', this.keystorePath, '-storepass', this.keystorePassword]));

      case 5:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;

        keystoreHash = md5re.exec(stdout);
        keystoreHash = keystoreHash ? keystoreHash[1] : null;
        _loggerJs2['default'].debug('Keystore MD5: ' + keystoreHash);
        return context$1$0.abrupt('return', keystoreHash);

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](2);

        _loggerJs2['default'].errorAndThrow('getKeystoreMd5 failed. Original error: ' + context$1$0.t0.message);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 13]]);
};

apkSigningMethods.checkApkKeystoreMatch = function callee$0$0(keytool, md5re, keystoreHash, pkg, apk) {
  var entryHash, rsa, foundKeystoreMatch;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        entryHash = null;
        rsa = /^META-INF\/.*\.[rR][sS][aA]$/;
        foundKeystoreMatch = false;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.zip.readEntries(apk, function callee$1$0(_ref2) {
          var entry = _ref2.entry;
          var extractEntryTo = _ref2.extractEntryTo;

          var entryPath, entryFile, _ref3, stdout, matchesKeystore;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                entry = entry.fileName;

                if (rsa.test(entry)) {
                  context$2$0.next = 3;
                  break;
                }

                return context$2$0.abrupt('return');

              case 3:
                _loggerJs2['default'].debug('Entry: ' + entry);
                entryPath = _path2['default'].join(this.tmpDir, pkg, 'cert');

                _loggerJs2['default'].debug('entryPath: ' + entryPath);
                entryFile = _path2['default'].join(entryPath, entry);

                _loggerJs2['default'].debug('entryFile: ' + entryFile);
                // ensure /tmp/pkg/cert/ doesn't exist or extract will fail.
                context$2$0.next = 10;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(entryPath));

              case 10:
                context$2$0.next = 12;
                return _regeneratorRuntime.awrap(extractEntryTo(entryPath));

              case 12:
                _loggerJs2['default'].debug("extracted!");
                // check for match
                _loggerJs2['default'].debug("Printing apk md5.");
                context$2$0.next = 16;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)(keytool, ['-v', '-printcert', '-file', entryFile]));

              case 16:
                _ref3 = context$2$0.sent;
                stdout = _ref3.stdout;

                entryHash = md5re.exec(stdout);
                entryHash = entryHash ? entryHash[1] : null;
                _loggerJs2['default'].debug('entryHash MD5: ' + entryHash);
                _loggerJs2['default'].debug('keystore MD5: ' + keystoreHash);
                matchesKeystore = entryHash && entryHash === keystoreHash;

                _loggerJs2['default'].debug('Matches keystore? ' + matchesKeystore);

                // If we have a keystore match, stop iterating

                if (!matchesKeystore) {
                  context$2$0.next = 27;
                  break;
                }

                foundKeystoreMatch = true;
                return context$2$0.abrupt('return', false);

              case 27:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 5:
        return context$1$0.abrupt('return', foundKeystoreMatch);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports['default'] = apkSigningMethods;
module.exports = exports['default'];

//for (let entry of entries) {
// META-INF/CERT.RSA
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9hcGstc2lnbmluZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OzRCQUFxQixjQUFjOztvQkFDbEIsTUFBTTs7Ozt3QkFDUCxjQUFjOzs7OzZCQUNtQixnQkFBZ0I7O3lCQUN2QixlQUFlOztBQUV6RCxJQUFJLGlCQUFpQixHQUFHLEVBQUUsQ0FBQzs7QUFHM0IsaUJBQWlCLENBQUMsbUJBQW1CLEdBQUcsb0JBQWdCLEdBQUc7TUFDbkQsSUFBSSxFQUNOLFFBQVE7Ozs7QUFETixZQUFJLEdBQUcsOEJBQWM7QUFDdkIsZ0JBQVEsR0FBRyxrQkFBSyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUM7O0FBQzNELDhCQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOzs7eUNBRWQsa0JBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQzs7Ozs7Ozs7Y0FDbEIsSUFBSSxLQUFLLENBQUksR0FBRywyQkFBdUI7Ozs7eUNBRXpDLHdCQUFLLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFlBQVksQ0FBQyxDQUFDOzs7Ozs7Ozs7O0FBRXZELDhCQUFJLGFBQWEsOERBQTRELGVBQUUsT0FBTyxDQUFHLENBQUM7Ozs7Ozs7Q0FFN0YsQ0FBQzs7QUFFRixpQkFBaUIsQ0FBQyxrQkFBa0IsR0FBRyxvQkFBZ0IsR0FBRztNQUVsRCxJQUFJLEVBQ04sUUFBUSxFQUNSLFNBQVM7Ozs7QUFIYiw4QkFBSSxLQUFLLGdCQUFhLEdBQUcseUJBQXFCLENBQUM7QUFDekMsWUFBSSxHQUFHLDhCQUFjO0FBQ3ZCLGdCQUFRLEdBQUcsNkJBQWE7QUFDeEIsaUJBQVMsR0FBRyxrQkFBSyxPQUFPLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUM7O0FBQzFELFlBQUksc0JBQU8sU0FBUyxFQUFFLEVBQUU7QUFDdEIsbUJBQVMsR0FBRyxTQUFTLEdBQUcsTUFBTSxDQUFDO1NBQ2hDOzt5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QUFTLENBQUcsQ0FBQztBQUNqQyx5QkFBUyxHQUFHLGtCQUFLLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDOztBQUMzQyxzQ0FBSSxLQUFLLGlCQUFlLFNBQVMsQ0FBRyxDQUFDOzs7aURBRS9CLGtCQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7Ozs7aURBRXBCLGNBQWMsQ0FBQyxTQUFTLENBQUM7OztBQUMvQixzQ0FBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7O0FBRXhCLHNDQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDOztpREFDVix3QkFBSyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQzs7OztBQUF2RSxzQkFBTSxTQUFOLE1BQU07O0FBQ1gseUJBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLHlCQUFTLEdBQUcsU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDNUMsc0NBQUksS0FBSyxxQkFBbUIsU0FBUyxDQUFHLENBQUM7QUFDekMsc0NBQUksS0FBSyxvQkFBa0IsWUFBWSxDQUFHLENBQUM7QUFDdkMsK0JBQWUsR0FBRyxTQUFTLElBQUksU0FBUyxLQUFLLFlBQVk7O0FBQzdELHNDQUFJLEtBQUssd0JBQXNCLGVBQWUsQ0FBRyxDQUFDOzs7O3FCQUc5QyxlQUFlOzs7OztBQUNqQixrQ0FBa0IsR0FBRyxJQUFJLENBQUM7b0RBQ25CLEtBQUs7Ozs7Ozs7U0FFZixDQUFDOzs7NENBQ0ssa0JBQWtCOzs7Ozs7O0NBQzFCLENBQUM7O3FCQUVhLGlCQUFpQiIsImZpbGUiOiJsaWIvdG9vbHMvYXBrLXNpZ25pbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IHsgdGVtcERpciwgc3lzdGVtLCBta2RpcnAsIGZzLCB6aXAgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBnZXRKYXZhRm9yT3MsIGdldEphdmFIb21lIH0gZnJvbSAnLi4vaGVscGVycy5qcyc7XG5cbmxldCBhcGtTaWduaW5nTWV0aG9kcyA9IHt9O1xuXG5cbmFwa1NpZ25pbmdNZXRob2RzLnNpZ25XaXRoRGVmYXVsdENlcnQgPSBhc3luYyBmdW5jdGlvbiAoYXBrKSB7XG4gIGNvbnN0IGphdmEgPSBnZXRKYXZhRm9yT3MoKTtcbiAgbGV0IHNpZ25QYXRoID0gcGF0aC5yZXNvbHZlKHRoaXMuaGVscGVySmFyUGF0aCwgJ3NpZ24uamFyJyk7XG4gIGxvZy5kZWJ1ZyhcIlJlc2lnbmluZyBhcGsuXCIpO1xuICB0cnkge1xuICAgIGlmICghKGF3YWl0IGZzLmV4aXN0cyhhcGspKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Fwa30gZmlsZSBkb2Vzbid0IGV4aXN0LmApO1xuICAgIH1cbiAgICBhd2FpdCBleGVjKGphdmEsIFsnLWphcicsIHNpZ25QYXRoLCBhcGssICctLW92ZXJyaWRlJ10pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBzaWduIHdpdGggZGVmYXVsdCBjZXJpdGZpY2F0ZS4gT3JpZ2luYWwgZXJyb3IgJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbmFwa1NpZ25pbmdNZXRob2RzLnNpZ25XaXRoQ3VzdG9tQ2VydCA9IGFzeW5jIGZ1bmN0aW9uIChhcGspIHtcbiAgbG9nLmRlYnVnKGBTaWduaW5nICcke2Fwa30nIHdpdGggY3VzdG9tIGNlcnRgKTtcbiAgY29uc3QgamF2YSA9IGdldEphdmFGb3JPcygpO1xuICBsZXQgamF2YUhvbWUgPSBnZXRKYXZhSG9tZSgpO1xuICBsZXQgamFyc2lnbmVyID0gcGF0aC5yZXNvbHZlKGphdmFIb21lLCAnYmluJywgJ2phcnNpZ25lcicpO1xuICBpZiAoc3lzdGVtLmlzV2luZG93cygpKSB7XG4gICAgamFyc2lnbmVyID0gamFyc2lnbmVyICsgJy5leGUnO1xuICB9XG4gIGlmICghKGF3YWl0IGZzLmV4aXN0cyh0aGlzLmtleXN0b3JlUGF0aCkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBLZXlzdG9yZTogJHt0aGlzLmtleXN0b3JlUGF0aH0gZG9lc24ndCBleGlzdC5gKTtcbiAgfVxuICBpZiAoIShhd2FpdCBmcy5leGlzdHMoYXBrKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7YXBrfSBmaWxlIGRvZXNuJ3QgZXhpc3QuYCk7XG4gIH1cbiAgdHJ5IHtcbiAgICBsb2cuZGVidWcoXCJVbnNpZ25pbmcgYXBrLlwiKTtcbiAgICBhd2FpdCBleGVjKGphdmEsIFsnLWphcicsIHBhdGgucmVzb2x2ZSh0aGlzLmhlbHBlckphclBhdGgsICd1bnNpZ24uamFyJyksIGFwa10pO1xuICAgIGxvZy5kZWJ1ZyhcIlNpZ25pbmcgYXBrLlwiKTtcbiAgICBhd2FpdCBleGVjKGphcnNpZ25lciwgWyctc2lnYWxnJywgJ01ENXdpdGhSU0EnLCAnLWRpZ2VzdGFsZycsICdTSEExJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICcta2V5c3RvcmUnLCB0aGlzLmtleXN0b3JlUGF0aCwgJy1zdG9yZXBhc3MnLCB0aGlzLmtleXN0b3JlUGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnLWtleXBhc3MnLCB0aGlzLmtleVBhc3N3b3JkLCBhcGssIHRoaXMua2V5QWxpYXNdKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3Qgc2lnbiB3aXRoIGN1c3RvbSBjZXJpdGZpY2F0ZS4gT3JpZ2luYWwgZXJyb3IgJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbmFwa1NpZ25pbmdNZXRob2RzLnNpZ24gPSBhc3luYyBmdW5jdGlvbiAoYXBrKSB7XG4gIGlmICh0aGlzLnVzZUtleXN0b3JlKSB7XG4gICAgYXdhaXQgdGhpcy5zaWduV2l0aEN1c3RvbUNlcnQoYXBrKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCB0aGlzLnNpZ25XaXRoRGVmYXVsdENlcnQoYXBrKTtcbiAgfVxuICBhd2FpdCB0aGlzLnppcEFsaWduQXBrKGFwayk7XG59O1xuXG5hcGtTaWduaW5nTWV0aG9kcy56aXBBbGlnbkFwayA9IGFzeW5jIGZ1bmN0aW9uIChhcGspIHtcbiAgbG9nLmRlYnVnKGBaaXAtYWxpZ25pbmcgJyR7YXBrfSdgKTtcbiAgYXdhaXQgdGhpcy5pbml0WmlwQWxpZ24oKTtcbiAgbGV0IGFsaWduZWRBcGsgPSBhd2FpdCB0ZW1wRGlyLnBhdGgoe3ByZWZpeDogJ2FwcGl1bScsIHN1ZmZpeDogJy50bXAnfSk7XG4gIGF3YWl0IG1rZGlycChwYXRoLmRpcm5hbWUoYWxpZ25lZEFwaykpO1xuICBsb2cuZGVidWcoXCJaaXAtYWxpZ25pbmcgYXBrLlwiKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBleGVjKHRoaXMuYmluYXJpZXMuemlwYWxpZ24sIFsnLWYnLCAnNCcsIGFwaywgYWxpZ25lZEFwa10pO1xuICAgIGF3YWl0IGZzLm12KGFsaWduZWRBcGssIGFwaywgeyBta2RpcnA6IHRydWUgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgemlwQWxpZ25BcGsgZmFpbGVkLiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbi8vIHJldHVybnMgdHJ1ZSB3aGVuIGFscmVhZHkgc2lnbmVkLCBmYWxzZSBvdGhlcndpc2UuXG5hcGtTaWduaW5nTWV0aG9kcy5jaGVja0Fwa0NlcnQgPSBhc3luYyBmdW5jdGlvbiAoYXBrLCBwa2cpIHtcbiAgY29uc3QgamF2YSA9IGdldEphdmFGb3JPcygpO1xuICBpZiAoIShhd2FpdCBmcy5leGlzdHMoYXBrKSkpIHtcbiAgICBsb2cuZGVidWcoYEFQSyBkb2Vzbid0IGV4aXN0LiAke2Fwa31gKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHRoaXMudXNlS2V5c3RvcmUpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jaGVja0N1c3RvbUFwa0NlcnQoYXBrLCBwa2cpO1xuICB9XG4gIGxvZy5kZWJ1ZyhgQ2hlY2tpbmcgYXBwIGNlcnQgZm9yICR7YXBrfS5gKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBleGVjKGphdmEsIFsnLWphcicsIHBhdGgucmVzb2x2ZSh0aGlzLmhlbHBlckphclBhdGgsICd2ZXJpZnkuamFyJyksIGFwa10pO1xuICAgIGxvZy5kZWJ1ZyhcIkFwcCBhbHJlYWR5IHNpZ25lZC5cIik7XG4gICAgYXdhaXQgdGhpcy56aXBBbGlnbkFwayhhcGspO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nLmRlYnVnKFwiQXBwIG5vdCBzaWduZWQgd2l0aCBkZWJ1ZyBjZXJ0LlwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmFwa1NpZ25pbmdNZXRob2RzLmNoZWNrQ3VzdG9tQXBrQ2VydCA9IGFzeW5jIGZ1bmN0aW9uIChhcGssIHBrZykge1xuICBsb2cuZGVidWcoYENoZWNraW5nIGN1c3RvbSBhcHAgY2VydCBmb3IgJHthcGt9YCk7XG4gIGxldCBoID0gXCJhLWZBLUYwLTlcIjtcbiAgbGV0IG1kNVN0ciA9IFtgLipNRDUuKigoPzpbJHtofV17Mn06KXsxNX1bJHtofV17Mn0pYF07XG4gIGxldCBtZDUgPSBuZXcgUmVnRXhwKG1kNVN0ciwgJ21pJyk7XG4gIGxldCBqYXZhSG9tZSA9IGdldEphdmFIb21lKCk7XG4gIGxldCBrZXl0b29sID0gcGF0aC5yZXNvbHZlKGphdmFIb21lLCAnYmluJywgJ2tleXRvb2wnKTtcbiAga2V5dG9vbCA9IHN5c3RlbS5pc1dpbmRvd3MoKSA/IGAke2tleXRvb2x9LmV4ZWAgOiBrZXl0b29sO1xuICBsZXQga2V5c3RvcmVIYXNoID0gYXdhaXQgdGhpcy5nZXRLZXlzdG9yZU1kNShrZXl0b29sLCBtZDUpO1xuICByZXR1cm4gYXdhaXQgdGhpcy5jaGVja0Fwa0tleXN0b3JlTWF0Y2goa2V5dG9vbCwgbWQ1LCBrZXlzdG9yZUhhc2gsIHBrZywgYXBrKTtcbn07XG5cbmFwa1NpZ25pbmdNZXRob2RzLmdldEtleXN0b3JlTWQ1ID0gYXN5bmMgZnVuY3Rpb24gKGtleXRvb2wsIG1kNXJlKSB7XG4gIGxldCBrZXlzdG9yZUhhc2g7XG4gIGxvZy5kZWJ1ZyhcIlByaW50aW5nIGtleXN0b3JlIG1kNS5cIik7XG4gIHRyeSB7XG4gICAgbGV0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYyhrZXl0b29sLCBbJy12JywgJy1saXN0JywgJy1hbGlhcycsIHRoaXMua2V5QWxpYXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAnLWtleXN0b3JlJywgdGhpcy5rZXlzdG9yZVBhdGgsICctc3RvcmVwYXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXN0b3JlUGFzc3dvcmRdKTtcbiAgICBrZXlzdG9yZUhhc2ggPSBtZDVyZS5leGVjKHN0ZG91dCk7XG4gICAga2V5c3RvcmVIYXNoID0ga2V5c3RvcmVIYXNoID8ga2V5c3RvcmVIYXNoWzFdIDogbnVsbDtcbiAgICBsb2cuZGVidWcoYEtleXN0b3JlIE1ENTogJHtrZXlzdG9yZUhhc2h9YCk7XG4gICAgcmV0dXJuIGtleXN0b3JlSGFzaDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBnZXRLZXlzdG9yZU1kNSBmYWlsZWQuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuYXBrU2lnbmluZ01ldGhvZHMuY2hlY2tBcGtLZXlzdG9yZU1hdGNoID0gYXN5bmMgZnVuY3Rpb24gKGtleXRvb2wsIG1kNXJlLCBrZXlzdG9yZUhhc2gsXG4gICAgcGtnLCBhcGspIHtcbiAgbGV0IGVudHJ5SGFzaCA9IG51bGw7XG4gIGxldCByc2EgPSAvXk1FVEEtSU5GXFwvLipcXC5bclJdW3NTXVthQV0kLztcbiAgbGV0IGZvdW5kS2V5c3RvcmVNYXRjaCA9IGZhbHNlO1xuXG4gIC8vZm9yIChsZXQgZW50cnkgb2YgZW50cmllcykge1xuICBhd2FpdCB6aXAucmVhZEVudHJpZXMoYXBrLCBhc3luYyAoe2VudHJ5LCBleHRyYWN0RW50cnlUb30pID0+IHtcbiAgICBlbnRyeSA9IGVudHJ5LmZpbGVOYW1lO1xuICAgIGlmICghcnNhLnRlc3QoZW50cnkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhgRW50cnk6ICR7ZW50cnl9YCk7XG4gICAgbGV0IGVudHJ5UGF0aCA9IHBhdGguam9pbih0aGlzLnRtcERpciwgcGtnLCAnY2VydCcpO1xuICAgIGxvZy5kZWJ1ZyhgZW50cnlQYXRoOiAke2VudHJ5UGF0aH1gKTtcbiAgICBsZXQgZW50cnlGaWxlID0gcGF0aC5qb2luKGVudHJ5UGF0aCwgZW50cnkpO1xuICAgIGxvZy5kZWJ1ZyhgZW50cnlGaWxlOiAke2VudHJ5RmlsZX1gKTtcbiAgICAvLyBlbnN1cmUgL3RtcC9wa2cvY2VydC8gZG9lc24ndCBleGlzdCBvciBleHRyYWN0IHdpbGwgZmFpbC5cbiAgICBhd2FpdCBmcy5yaW1yYWYoZW50cnlQYXRoKTtcbiAgICAvLyBNRVRBLUlORi9DRVJULlJTQVxuICAgIGF3YWl0IGV4dHJhY3RFbnRyeVRvKGVudHJ5UGF0aCk7XG4gICAgbG9nLmRlYnVnKFwiZXh0cmFjdGVkIVwiKTtcbiAgICAvLyBjaGVjayBmb3IgbWF0Y2hcbiAgICBsb2cuZGVidWcoXCJQcmludGluZyBhcGsgbWQ1LlwiKTtcbiAgICBsZXQge3N0ZG91dH0gPSBhd2FpdCBleGVjKGtleXRvb2wsIFsnLXYnLCAnLXByaW50Y2VydCcsICctZmlsZScsIGVudHJ5RmlsZV0pO1xuICAgIGVudHJ5SGFzaCA9IG1kNXJlLmV4ZWMoc3Rkb3V0KTtcbiAgICBlbnRyeUhhc2ggPSBlbnRyeUhhc2ggPyBlbnRyeUhhc2hbMV0gOiBudWxsO1xuICAgIGxvZy5kZWJ1ZyhgZW50cnlIYXNoIE1ENTogJHtlbnRyeUhhc2h9YCk7XG4gICAgbG9nLmRlYnVnKGBrZXlzdG9yZSBNRDU6ICR7a2V5c3RvcmVIYXNofWApO1xuICAgIGxldCBtYXRjaGVzS2V5c3RvcmUgPSBlbnRyeUhhc2ggJiYgZW50cnlIYXNoID09PSBrZXlzdG9yZUhhc2g7XG4gICAgbG9nLmRlYnVnKGBNYXRjaGVzIGtleXN0b3JlPyAke21hdGNoZXNLZXlzdG9yZX1gKTtcblxuICAgIC8vIElmIHdlIGhhdmUgYSBrZXlzdG9yZSBtYXRjaCwgc3RvcCBpdGVyYXRpbmdcbiAgICBpZiAobWF0Y2hlc0tleXN0b3JlKSB7XG4gICAgICBmb3VuZEtleXN0b3JlTWF0Y2ggPSB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmb3VuZEtleXN0b3JlTWF0Y2g7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhcGtTaWduaW5nTWV0aG9kcztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
