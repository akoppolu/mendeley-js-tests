'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url2 = require('url');

var _url3 = _interopRequireDefault(_url2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _asyncbox = require('asyncbox');

var _teen_process = require('teen_process');

var _appiumBaseDriver = require('appium-base-driver');

var _appiumSupport = require('appium-support');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _noSessionProxy = require("./no-session-proxy");

var _utilsJs = require('./utils.js');

var _webdriveragentUtils = require('./webdriveragent-utils');

var xcodeLog = _appiumSupport.logger.getLogger('Xcode');
var iproxyLog = _appiumSupport.logger.getLogger('iProxy');

var BOOTSTRAP_PATH = _path2['default'].resolve(__dirname, '..', '..', 'WebDriverAgent');
var WDA_BUNDLE_ID = 'com.apple.test.WebDriverAgentRunner-Runner';
var DEFAULT_SIGNING_ID = "iPhone Developer";
var WDA_LAUNCH_TIMEOUT = 60 * 1000;
var IPROXY_TIMEOUT = 5000;
var WDA_AGENT_PORT = 8100;
var WDA_BASE_URL = 'http://localhost';
var BUILD_TEST_DELAY = 1000;

var WebDriverAgent = (function () {

  // agentPath (optional): Path to WebdriverAgent Executable (inside WebDriverAgent.app)

  function WebDriverAgent(xcodeVersion) {
    var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, WebDriverAgent);

    this.xcodeVersion = xcodeVersion;

    this.device = args.device;
    this.platformVersion = args.platformVersion;
    this.host = args.host;
    this.realDevice = !!args.realDevice;

    this.setWDAPaths(args.bootstrapPath, args.agentPath);

    this.wdaLocalPort = args.wdaLocalPort;
    this.showXcodeLog = !!args.showXcodeLog;
    this.xcodeConfigFile = args.xcodeConfigFile;
    this.xcodeOrgId = args.xcodeOrgId;
    this.xcodeSigningId = args.xcodeSigningId || DEFAULT_SIGNING_ID;
    this.keychainPath = args.keychainPath;
    this.keychainPassword = args.keychainPassword;

    this.prebuildWDA = args.prebuildWDA;
    this.usePrebuiltWDA = args.usePrebuiltWDA;
    this.useSimpleBuildTest = args.useSimpleBuildTest;

    this.webDriverAgentUrl = args.webDriverAgentUrl;

    this.updatedWDABundleId = args.updatedWDABundleId;

    this.expectIProxyErrors = true;

    this.wdaLaunchTimeout = args.wdaLaunchTimeout || WDA_LAUNCH_TIMEOUT;
    this.wdaConnectionTimeout = args.wdaConnectionTimeout;

    this.useCarthageSsl = _lodash2['default'].isBoolean(args.useCarthageSsl) && args.useCarthageSsl;
  }

  _createClass(WebDriverAgent, [{
    key: 'setWDAPaths',
    value: function setWDAPaths(bootstrapPath, agentPath) {
      // allow the user to specify a place for WDA. This is undocumented and
      // only here for the purposes of testing development of WDA
      this.bootstrapPath = bootstrapPath || BOOTSTRAP_PATH;
      _logger2['default'].info('Using WDA path: \'' + this.bootstrapPath + '\'');

      // for backward compatibility we need to be able to specify agentPath too
      this.agentPath = agentPath || _path2['default'].resolve(this.bootstrapPath, 'WebDriverAgent.xcodeproj');
      _logger2['default'].info('Using WDA agent: \'' + this.agentPath + '\'');
    }
  }, {
    key: 'uninstall',
    value: function uninstall() {
      return _regeneratorRuntime.async(function uninstall$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Removing WDA application from device');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.device.removeApp(WDA_BUNDLE_ID));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'launch',
    value: function launch(sessionId) {
      return _regeneratorRuntime.async(function launch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.webDriverAgentUrl) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].info('Using provided WebdriverAgent at \'' + this.webDriverAgentUrl + '\'');
            this.url = this.webDriverAgentUrl;
            this.setupProxies(sessionId);
            return context$2$0.abrupt('return', this.webDriverAgentUrl);

          case 5:

            _logger2['default'].info('Launching WebDriverAgent on the device');

            this.setupProxies(sessionId);

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.agentPath));

          case 9:
            if (context$2$0.sent) {
              context$2$0.next = 11;
              break;
            }

            throw new Error('Trying to use WebDriverAgent project at \'' + this.agentPath + '\' but the ' + 'file does not exist');

          case 11:
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap((0, _webdriveragentUtils.checkForDependencies)(this.bootstrapPath, this.useCarthageSsl));

          case 13:
            if (!(this.realDevice && this.updatedWDABundleId)) {
              context$2$0.next = 16;
              break;
            }

            context$2$0.next = 16;
            return _regeneratorRuntime.awrap((0, _webdriveragentUtils.updateProjectFile)(this.agentPath, this.updatedWDABundleId));

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this.killHangingProcesses());

          case 18:
            if (!(this.xcodeVersion.major === 7 || this.xcodeVersion.major === 8 && this.xcodeVersion.minor === 0)) {
              context$2$0.next = 22;
              break;
            }

            _logger2['default'].debug('Using Xcode ' + this.xcodeVersion.versionString + ', so fixing WDA codebase');
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap((0, _webdriveragentUtils.fixForXcode7)(this.bootstrapPath, true));

          case 22:
            if (!this.prebuildWDA) {
              context$2$0.next = 37;
              break;
            }

            if (!(this.xcodeVersion.major === 7)) {
              context$2$0.next = 27;
              break;
            }

            _logger2['default'].debug('Capability \'prebuildWDA\' set, but on xcode version ' + this.xcodeVersion.versionString + ' so skipping');
            context$2$0.next = 37;
            break;

          case 27:
            // first do a build phase
            _logger2['default'].debug('Pre-building WDA before launching test');
            this.usePrebuiltWDA = true;
            context$2$0.next = 31;
            return _regeneratorRuntime.awrap(this.createXcodeBuildSubProcess(true));

          case 31:
            this.xcodebuild = context$2$0.sent;
            context$2$0.next = 34;
            return _regeneratorRuntime.awrap(this.startXcodebuild(true));

          case 34:
            this.xcodebuild = null;
            // pause a moment
            context$2$0.next = 37;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(BUILD_TEST_DELAY));

          case 37:
            context$2$0.next = 39;
            return _regeneratorRuntime.awrap(this.createXcodeBuildSubProcess());

          case 39:
            this.xcodebuild = context$2$0.sent;

            if (!this.realDevice) {
              context$2$0.next = 44;
              break;
            }

            this.iproxy = this.createiProxySubProcess(this.url.port, WDA_AGENT_PORT);
            context$2$0.next = 44;
            return _regeneratorRuntime.awrap(this.startiproxy());

          case 44:
            context$2$0.next = 46;
            return _regeneratorRuntime.awrap(this.startXcodebuild());

          case 46:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 47:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setupProxies',
    value: function setupProxies(sessionId) {
      var proxyOpts = {
        server: this.url.hostname,
        port: this.url.port,
        base: '',
        timeout: this.wdaConnectionTimeout
      };

      this.jwproxy = new _appiumBaseDriver.JWProxy(proxyOpts);
      this.jwproxy.sessionId = sessionId;
      this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);

      this.noSessionProxy = new _noSessionProxy.NoSessionProxy(proxyOpts);
      this.noSessionProxyReqRes = this.noSessionProxy.proxyReqRes.bind(this.noSessionProxy);
    }
  }, {
    key: 'getXcodeBuildCommand',
    value: function getXcodeBuildCommand() {
      var _args;

      var buildOnly = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      var cmd = 'xcodebuild';
      var args = undefined;

      // figure out the targets for xcodebuild
      if (this.xcodeVersion.major < 8) {
        if (this.usePrebuiltWDA) {
          var msg = '\'usePrebuiltWDA\' set, but on Xcode ' + ('\'' + this.xcodeVersion.versionString + '\', so skipping, as it ') + 'needs a version >= 8';
          _logger2['default'].warn(msg);
        }
        args = ['build', 'test'];
      } else {
        var _ref = this.useSimpleBuildTest ? ['build', 'test'] : ['build-for-testing', 'test-without-building'];

        var _ref2 = _slicedToArray(_ref, 2);

        var buildCmd = _ref2[0];
        var testCmd = _ref2[1];

        if (buildOnly) {
          args = [buildCmd];
        } else if (this.usePrebuiltWDA) {
          args = [testCmd];
        } else {
          args = [buildCmd, testCmd];
        }
      }

      // add the rest of the arguments for the xcodebuild command
      var genericArgs = ['-project', this.agentPath, '-scheme', 'WebDriverAgentRunner', '-destination', 'id=' + this.device.udid, '-configuration', 'Debug'];
      (_args = args).push.apply(_args, genericArgs);

      var versionMatch = new RegExp(/^(\d+)\.(\d+)/).exec(this.platformVersion);
      if (versionMatch) {
        args.push('IPHONEOS_DEPLOYMENT_TARGET=' + versionMatch[1] + '.' + versionMatch[2]);
      } else {
        _logger2['default'].warn('Cannot parse major and minor version numbers from platformVersion "' + this.platformVersion + '". ' + 'Will build for the default platform instead');
      }

      if (this.realDevice && this.xcodeConfigFile) {
        _logger2['default'].debug('Using Xcode configuration file: \'' + this.xcodeConfigFile + '\'');
        args.push('-xcconfig', this.xcodeConfigFile);
      }

      return { cmd: cmd, args: args };
    }
  }, {
    key: 'createXcodeBuildSubProcess',
    value: function createXcodeBuildSubProcess() {
      var buildOnly = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      var _getXcodeBuildCommand, cmd, args, xcodebuild, logXcodeOutput;

      return _regeneratorRuntime.async(function createXcodeBuildSubProcess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.realDevice) {
              context$2$0.next = 8;
              break;
            }

            if (!(this.keychainPath && this.keychainPassword)) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((0, _webdriveragentUtils.setRealDeviceSecurity)(this.keychainPath, this.keychainPassword));

          case 4:
            if (!(this.xcodeOrgId && this.xcodeSigningId && !this.xcodeConfigFile)) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _utilsJs.generateXcodeConfigFile)(this.xcodeOrgId, this.xcodeSigningId));

          case 7:
            this.xcodeConfigFile = context$2$0.sent;

          case 8:
            _getXcodeBuildCommand = this.getXcodeBuildCommand(buildOnly);
            cmd = _getXcodeBuildCommand.cmd;
            args = _getXcodeBuildCommand.args;

            _logger2['default'].debug('Beginning ' + (buildOnly ? 'build' : 'test') + ' with command \'' + cmd + ' ' + args.join(' ') + '\' ' + ('in directory \'' + this.bootstrapPath + '\''));
            xcodebuild = new _teen_process.SubProcess(cmd, args, { cwd: this.bootstrapPath });
            logXcodeOutput = this.showXcodeLog;

            _logger2['default'].debug('Output from xcodebuild ' + (logXcodeOutput ? 'will' : 'will not') + ' be logged');
            xcodebuild.on('output', function (stdout, stderr) {
              var out = stdout || stderr;
              // we want to pull out the log file that is created, and highlight it
              // for diagnostic purposes
              if (out.indexOf('Writing diagnostic log for test session to') !== -1) {
                // pull out the first line that begins with the path separator
                // which *should* be the line indicating the log file generated
                xcodebuild.logLocation = _lodash2['default'].first(_lodash2['default'].remove(out.trim().split('\n'), function (v) {
                  return v.indexOf(_path2['default'].sep) === 0;
                }));
                _logger2['default'].debug('Log file for xcodebuild test: ' + xcodebuild.logLocation);
              }

              // if we have an error we want to output the logs
              // otherwise the failure is inscrutible
              // but do not log permission errors from trying to write to attachments folder
              if (out.indexOf('Error Domain=') !== -1 && out.indexOf('Error writing attachment data to file') === -1) {
                logXcodeOutput = true;

                // terrible hack to handle case where xcode return 0 but is failing
                xcodebuild._wda_error_occurred = true;
              }

              if (logXcodeOutput) {
                // do not log permission errors from trying to write to attachments folder
                if (out.indexOf('Error writing attachment data to file') === -1) {
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = undefined;

                  try {
                    for (var _iterator = _getIterator(out.split('\n')), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var line = _step.value;

                      xcodeLog.info(line);
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                }
              }
            });

            return context$2$0.abrupt('return', xcodebuild);

          case 17:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createiProxySubProcess',
    value: function createiProxySubProcess(localport, deviceport) {
      _logger2['default'].debug('Starting iproxy to forward traffic from local port ' + localport + ' to device port ' + deviceport + ' over USB');
      return new _teen_process.SubProcess('iproxy', [localport, deviceport, this.device.udid]);
    }
  }, {
    key: 'startXcodebuild',
    value: function startXcodebuild() {
      var buildOnly = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
      return _regeneratorRuntime.async(function startXcodebuild$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              _this.xcodebuild.on('exit', function callee$3$0(code, signal) {
                var data, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, line;

                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      _logger2['default'].info('xcodebuild exited with code \'' + code + '\' and signal \'' + signal + '\'');
                      // print out the xcodebuild file if users have asked for it

                      if (!(this.showXcodeLog && this.xcodebuild.logLocation)) {
                        context$4$0.next = 31;
                        break;
                      }

                      xcodeLog.info('Contents of xcodebuild log file \'' + this.xcodebuild.logLocation + '\':');
                      context$4$0.prev = 3;
                      context$4$0.next = 6;
                      return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(this.xcodebuild.logLocation, 'utf-8'));

                    case 6:
                      data = context$4$0.sent;
                      _iteratorNormalCompletion2 = true;
                      _didIteratorError2 = false;
                      _iteratorError2 = undefined;
                      context$4$0.prev = 10;

                      for (_iterator2 = _getIterator(data.split('\n')); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        line = _step2.value;

                        xcodeLog.info(line);
                      }
                      context$4$0.next = 18;
                      break;

                    case 14:
                      context$4$0.prev = 14;
                      context$4$0.t0 = context$4$0['catch'](10);
                      _didIteratorError2 = true;
                      _iteratorError2 = context$4$0.t0;

                    case 18:
                      context$4$0.prev = 18;
                      context$4$0.prev = 19;

                      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                        _iterator2['return']();
                      }

                    case 21:
                      context$4$0.prev = 21;

                      if (!_didIteratorError2) {
                        context$4$0.next = 24;
                        break;
                      }

                      throw _iteratorError2;

                    case 24:
                      return context$4$0.finish(21);

                    case 25:
                      return context$4$0.finish(18);

                    case 26:
                      context$4$0.next = 31;
                      break;

                    case 28:
                      context$4$0.prev = 28;
                      context$4$0.t1 = context$4$0['catch'](3);

                      _logger2['default'].debug('Unable to access xcodebuild log file: \'' + context$4$0.t1.message + '\'');

                    case 31:
                      this.xcodebuild.processExited = true;

                      if (!(this.xcodebuild._wda_error_occurred || !signal && code !== 0)) {
                        context$4$0.next = 34;
                        break;
                      }

                      return context$4$0.abrupt('return', reject(new Error('xcodebuild failed with code ' + code)));

                    case 34:
                      if (!buildOnly) {
                        context$4$0.next = 36;
                        break;
                      }

                      return context$4$0.abrupt('return', resolve());

                    case 36:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this, [[3, 28], [10, 14, 18, 26], [19,, 21, 25]]);
              });

              return (function callee$3$0() {
                var startTime, _status, msg;

                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      context$4$0.prev = 0;
                      startTime = process.hrtime();
                      context$4$0.next = 4;
                      return _regeneratorRuntime.awrap(this.xcodebuild.start());

                    case 4:
                      if (buildOnly) {
                        context$4$0.next = 9;
                        break;
                      }

                      context$4$0.next = 7;
                      return _regeneratorRuntime.awrap(this.waitForStart(startTime));

                    case 7:
                      _status = context$4$0.sent;

                      resolve(_status);

                    case 9:
                      context$4$0.next = 16;
                      break;

                    case 11:
                      context$4$0.prev = 11;
                      context$4$0.t0 = context$4$0['catch'](0);
                      msg = 'Unable to start WebDriverAgent: ' + context$4$0.t0;

                      _logger2['default'].error(msg);
                      reject(new Error(msg));

                    case 16:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this, [[0, 11]]);
              })();
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'waitForStart',
    value: function waitForStart(startTime) {
      var currentStatus, retries, endTime, startupTime;
      return _regeneratorRuntime.async(function waitForStart$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // try to connect once every 0.5 seconds, until `wdaLaunchTimeout` is up
            _logger2['default'].debug('Waiting up to ' + this.wdaLaunchTimeout + 'ms for WebDriverAgent to start');
            currentStatus = null;
            context$2$0.prev = 2;
            retries = parseInt(this.wdaLaunchTimeout / 500, 10);
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 500, function callee$2$0() {
              var proxyTimeout;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    if (!this.xcodebuild.processExited) {
                      context$3$0.next = 2;
                      break;
                    }

                    return context$3$0.abrupt('return');

                  case 2:
                    proxyTimeout = this.noSessionProxy.timeout;

                    this.noSessionProxy.timeout = 1000;
                    context$3$0.prev = 4;
                    context$3$0.next = 7;
                    return _regeneratorRuntime.awrap(this.noSessionProxy.command('/status', 'GET'));

                  case 7:
                    currentStatus = context$3$0.sent;

                    if (currentStatus && currentStatus.ios && currentStatus.ios.ip) {
                      this.agentUrl = currentStatus.ios.ip;
                      _logger2['default'].debug('WebDriverAgent running on ip \'' + this.agentUrl + '\'');
                    }
                    context$3$0.next = 14;
                    break;

                  case 11:
                    context$3$0.prev = 11;
                    context$3$0.t0 = context$3$0['catch'](4);
                    throw new Error('Unable to connect to running WebDriverAgent: ' + context$3$0.t0.message);

                  case 14:
                    context$3$0.prev = 14;

                    this.noSessionProxy.timeout = proxyTimeout;
                    return context$3$0.finish(14);

                  case 17:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2, [[4, 11, 14, 17]]);
            }));

          case 6:
            if (!this.xcodebuild.processExited) {
              context$2$0.next = 8;
              break;
            }

            return context$2$0.abrupt('return', currentStatus);

          case 8:
            endTime = process.hrtime(startTime);
            startupTime = parseInt((endTime[0] * 1e9 + endTime[1]) / 1e6, 10);

            _logger2['default'].debug('WebDriverAgent successfully started after ' + startupTime + 'ms');
            context$2$0.next = 17;
            break;

          case 13:
            context$2$0.prev = 13;
            context$2$0.t0 = context$2$0['catch'](2);

            // at this point, if we have not had any errors from xcode itself (reported
            // elsewhere), we can let this go through and try to create the session
            _logger2['default'].debug(context$2$0.t0.message);
            _logger2['default'].warn('Getting status of WebDriverAgent on device timed out. Continuing');

          case 17:
            return context$2$0.abrupt('return', currentStatus);

          case 18:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 13]]);
    }
  }, {
    key: 'startiproxy',
    value: function startiproxy() {
      return _regeneratorRuntime.async(function startiproxy$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
              _this3.iproxy.on('exit', function (code) {
                _logger2['default'].debug('iproxy exited with code \'' + code + '\'');
                if (code) {
                  return reject(new Error('iproxy exited with code \'' + code + '\''));
                }
              });
              _this3.iproxy.on('output', function (stdout, stderr) {
                // do nothing if we expect errors
                if (_this3.expectIProxyErrors) {
                  return;
                }

                var out = stdout || stderr;
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                  for (var _iterator3 = _getIterator(out.split('\n')), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var line = _step3.value;

                    if (!line.length) {
                      continue;
                    }

                    if (line.indexOf('Resource temporarily unavailable') !== -1) {
                      // this generally happens when WDA does not respond,
                      // so print a more useful message
                      _logger2['default'].debug('Connection to WDA timed out');
                    } else {
                      iproxyLog.debug(line);
                    }
                  }
                } catch (err) {
                  _didIteratorError3 = true;
                  _iteratorError3 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                      _iterator3['return']();
                    }
                  } finally {
                    if (_didIteratorError3) {
                      throw _iteratorError3;
                    }
                  }
                }
              });

              return (function callee$3$0() {
                return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                  while (1) switch (context$4$0.prev = context$4$0.next) {
                    case 0:
                      context$4$0.prev = 0;
                      context$4$0.next = 3;
                      return _regeneratorRuntime.awrap(this.iproxy.start(IPROXY_TIMEOUT));

                    case 3:
                      resolve();
                      context$4$0.next = 10;
                      break;

                    case 6:
                      context$4$0.prev = 6;
                      context$4$0.t0 = context$4$0['catch'](0);

                      _logger2['default'].error('Error starting iproxy: \'' + context$4$0.t0.message + '\'');
                      reject(new Error('Unable to start iproxy. Is it installed?'));

                    case 10:
                    case 'end':
                      return context$4$0.stop();
                  }
                }, null, _this3, [[0, 6]]);
              })();
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'killHangingProcesses',
    value: function killHangingProcesses() {
      var procNames, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, proc;

      return _regeneratorRuntime.async(function killHangingProcesses$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Killing hanging processes');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _utilsJs.killAppUsingAppName)(this.device.udid, 'xcodebuild'));

          case 3:
            procNames = this.realDevice ? ['iproxy'] : ['XCTRunner'];
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            context$2$0.prev = 7;
            _iterator4 = _getIterator(procNames);

          case 9:
            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
              context$2$0.next = 16;
              break;
            }

            proc = _step4.value;
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap((0, _utilsJs.killAppUsingAppName)(this.device.udid, proc));

          case 13:
            _iteratorNormalCompletion4 = true;
            context$2$0.next = 9;
            break;

          case 16:
            context$2$0.next = 22;
            break;

          case 18:
            context$2$0.prev = 18;
            context$2$0.t0 = context$2$0['catch'](7);
            _didIteratorError4 = true;
            _iteratorError4 = context$2$0.t0;

          case 22:
            context$2$0.prev = 22;
            context$2$0.prev = 23;

            if (!_iteratorNormalCompletion4 && _iterator4['return']) {
              _iterator4['return']();
            }

          case 25:
            context$2$0.prev = 25;

            if (!_didIteratorError4) {
              context$2$0.next = 28;
              break;
            }

            throw _iteratorError4;

          case 28:
            return context$2$0.finish(25);

          case 29:
            return context$2$0.finish(22);

          case 30:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[7, 18, 22, 30], [23,, 25, 29]]);
    }
  }, {
    key: 'quit',
    value: function quit() {
      var killProcess;
      return _regeneratorRuntime.async(function quit$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            killProcess = function killProcess(name, proc) {
              return _regeneratorRuntime.async(function killProcess$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    if (!(proc && proc.proc)) {
                      context$3$0.next = 22;
                      break;
                    }

                    _logger2['default'].info('Shutting down ' + name + ' process (pid ' + proc.proc.pid + ')');
                    context$3$0.prev = 2;
                    context$3$0.next = 5;
                    return _regeneratorRuntime.awrap(proc.stop('SIGTERM', 1000));

                  case 5:
                    context$3$0.next = 22;
                    break;

                  case 7:
                    context$3$0.prev = 7;
                    context$3$0.t0 = context$3$0['catch'](2);

                    if (!(context$3$0.t0.message.indexOf('Process didn\'t end after') === -1)) {
                      context$3$0.next = 11;
                      break;
                    }

                    throw context$3$0.t0;

                  case 11:
                    _logger2['default'].debug(name + ' process did not end in a timely fashion: \'' + context$3$0.t0.message + '\'. ' + 'Sending \'SIGKILL\'...');
                    context$3$0.prev = 12;
                    context$3$0.next = 15;
                    return _regeneratorRuntime.awrap(proc.stop('SIGKILL'));

                  case 15:
                    context$3$0.next = 22;
                    break;

                  case 17:
                    context$3$0.prev = 17;
                    context$3$0.t1 = context$3$0['catch'](12);

                    if (!(context$3$0.t1.message.indexOf('not currently running') !== -1)) {
                      context$3$0.next = 21;
                      break;
                    }

                    return context$3$0.abrupt('return');

                  case 21:
                    throw context$3$0.t1;

                  case 22:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, this, [[2, 7], [12, 17]]);
            };

            _logger2['default'].info('Shutting down sub-processes');

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(killProcess('xcodebuild', this.xcodebuild));

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(killProcess('iproxy', this.iproxy));

          case 6:
            if (!(this.realDevice && this.updatedWDABundleId)) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _webdriveragentUtils.resetProjectFile)(this.agentPath, this.updatedWDABundleId));

          case 9:

            if (this.jwproxy) {
              this.jwproxy.sessionId = null;
            }

            this.expectIProxyErrors = true;

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'url',
    get: function get() {
      if (!this._url) {
        if (this.realDevice && this.wdaLocalPort) {
          this._url = _url3['default'].parse(WDA_BASE_URL + ':' + this.wdaLocalPort);
        } else {
          this._url = _url3['default'].parse(WDA_BASE_URL + ':' + WDA_AGENT_PORT);
        }
      }
      return this._url;
    },
    set: function set(_url) {
      this._url = _url3['default'].parse(_url);
    }
  }, {
    key: 'fullyStarted',
    get: function get() {
      return !this.expectIProxyErrors;
    },
    set: function set() {
      var started = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      // before WDA is started we expect errors from iproxy, since it is not
      // communicating with anything yet
      this.expectIProxyErrors = !started;
    }
  }, {
    key: 'derivedDataPath',
    get: function get() {
      if (!this._derivedDataPath && this.xcodebuild) {
        // https://regex101.com/r/PqmX8I/1
        var folderRegexp = /(.+\/WebDriverAgent-[^\/]+)/;
        var match = folderRegexp.exec(this.xcodebuild.logLocation);
        if (!match) {
          return;
        }
        this._derivedDataPath = match[1];
      }
      return this._derivedDataPath;
    }
  }]);

  return WebDriverAgent;
})();

exports['default'] = WebDriverAgent;
exports.WebDriverAgent = WebDriverAgent;
exports.WDA_BUNDLE_ID = WDA_BUNDLE_ID;
exports.BOOTSTRAP_PATH = BOOTSTRAP_PATH;

// make sure that the WDA dependencies have been built

// if necessary, update the bundleId to user's specification

//kill all hanging processes

// start the xcodebuild process

// wrap the start procedure in a promise so that we can catch, and report,
// any startup errors that are thrown as events

// in the case of just building, the process will exit and that is our finish

// there has been an error elsewhere and we need to short-circuit

// there has been an error elsewhere and we need to short-circuit

// must get [s, ns] array into ms

// the process ended but for some reason we were not informed

// if necessary, reset the bundleId to original value
//# sourceMappingURL=data:application/json;charset=utf8;base64,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Z0IsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFOztBQUU3QyxZQUFNLFlBQVksR0FBRyw2QkFBNkIsQ0FBQztBQUNuRCxZQUFJLEtBQUssR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDM0QsWUFBSSxDQUFDLEtBQUssRUFBRTtBQUNWLGlCQUFPO1NBQ1I7QUFDRCxZQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ2xDO0FBQ0QsYUFBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7S0FDOUI7OztTQXRjRyxjQUFjOzs7cUJBeWNMLGNBQWM7UUFDcEIsY0FBYyxHQUFkLGNBQWM7UUFBRSxhQUFhLEdBQWIsYUFBYTtRQUFFLGNBQWMsR0FBZCxjQUFjIiwiZmlsZSI6ImxpYi93ZWJkcml2ZXJhZ2VudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB1cmwgZnJvbSAndXJsJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgeyBTdWJQcm9jZXNzIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IEpXUHJveHkgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgZnMsIGxvZ2dlciB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgTm9TZXNzaW9uUHJveHkgfSBmcm9tIFwiLi9uby1zZXNzaW9uLXByb3h5XCI7XG5pbXBvcnQgeyBraWxsQXBwVXNpbmdBcHBOYW1lLCBnZW5lcmF0ZVhjb2RlQ29uZmlnRmlsZSB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgdXBkYXRlUHJvamVjdEZpbGUsIHJlc2V0UHJvamVjdEZpbGUsIGNoZWNrRm9yRGVwZW5kZW5jaWVzLFxuICAgICAgICAgc2V0UmVhbERldmljZVNlY3VyaXR5LCBmaXhGb3JYY29kZTcgfSBmcm9tICcuL3dlYmRyaXZlcmFnZW50LXV0aWxzJztcblxuXG5jb25zdCB4Y29kZUxvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ1hjb2RlJyk7XG5jb25zdCBpcHJveHlMb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdpUHJveHknKTtcblxuY29uc3QgQk9PVFNUUkFQX1BBVEggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnV2ViRHJpdmVyQWdlbnQnKTtcbmNvbnN0IFdEQV9CVU5ETEVfSUQgPSAnY29tLmFwcGxlLnRlc3QuV2ViRHJpdmVyQWdlbnRSdW5uZXItUnVubmVyJztcbmNvbnN0IERFRkFVTFRfU0lHTklOR19JRCA9IFwiaVBob25lIERldmVsb3BlclwiO1xuY29uc3QgV0RBX0xBVU5DSF9USU1FT1VUID0gNjAgKiAxMDAwO1xuY29uc3QgSVBST1hZX1RJTUVPVVQgPSA1MDAwO1xuY29uc3QgV0RBX0FHRU5UX1BPUlQgPSA4MTAwO1xuY29uc3QgV0RBX0JBU0VfVVJMID0gJ2h0dHA6Ly9sb2NhbGhvc3QnO1xuY29uc3QgQlVJTERfVEVTVF9ERUxBWSA9IDEwMDA7XG5cbmNsYXNzIFdlYkRyaXZlckFnZW50IHtcblxuICAvLyBhZ2VudFBhdGggKG9wdGlvbmFsKTogUGF0aCB0byBXZWJkcml2ZXJBZ2VudCBFeGVjdXRhYmxlIChpbnNpZGUgV2ViRHJpdmVyQWdlbnQuYXBwKVxuICBjb25zdHJ1Y3RvciAoeGNvZGVWZXJzaW9uLCBhcmdzID0ge30pIHtcbiAgICB0aGlzLnhjb2RlVmVyc2lvbiA9IHhjb2RlVmVyc2lvbjtcblxuICAgIHRoaXMuZGV2aWNlID0gYXJncy5kZXZpY2U7XG4gICAgdGhpcy5wbGF0Zm9ybVZlcnNpb24gPSBhcmdzLnBsYXRmb3JtVmVyc2lvbjtcbiAgICB0aGlzLmhvc3QgPSBhcmdzLmhvc3Q7XG4gICAgdGhpcy5yZWFsRGV2aWNlID0gISFhcmdzLnJlYWxEZXZpY2U7XG5cbiAgICB0aGlzLnNldFdEQVBhdGhzKGFyZ3MuYm9vdHN0cmFwUGF0aCwgYXJncy5hZ2VudFBhdGgpO1xuXG4gICAgdGhpcy53ZGFMb2NhbFBvcnQgPSBhcmdzLndkYUxvY2FsUG9ydDtcbiAgICB0aGlzLnNob3dYY29kZUxvZyA9ICEhYXJncy5zaG93WGNvZGVMb2c7XG4gICAgdGhpcy54Y29kZUNvbmZpZ0ZpbGUgPSBhcmdzLnhjb2RlQ29uZmlnRmlsZTtcbiAgICB0aGlzLnhjb2RlT3JnSWQgPSBhcmdzLnhjb2RlT3JnSWQ7XG4gICAgdGhpcy54Y29kZVNpZ25pbmdJZCA9IGFyZ3MueGNvZGVTaWduaW5nSWQgfHwgREVGQVVMVF9TSUdOSU5HX0lEO1xuICAgIHRoaXMua2V5Y2hhaW5QYXRoID0gYXJncy5rZXljaGFpblBhdGg7XG4gICAgdGhpcy5rZXljaGFpblBhc3N3b3JkID0gYXJncy5rZXljaGFpblBhc3N3b3JkO1xuXG4gICAgdGhpcy5wcmVidWlsZFdEQSA9IGFyZ3MucHJlYnVpbGRXREE7XG4gICAgdGhpcy51c2VQcmVidWlsdFdEQSA9IGFyZ3MudXNlUHJlYnVpbHRXREE7XG4gICAgdGhpcy51c2VTaW1wbGVCdWlsZFRlc3QgPSBhcmdzLnVzZVNpbXBsZUJ1aWxkVGVzdDtcblxuICAgIHRoaXMud2ViRHJpdmVyQWdlbnRVcmwgPSBhcmdzLndlYkRyaXZlckFnZW50VXJsO1xuXG4gICAgdGhpcy51cGRhdGVkV0RBQnVuZGxlSWQgPSBhcmdzLnVwZGF0ZWRXREFCdW5kbGVJZDtcblxuICAgIHRoaXMuZXhwZWN0SVByb3h5RXJyb3JzID0gdHJ1ZTtcblxuICAgIHRoaXMud2RhTGF1bmNoVGltZW91dCA9IGFyZ3Mud2RhTGF1bmNoVGltZW91dCB8fCBXREFfTEFVTkNIX1RJTUVPVVQ7XG4gICAgdGhpcy53ZGFDb25uZWN0aW9uVGltZW91dCA9IGFyZ3Mud2RhQ29ubmVjdGlvblRpbWVvdXQ7XG5cbiAgICB0aGlzLnVzZUNhcnRoYWdlU3NsID0gXy5pc0Jvb2xlYW4oYXJncy51c2VDYXJ0aGFnZVNzbCkgJiYgYXJncy51c2VDYXJ0aGFnZVNzbDtcbiAgfVxuXG4gIHNldFdEQVBhdGhzIChib290c3RyYXBQYXRoLCBhZ2VudFBhdGgpIHtcbiAgICAvLyBhbGxvdyB0aGUgdXNlciB0byBzcGVjaWZ5IGEgcGxhY2UgZm9yIFdEQS4gVGhpcyBpcyB1bmRvY3VtZW50ZWQgYW5kXG4gICAgLy8gb25seSBoZXJlIGZvciB0aGUgcHVycG9zZXMgb2YgdGVzdGluZyBkZXZlbG9wbWVudCBvZiBXREFcbiAgICB0aGlzLmJvb3RzdHJhcFBhdGggPSBib290c3RyYXBQYXRoIHx8IEJPT1RTVFJBUF9QQVRIO1xuICAgIGxvZy5pbmZvKGBVc2luZyBXREEgcGF0aDogJyR7dGhpcy5ib290c3RyYXBQYXRofSdgKTtcblxuICAgIC8vIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdlIG5lZWQgdG8gYmUgYWJsZSB0byBzcGVjaWZ5IGFnZW50UGF0aCB0b29cbiAgICB0aGlzLmFnZW50UGF0aCA9IGFnZW50UGF0aCB8fCBwYXRoLnJlc29sdmUodGhpcy5ib290c3RyYXBQYXRoLCAnV2ViRHJpdmVyQWdlbnQueGNvZGVwcm9qJyk7XG4gICAgbG9nLmluZm8oYFVzaW5nIFdEQSBhZ2VudDogJyR7dGhpcy5hZ2VudFBhdGh9J2ApO1xuICB9XG5cbiAgYXN5bmMgdW5pbnN0YWxsICgpIHtcbiAgICBsb2cuZGVidWcoYFJlbW92aW5nIFdEQSBhcHBsaWNhdGlvbiBmcm9tIGRldmljZWApO1xuICAgIGF3YWl0IHRoaXMuZGV2aWNlLnJlbW92ZUFwcChXREFfQlVORExFX0lEKTtcbiAgfVxuXG4gIGFzeW5jIGxhdW5jaCAoc2Vzc2lvbklkKSB7XG4gICAgaWYgKHRoaXMud2ViRHJpdmVyQWdlbnRVcmwpIHtcbiAgICAgIGxvZy5pbmZvKGBVc2luZyBwcm92aWRlZCBXZWJkcml2ZXJBZ2VudCBhdCAnJHt0aGlzLndlYkRyaXZlckFnZW50VXJsfSdgKTtcbiAgICAgIHRoaXMudXJsID0gdGhpcy53ZWJEcml2ZXJBZ2VudFVybDtcbiAgICAgIHRoaXMuc2V0dXBQcm94aWVzKHNlc3Npb25JZCk7XG4gICAgICByZXR1cm4gdGhpcy53ZWJEcml2ZXJBZ2VudFVybDtcbiAgICB9XG5cbiAgICBsb2cuaW5mbygnTGF1bmNoaW5nIFdlYkRyaXZlckFnZW50IG9uIHRoZSBkZXZpY2UnKTtcblxuICAgIHRoaXMuc2V0dXBQcm94aWVzKHNlc3Npb25JZCk7XG5cbiAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyh0aGlzLmFnZW50UGF0aCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVHJ5aW5nIHRvIHVzZSBXZWJEcml2ZXJBZ2VudCBwcm9qZWN0IGF0ICcke3RoaXMuYWdlbnRQYXRofScgYnV0IHRoZSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAnZmlsZSBkb2VzIG5vdCBleGlzdCcpO1xuICAgIH1cblxuICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHRoZSBXREEgZGVwZW5kZW5jaWVzIGhhdmUgYmVlbiBidWlsdFxuICAgIGF3YWl0IGNoZWNrRm9yRGVwZW5kZW5jaWVzKHRoaXMuYm9vdHN0cmFwUGF0aCwgdGhpcy51c2VDYXJ0aGFnZVNzbCk7XG5cbiAgICAvLyBpZiBuZWNlc3NhcnksIHVwZGF0ZSB0aGUgYnVuZGxlSWQgdG8gdXNlcidzIHNwZWNpZmljYXRpb25cbiAgICBpZiAodGhpcy5yZWFsRGV2aWNlICYmIHRoaXMudXBkYXRlZFdEQUJ1bmRsZUlkKSB7XG4gICAgICBhd2FpdCB1cGRhdGVQcm9qZWN0RmlsZSh0aGlzLmFnZW50UGF0aCwgdGhpcy51cGRhdGVkV0RBQnVuZGxlSWQpO1xuICAgIH1cblxuICAgIC8va2lsbCBhbGwgaGFuZ2luZyBwcm9jZXNzZXNcbiAgICBhd2FpdCB0aGlzLmtpbGxIYW5naW5nUHJvY2Vzc2VzKCk7XG5cbiAgICBpZiAodGhpcy54Y29kZVZlcnNpb24ubWFqb3IgPT09IDcgfHwgKHRoaXMueGNvZGVWZXJzaW9uLm1ham9yID09PSA4ICYmIHRoaXMueGNvZGVWZXJzaW9uLm1pbm9yID09PSAwKSkge1xuICAgICAgbG9nLmRlYnVnKGBVc2luZyBYY29kZSAke3RoaXMueGNvZGVWZXJzaW9uLnZlcnNpb25TdHJpbmd9LCBzbyBmaXhpbmcgV0RBIGNvZGViYXNlYCk7XG4gICAgICBhd2FpdCBmaXhGb3JYY29kZTcodGhpcy5ib290c3RyYXBQYXRoLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcmVidWlsZFdEQSkge1xuICAgICAgaWYgKHRoaXMueGNvZGVWZXJzaW9uLm1ham9yID09PSA3KSB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgQ2FwYWJpbGl0eSAncHJlYnVpbGRXREEnIHNldCwgYnV0IG9uIHhjb2RlIHZlcnNpb24gJHt0aGlzLnhjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nfSBzbyBza2lwcGluZ2ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZmlyc3QgZG8gYSBidWlsZCBwaGFzZVxuICAgICAgICBsb2cuZGVidWcoJ1ByZS1idWlsZGluZyBXREEgYmVmb3JlIGxhdW5jaGluZyB0ZXN0Jyk7XG4gICAgICAgIHRoaXMudXNlUHJlYnVpbHRXREEgPSB0cnVlO1xuICAgICAgICB0aGlzLnhjb2RlYnVpbGQgPSBhd2FpdCB0aGlzLmNyZWF0ZVhjb2RlQnVpbGRTdWJQcm9jZXNzKHRydWUpO1xuICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0WGNvZGVidWlsZCh0cnVlKTtcbiAgICAgICAgdGhpcy54Y29kZWJ1aWxkID0gbnVsbDtcbiAgICAgICAgLy8gcGF1c2UgYSBtb21lbnRcbiAgICAgICAgYXdhaXQgQi5kZWxheShCVUlMRF9URVNUX0RFTEFZKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnhjb2RlYnVpbGQgPSBhd2FpdCB0aGlzLmNyZWF0ZVhjb2RlQnVpbGRTdWJQcm9jZXNzKCk7XG5cbiAgICBpZiAodGhpcy5yZWFsRGV2aWNlKSB7XG4gICAgICB0aGlzLmlwcm94eSA9IHRoaXMuY3JlYXRlaVByb3h5U3ViUHJvY2Vzcyh0aGlzLnVybC5wb3J0LCBXREFfQUdFTlRfUE9SVCk7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0aXByb3h5KCk7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQgdGhlIHhjb2RlYnVpbGQgcHJvY2Vzc1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnN0YXJ0WGNvZGVidWlsZCgpO1xuICB9XG5cbiAgc2V0dXBQcm94aWVzIChzZXNzaW9uSWQpIHtcbiAgICBjb25zdCBwcm94eU9wdHMgPSB7XG4gICAgICBzZXJ2ZXI6IHRoaXMudXJsLmhvc3RuYW1lLFxuICAgICAgcG9ydDogdGhpcy51cmwucG9ydCxcbiAgICAgIGJhc2U6ICcnLFxuICAgICAgdGltZW91dDogdGhpcy53ZGFDb25uZWN0aW9uVGltZW91dCxcbiAgICB9O1xuXG4gICAgdGhpcy5qd3Byb3h5ID0gbmV3IEpXUHJveHkocHJveHlPcHRzKTtcbiAgICB0aGlzLmp3cHJveHkuc2Vzc2lvbklkID0gc2Vzc2lvbklkO1xuICAgIHRoaXMucHJveHlSZXFSZXMgPSB0aGlzLmp3cHJveHkucHJveHlSZXFSZXMuYmluZCh0aGlzLmp3cHJveHkpO1xuXG4gICAgdGhpcy5ub1Nlc3Npb25Qcm94eSA9IG5ldyBOb1Nlc3Npb25Qcm94eShwcm94eU9wdHMpO1xuICAgIHRoaXMubm9TZXNzaW9uUHJveHlSZXFSZXMgPSB0aGlzLm5vU2Vzc2lvblByb3h5LnByb3h5UmVxUmVzLmJpbmQodGhpcy5ub1Nlc3Npb25Qcm94eSk7XG4gIH1cblxuICBnZXRYY29kZUJ1aWxkQ29tbWFuZCAoYnVpbGRPbmx5ID0gZmFsc2UpIHtcbiAgICBsZXQgY21kID0gJ3hjb2RlYnVpbGQnO1xuICAgIGxldCBhcmdzO1xuXG4gICAgLy8gZmlndXJlIG91dCB0aGUgdGFyZ2V0cyBmb3IgeGNvZGVidWlsZFxuICAgIGlmICh0aGlzLnhjb2RlVmVyc2lvbi5tYWpvciA8IDgpIHtcbiAgICAgIGlmICh0aGlzLnVzZVByZWJ1aWx0V0RBKSB7XG4gICAgICAgIGxldCBtc2cgPSBgJ3VzZVByZWJ1aWx0V0RBJyBzZXQsIGJ1dCBvbiBYY29kZSBgICtcbiAgICAgICAgICAgICAgICAgIGAnJHt0aGlzLnhjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nfScsIHNvIHNraXBwaW5nLCBhcyBpdCBgICtcbiAgICAgICAgICAgICAgICAgIGBuZWVkcyBhIHZlcnNpb24gPj0gOGA7XG4gICAgICAgIGxvZy53YXJuKG1zZyk7XG4gICAgICB9XG4gICAgICBhcmdzID1bXG4gICAgICAgICdidWlsZCcsXG4gICAgICAgICd0ZXN0JyxcbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBbYnVpbGRDbWQsIHRlc3RDbWRdID0gdGhpcy51c2VTaW1wbGVCdWlsZFRlc3QgPyBbJ2J1aWxkJywgJ3Rlc3QnXSA6IFsnYnVpbGQtZm9yLXRlc3RpbmcnLCAndGVzdC13aXRob3V0LWJ1aWxkaW5nJ107XG4gICAgICBpZiAoYnVpbGRPbmx5KSB7XG4gICAgICAgIGFyZ3MgPSBbYnVpbGRDbWRdO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnVzZVByZWJ1aWx0V0RBKSB7XG4gICAgICAgIGFyZ3MgPSBbdGVzdENtZF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcmdzID0gW2J1aWxkQ21kLCB0ZXN0Q21kXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhZGQgdGhlIHJlc3Qgb2YgdGhlIGFyZ3VtZW50cyBmb3IgdGhlIHhjb2RlYnVpbGQgY29tbWFuZFxuICAgIGxldCBnZW5lcmljQXJncyA9IFtcbiAgICAgICctcHJvamVjdCcsIHRoaXMuYWdlbnRQYXRoLFxuICAgICAgJy1zY2hlbWUnLCAnV2ViRHJpdmVyQWdlbnRSdW5uZXInLFxuICAgICAgJy1kZXN0aW5hdGlvbicsIGBpZD0ke3RoaXMuZGV2aWNlLnVkaWR9YCxcbiAgICAgICctY29uZmlndXJhdGlvbicsICdEZWJ1ZydcbiAgICBdO1xuICAgIGFyZ3MucHVzaCguLi5nZW5lcmljQXJncyk7XG5cbiAgICBjb25zdCB2ZXJzaW9uTWF0Y2ggPSBuZXcgUmVnRXhwKC9eKFxcZCspXFwuKFxcZCspLykuZXhlYyh0aGlzLnBsYXRmb3JtVmVyc2lvbik7XG4gICAgaWYgKHZlcnNpb25NYXRjaCkge1xuICAgICAgYXJncy5wdXNoKGBJUEhPTkVPU19ERVBMT1lNRU5UX1RBUkdFVD0ke3ZlcnNpb25NYXRjaFsxXX0uJHt2ZXJzaW9uTWF0Y2hbMl19YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy53YXJuKGBDYW5ub3QgcGFyc2UgbWFqb3IgYW5kIG1pbm9yIHZlcnNpb24gbnVtYmVycyBmcm9tIHBsYXRmb3JtVmVyc2lvbiBcIiR7dGhpcy5wbGF0Zm9ybVZlcnNpb259XCIuIGAgK1xuICAgICAgICAgICAgICAgJ1dpbGwgYnVpbGQgZm9yIHRoZSBkZWZhdWx0IHBsYXRmb3JtIGluc3RlYWQnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZWFsRGV2aWNlICYmIHRoaXMueGNvZGVDb25maWdGaWxlKSB7XG4gICAgICBsb2cuZGVidWcoYFVzaW5nIFhjb2RlIGNvbmZpZ3VyYXRpb24gZmlsZTogJyR7dGhpcy54Y29kZUNvbmZpZ0ZpbGV9J2ApO1xuICAgICAgYXJncy5wdXNoKCcteGNjb25maWcnLCB0aGlzLnhjb2RlQ29uZmlnRmlsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtjbWQsIGFyZ3N9O1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlWGNvZGVCdWlsZFN1YlByb2Nlc3MgKGJ1aWxkT25seSA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMucmVhbERldmljZSkge1xuICAgICAgaWYgKHRoaXMua2V5Y2hhaW5QYXRoICYmIHRoaXMua2V5Y2hhaW5QYXNzd29yZCkge1xuICAgICAgICBhd2FpdCBzZXRSZWFsRGV2aWNlU2VjdXJpdHkodGhpcy5rZXljaGFpblBhdGgsIHRoaXMua2V5Y2hhaW5QYXNzd29yZCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy54Y29kZU9yZ0lkICYmIHRoaXMueGNvZGVTaWduaW5nSWQgJiYgIXRoaXMueGNvZGVDb25maWdGaWxlKSB7XG4gICAgICAgIHRoaXMueGNvZGVDb25maWdGaWxlID0gYXdhaXQgZ2VuZXJhdGVYY29kZUNvbmZpZ0ZpbGUodGhpcy54Y29kZU9yZ0lkLCB0aGlzLnhjb2RlU2lnbmluZ0lkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHtjbWQsIGFyZ3N9ID0gdGhpcy5nZXRYY29kZUJ1aWxkQ29tbWFuZChidWlsZE9ubHkpO1xuICAgIGxvZy5kZWJ1ZyhgQmVnaW5uaW5nICR7YnVpbGRPbmx5ID8gJ2J1aWxkJyA6ICd0ZXN0J30gd2l0aCBjb21tYW5kICcke2NtZH0gJHthcmdzLmpvaW4oJyAnKX0nIGAgK1xuICAgICAgICAgICAgICBgaW4gZGlyZWN0b3J5ICcke3RoaXMuYm9vdHN0cmFwUGF0aH0nYCk7XG4gICAgbGV0IHhjb2RlYnVpbGQgPSBuZXcgU3ViUHJvY2VzcyhjbWQsIGFyZ3MsIHtjd2Q6IHRoaXMuYm9vdHN0cmFwUGF0aH0pO1xuXG4gICAgbGV0IGxvZ1hjb2RlT3V0cHV0ID0gdGhpcy5zaG93WGNvZGVMb2c7XG4gICAgbG9nLmRlYnVnKGBPdXRwdXQgZnJvbSB4Y29kZWJ1aWxkICR7bG9nWGNvZGVPdXRwdXQgPyAnd2lsbCcgOiAnd2lsbCBub3QnfSBiZSBsb2dnZWRgKTtcbiAgICB4Y29kZWJ1aWxkLm9uKCdvdXRwdXQnLCAoc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgIGxldCBvdXQgPSBzdGRvdXQgfHwgc3RkZXJyO1xuICAgICAgLy8gd2Ugd2FudCB0byBwdWxsIG91dCB0aGUgbG9nIGZpbGUgdGhhdCBpcyBjcmVhdGVkLCBhbmQgaGlnaGxpZ2h0IGl0XG4gICAgICAvLyBmb3IgZGlhZ25vc3RpYyBwdXJwb3Nlc1xuICAgICAgaWYgKG91dC5pbmRleE9mKCdXcml0aW5nIGRpYWdub3N0aWMgbG9nIGZvciB0ZXN0IHNlc3Npb24gdG8nKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gcHVsbCBvdXQgdGhlIGZpcnN0IGxpbmUgdGhhdCBiZWdpbnMgd2l0aCB0aGUgcGF0aCBzZXBhcmF0b3JcbiAgICAgICAgLy8gd2hpY2ggKnNob3VsZCogYmUgdGhlIGxpbmUgaW5kaWNhdGluZyB0aGUgbG9nIGZpbGUgZ2VuZXJhdGVkXG4gICAgICAgIHhjb2RlYnVpbGQubG9nTG9jYXRpb24gPSBfLmZpcnN0KF8ucmVtb3ZlKG91dC50cmltKCkuc3BsaXQoJ1xcbicpLCAodikgPT4gdi5pbmRleE9mKHBhdGguc2VwKSA9PT0gMCkpO1xuICAgICAgICBsb2cuZGVidWcoYExvZyBmaWxlIGZvciB4Y29kZWJ1aWxkIHRlc3Q6ICR7eGNvZGVidWlsZC5sb2dMb2NhdGlvbn1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgd2UgaGF2ZSBhbiBlcnJvciB3ZSB3YW50IHRvIG91dHB1dCB0aGUgbG9nc1xuICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBmYWlsdXJlIGlzIGluc2NydXRpYmxlXG4gICAgICAvLyBidXQgZG8gbm90IGxvZyBwZXJtaXNzaW9uIGVycm9ycyBmcm9tIHRyeWluZyB0byB3cml0ZSB0byBhdHRhY2htZW50cyBmb2xkZXJcbiAgICAgIGlmIChvdXQuaW5kZXhPZignRXJyb3IgRG9tYWluPScpICE9PSAtMSAmJiBvdXQuaW5kZXhPZignRXJyb3Igd3JpdGluZyBhdHRhY2htZW50IGRhdGEgdG8gZmlsZScpID09PSAtMSkge1xuICAgICAgICBsb2dYY29kZU91dHB1dCA9IHRydWU7XG5cbiAgICAgICAgLy8gdGVycmlibGUgaGFjayB0byBoYW5kbGUgY2FzZSB3aGVyZSB4Y29kZSByZXR1cm4gMCBidXQgaXMgZmFpbGluZ1xuICAgICAgICB4Y29kZWJ1aWxkLl93ZGFfZXJyb3Jfb2NjdXJyZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobG9nWGNvZGVPdXRwdXQpIHtcbiAgICAgICAgLy8gZG8gbm90IGxvZyBwZXJtaXNzaW9uIGVycm9ycyBmcm9tIHRyeWluZyB0byB3cml0ZSB0byBhdHRhY2htZW50cyBmb2xkZXJcbiAgICAgICAgaWYgKG91dC5pbmRleE9mKCdFcnJvciB3cml0aW5nIGF0dGFjaG1lbnQgZGF0YSB0byBmaWxlJykgPT09IC0xKSB7XG4gICAgICAgICAgZm9yIChsZXQgbGluZSBvZiBvdXQuc3BsaXQoJ1xcbicpKSB7XG4gICAgICAgICAgICB4Y29kZUxvZy5pbmZvKGxpbmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHhjb2RlYnVpbGQ7XG4gIH1cblxuICBjcmVhdGVpUHJveHlTdWJQcm9jZXNzIChsb2NhbHBvcnQsIGRldmljZXBvcnQpIHtcbiAgICBsb2cuZGVidWcoYFN0YXJ0aW5nIGlwcm94eSB0byBmb3J3YXJkIHRyYWZmaWMgZnJvbSBsb2NhbCBwb3J0ICR7bG9jYWxwb3J0fSB0byBkZXZpY2UgcG9ydCAke2RldmljZXBvcnR9IG92ZXIgVVNCYCk7XG4gICAgcmV0dXJuIG5ldyBTdWJQcm9jZXNzKGBpcHJveHlgLCBbbG9jYWxwb3J0LCBkZXZpY2Vwb3J0LCB0aGlzLmRldmljZS51ZGlkXSk7XG4gIH1cblxuICBhc3luYyBzdGFydFhjb2RlYnVpbGQgKGJ1aWxkT25seSA9IGZhbHNlKSB7XG4gICAgLy8gd3JhcCB0aGUgc3RhcnQgcHJvY2VkdXJlIGluIGEgcHJvbWlzZSBzbyB0aGF0IHdlIGNhbiBjYXRjaCwgYW5kIHJlcG9ydCxcbiAgICAvLyBhbnkgc3RhcnR1cCBlcnJvcnMgdGhhdCBhcmUgdGhyb3duIGFzIGV2ZW50c1xuICAgIHJldHVybiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnhjb2RlYnVpbGQub24oJ2V4aXQnLCBhc3luYyAoY29kZSwgc2lnbmFsKSA9PiB7XG4gICAgICAgIGxvZy5pbmZvKGB4Y29kZWJ1aWxkIGV4aXRlZCB3aXRoIGNvZGUgJyR7Y29kZX0nIGFuZCBzaWduYWwgJyR7c2lnbmFsfSdgKTtcbiAgICAgICAgLy8gcHJpbnQgb3V0IHRoZSB4Y29kZWJ1aWxkIGZpbGUgaWYgdXNlcnMgaGF2ZSBhc2tlZCBmb3IgaXRcbiAgICAgICAgaWYgKHRoaXMuc2hvd1hjb2RlTG9nICYmIHRoaXMueGNvZGVidWlsZC5sb2dMb2NhdGlvbikge1xuICAgICAgICAgIHhjb2RlTG9nLmluZm8oYENvbnRlbnRzIG9mIHhjb2RlYnVpbGQgbG9nIGZpbGUgJyR7dGhpcy54Y29kZWJ1aWxkLmxvZ0xvY2F0aW9ufSc6YCk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gYXdhaXQgZnMucmVhZEZpbGUodGhpcy54Y29kZWJ1aWxkLmxvZ0xvY2F0aW9uLCAndXRmLTgnKTtcbiAgICAgICAgICAgIGZvciAobGV0IGxpbmUgb2YgZGF0YS5zcGxpdCgnXFxuJykpIHtcbiAgICAgICAgICAgICAgeGNvZGVMb2cuaW5mbyhsaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhgVW5hYmxlIHRvIGFjY2VzcyB4Y29kZWJ1aWxkIGxvZyBmaWxlOiAnJHtlcnIubWVzc2FnZX0nYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMueGNvZGVidWlsZC5wcm9jZXNzRXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMueGNvZGVidWlsZC5fd2RhX2Vycm9yX29jY3VycmVkIHx8ICghc2lnbmFsICYmIGNvZGUgIT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYHhjb2RlYnVpbGQgZmFpbGVkIHdpdGggY29kZSAke2NvZGV9YCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluIHRoZSBjYXNlIG9mIGp1c3QgYnVpbGRpbmcsIHRoZSBwcm9jZXNzIHdpbGwgZXhpdCBhbmQgdGhhdCBpcyBvdXIgZmluaXNoXG4gICAgICAgIGlmIChidWlsZE9ubHkpIHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIChhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGV0IHN0YXJ0VGltZSA9IHByb2Nlc3MuaHJ0aW1lKCk7XG4gICAgICAgICAgYXdhaXQgdGhpcy54Y29kZWJ1aWxkLnN0YXJ0KCk7XG4gICAgICAgICAgaWYgKCFidWlsZE9ubHkpIHtcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSBhd2FpdCB0aGlzLndhaXRGb3JTdGFydChzdGFydFRpbWUpO1xuICAgICAgICAgICAgcmVzb2x2ZShzdGF0dXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgbGV0IG1zZyA9IGBVbmFibGUgdG8gc3RhcnQgV2ViRHJpdmVyQWdlbnQ6ICR7ZXJyfWA7XG4gICAgICAgICAgbG9nLmVycm9yKG1zZyk7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihtc2cpKTtcbiAgICAgICAgfVxuICAgICAgfSkoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHdhaXRGb3JTdGFydCAoc3RhcnRUaW1lKSB7XG4gICAgLy8gdHJ5IHRvIGNvbm5lY3Qgb25jZSBldmVyeSAwLjUgc2Vjb25kcywgdW50aWwgYHdkYUxhdW5jaFRpbWVvdXRgIGlzIHVwXG4gICAgbG9nLmRlYnVnKGBXYWl0aW5nIHVwIHRvICR7dGhpcy53ZGFMYXVuY2hUaW1lb3V0fW1zIGZvciBXZWJEcml2ZXJBZ2VudCB0byBzdGFydGApO1xuICAgIGxldCBjdXJyZW50U3RhdHVzID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgbGV0IHJldHJpZXMgPSBwYXJzZUludCh0aGlzLndkYUxhdW5jaFRpbWVvdXQgLyA1MDAsIDEwKTtcbiAgICAgIGF3YWl0IHJldHJ5SW50ZXJ2YWwocmV0cmllcywgNTAwLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnhjb2RlYnVpbGQucHJvY2Vzc0V4aXRlZCkge1xuICAgICAgICAgIC8vIHRoZXJlIGhhcyBiZWVuIGFuIGVycm9yIGVsc2V3aGVyZSBhbmQgd2UgbmVlZCB0byBzaG9ydC1jaXJjdWl0XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb3h5VGltZW91dCA9IHRoaXMubm9TZXNzaW9uUHJveHkudGltZW91dDtcbiAgICAgICAgdGhpcy5ub1Nlc3Npb25Qcm94eS50aW1lb3V0ID0gMTAwMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjdXJyZW50U3RhdHVzID0gYXdhaXQgdGhpcy5ub1Nlc3Npb25Qcm94eS5jb21tYW5kKCcvc3RhdHVzJywgJ0dFVCcpO1xuICAgICAgICAgIGlmIChjdXJyZW50U3RhdHVzICYmIGN1cnJlbnRTdGF0dXMuaW9zICYmIGN1cnJlbnRTdGF0dXMuaW9zLmlwKSB7XG4gICAgICAgICAgICB0aGlzLmFnZW50VXJsID0gY3VycmVudFN0YXR1cy5pb3MuaXA7XG4gICAgICAgICAgICBsb2cuZGVidWcoYFdlYkRyaXZlckFnZW50IHJ1bm5pbmcgb24gaXAgJyR7dGhpcy5hZ2VudFVybH0nYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBjb25uZWN0IHRvIHJ1bm5pbmcgV2ViRHJpdmVyQWdlbnQ6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhpcy5ub1Nlc3Npb25Qcm94eS50aW1lb3V0ID0gcHJveHlUaW1lb3V0O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMueGNvZGVidWlsZC5wcm9jZXNzRXhpdGVkKSB7XG4gICAgICAgIC8vIHRoZXJlIGhhcyBiZWVuIGFuIGVycm9yIGVsc2V3aGVyZSBhbmQgd2UgbmVlZCB0byBzaG9ydC1jaXJjdWl0XG4gICAgICAgIHJldHVybiBjdXJyZW50U3RhdHVzO1xuICAgICAgfVxuXG4gICAgICBsZXQgZW5kVGltZSA9IHByb2Nlc3MuaHJ0aW1lKHN0YXJ0VGltZSk7XG4gICAgICAvLyBtdXN0IGdldCBbcywgbnNdIGFycmF5IGludG8gbXNcbiAgICAgIGxldCBzdGFydHVwVGltZSA9IHBhcnNlSW50KChlbmRUaW1lWzBdICogMWU5ICsgZW5kVGltZVsxXSkgLyAxZTYsIDEwKTtcbiAgICAgIGxvZy5kZWJ1ZyhgV2ViRHJpdmVyQWdlbnQgc3VjY2Vzc2Z1bGx5IHN0YXJ0ZWQgYWZ0ZXIgJHtzdGFydHVwVGltZX1tc2ApO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gYXQgdGhpcyBwb2ludCwgaWYgd2UgaGF2ZSBub3QgaGFkIGFueSBlcnJvcnMgZnJvbSB4Y29kZSBpdHNlbGYgKHJlcG9ydGVkXG4gICAgICAvLyBlbHNld2hlcmUpLCB3ZSBjYW4gbGV0IHRoaXMgZ28gdGhyb3VnaCBhbmQgdHJ5IHRvIGNyZWF0ZSB0aGUgc2Vzc2lvblxuICAgICAgbG9nLmRlYnVnKGVyci5tZXNzYWdlKTtcbiAgICAgIGxvZy53YXJuKGBHZXR0aW5nIHN0YXR1cyBvZiBXZWJEcml2ZXJBZ2VudCBvbiBkZXZpY2UgdGltZWQgb3V0LiBDb250aW51aW5nYCk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50U3RhdHVzO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRpcHJveHkgKCkge1xuICAgIHJldHVybiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmlwcm94eS5vbignZXhpdCcsIChjb2RlKSA9PiB7XG4gICAgICAgIGxvZy5kZWJ1ZyhgaXByb3h5IGV4aXRlZCB3aXRoIGNvZGUgJyR7Y29kZX0nYCk7XG4gICAgICAgIGlmIChjb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYGlwcm94eSBleGl0ZWQgd2l0aCBjb2RlICcke2NvZGV9J2ApKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmlwcm94eS5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmcgaWYgd2UgZXhwZWN0IGVycm9yc1xuICAgICAgICBpZiAodGhpcy5leHBlY3RJUHJveHlFcnJvcnMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb3V0ID0gc3Rkb3V0IHx8IHN0ZGVycjtcbiAgICAgICAgZm9yIChsZXQgbGluZSBvZiBvdXQuc3BsaXQoJ1xcbicpKSB7XG4gICAgICAgICAgaWYgKCFsaW5lLmxlbmd0aCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZignUmVzb3VyY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgZ2VuZXJhbGx5IGhhcHBlbnMgd2hlbiBXREEgZG9lcyBub3QgcmVzcG9uZCxcbiAgICAgICAgICAgIC8vIHNvIHByaW50IGEgbW9yZSB1c2VmdWwgbWVzc2FnZVxuICAgICAgICAgICAgbG9nLmRlYnVnKCdDb25uZWN0aW9uIHRvIFdEQSB0aW1lZCBvdXQnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXByb3h5TG9nLmRlYnVnKGxpbmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiAoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHRoaXMuaXByb3h5LnN0YXJ0KElQUk9YWV9USU1FT1VUKTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGxvZy5lcnJvcihgRXJyb3Igc3RhcnRpbmcgaXByb3h5OiAnJHtlcnIubWVzc2FnZX0nYCk7XG4gICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignVW5hYmxlIHRvIHN0YXJ0IGlwcm94eS4gSXMgaXQgaW5zdGFsbGVkPycpKTtcbiAgICAgICAgfVxuICAgICAgfSkoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGtpbGxIYW5naW5nUHJvY2Vzc2VzICgpIHtcbiAgICBsb2cuZGVidWcoJ0tpbGxpbmcgaGFuZ2luZyBwcm9jZXNzZXMnKTtcbiAgICBhd2FpdCBraWxsQXBwVXNpbmdBcHBOYW1lKHRoaXMuZGV2aWNlLnVkaWQsIGB4Y29kZWJ1aWxkYCk7XG4gICAgbGV0IHByb2NOYW1lcyA9IHRoaXMucmVhbERldmljZSA/IFsnaXByb3h5J11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogWydYQ1RSdW5uZXInXTtcbiAgICBmb3IgKGxldCBwcm9jIG9mIHByb2NOYW1lcykge1xuICAgICAgYXdhaXQga2lsbEFwcFVzaW5nQXBwTmFtZSh0aGlzLmRldmljZS51ZGlkLCBwcm9jKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBxdWl0ICgpIHtcbiAgICBsb2cuaW5mbygnU2h1dHRpbmcgZG93biBzdWItcHJvY2Vzc2VzJyk7XG5cbiAgICBhc3luYyBmdW5jdGlvbiBraWxsUHJvY2VzcyAobmFtZSwgcHJvYykge1xuICAgICAgaWYgKHByb2MgJiYgcHJvYy5wcm9jKSB7XG4gICAgICAgIGxvZy5pbmZvKGBTaHV0dGluZyBkb3duICR7bmFtZX0gcHJvY2VzcyAocGlkICR7cHJvYy5wcm9jLnBpZH0pYCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgcHJvYy5zdG9wKCdTSUdURVJNJywgMTAwMCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKGBQcm9jZXNzIGRpZG4ndCBlbmQgYWZ0ZXJgKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbG9nLmRlYnVnKGAke25hbWV9IHByb2Nlc3MgZGlkIG5vdCBlbmQgaW4gYSB0aW1lbHkgZmFzaGlvbjogJyR7ZXJyLm1lc3NhZ2V9Jy4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBTZW5kaW5nICdTSUdLSUxMJy4uLmApO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBwcm9jLnN0b3AoJ1NJR0tJTEwnKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKCdub3QgY3VycmVudGx5IHJ1bm5pbmcnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgLy8gdGhlIHByb2Nlc3MgZW5kZWQgYnV0IGZvciBzb21lIHJlYXNvbiB3ZSB3ZXJlIG5vdCBpbmZvcm1lZFxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQga2lsbFByb2Nlc3MoJ3hjb2RlYnVpbGQnLCB0aGlzLnhjb2RlYnVpbGQpO1xuICAgIGF3YWl0IGtpbGxQcm9jZXNzKCdpcHJveHknLCB0aGlzLmlwcm94eSk7XG5cbiAgICAvLyBpZiBuZWNlc3NhcnksIHJlc2V0IHRoZSBidW5kbGVJZCB0byBvcmlnaW5hbCB2YWx1ZVxuICAgIGlmICh0aGlzLnJlYWxEZXZpY2UgJiYgdGhpcy51cGRhdGVkV0RBQnVuZGxlSWQpIHtcbiAgICAgIGF3YWl0IHJlc2V0UHJvamVjdEZpbGUodGhpcy5hZ2VudFBhdGgsIHRoaXMudXBkYXRlZFdEQUJ1bmRsZUlkKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5qd3Byb3h5KSB7XG4gICAgICB0aGlzLmp3cHJveHkuc2Vzc2lvbklkID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLmV4cGVjdElQcm94eUVycm9ycyA9IHRydWU7XG4gIH1cblxuICBnZXQgdXJsICgpIHtcbiAgICBpZiAoIXRoaXMuX3VybCkge1xuICAgICAgaWYgKHRoaXMucmVhbERldmljZSAmJiB0aGlzLndkYUxvY2FsUG9ydCkge1xuICAgICAgICB0aGlzLl91cmwgPSB1cmwucGFyc2UoYCR7V0RBX0JBU0VfVVJMfToke3RoaXMud2RhTG9jYWxQb3J0fWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdXJsID0gdXJsLnBhcnNlKGAke1dEQV9CQVNFX1VSTH06JHtXREFfQUdFTlRfUE9SVH1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3VybDtcbiAgfVxuXG4gIHNldCB1cmwgKF91cmwpIHtcbiAgICB0aGlzLl91cmwgPSB1cmwucGFyc2UoX3VybCk7XG4gIH1cblxuICBnZXQgZnVsbHlTdGFydGVkICgpIHtcbiAgICByZXR1cm4gIXRoaXMuZXhwZWN0SVByb3h5RXJyb3JzO1xuICB9XG5cbiAgc2V0IGZ1bGx5U3RhcnRlZCAoc3RhcnRlZCA9IGZhbHNlKSB7XG4gICAgLy8gYmVmb3JlIFdEQSBpcyBzdGFydGVkIHdlIGV4cGVjdCBlcnJvcnMgZnJvbSBpcHJveHksIHNpbmNlIGl0IGlzIG5vdFxuICAgIC8vIGNvbW11bmljYXRpbmcgd2l0aCBhbnl0aGluZyB5ZXRcbiAgICB0aGlzLmV4cGVjdElQcm94eUVycm9ycyA9ICFzdGFydGVkO1xuICB9XG5cbiAgZ2V0IGRlcml2ZWREYXRhUGF0aCAoKSB7XG4gICAgaWYgKCF0aGlzLl9kZXJpdmVkRGF0YVBhdGggJiYgdGhpcy54Y29kZWJ1aWxkKSB7XG4gICAgICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL1BxbVg4SS8xXG4gICAgICBjb25zdCBmb2xkZXJSZWdleHAgPSAvKC4rXFwvV2ViRHJpdmVyQWdlbnQtW15cXC9dKykvO1xuICAgICAgbGV0IG1hdGNoID0gZm9sZGVyUmVnZXhwLmV4ZWModGhpcy54Y29kZWJ1aWxkLmxvZ0xvY2F0aW9uKTtcbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fZGVyaXZlZERhdGFQYXRoID0gbWF0Y2hbMV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kZXJpdmVkRGF0YVBhdGg7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2ViRHJpdmVyQWdlbnQ7XG5leHBvcnQgeyBXZWJEcml2ZXJBZ2VudCwgV0RBX0JVTkRMRV9JRCwgQk9PVFNUUkFQX1BBVEggfTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
