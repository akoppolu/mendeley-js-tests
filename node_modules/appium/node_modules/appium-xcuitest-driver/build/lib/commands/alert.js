'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var commands = {},
    helpers = {},
    extensions = {};

commands.getAlertText = function callee$0$0() {
  var method, endpoint, _alert, text;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        method = 'GET';
        endpoint = '/alert/text';
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, method));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](0);

        if (this.isWebContext()) {
          context$1$0.next = 12;
          break;
        }

        throw context$1$0.t0;

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.getAlert());

      case 14:
        _alert = context$1$0.sent;
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(_alert.getText());

      case 17:
        text = context$1$0.sent;
        return context$1$0.abrupt('return', text);

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 8]]);
};

// TODO: WDA does not currently support this natively
commands.setAlertText = function callee$0$0(text) {
  var method, endpoint, _alert2;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!Array.isArray(text)) {
          text = text.split('');
        }
        context$1$0.prev = 1;
        method = 'POST';
        endpoint = '/alert/text';
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, method, text));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
        context$1$0.prev = 9;
        context$1$0.t0 = context$1$0['catch'](1);

        if (this.isWebContext()) {
          context$1$0.next = 13;
          break;
        }

        throw context$1$0.t0;

      case 13:
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(this.getAlert());

      case 15:
        _alert2 = context$1$0.sent;
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(_alert2.setText(text));

      case 18:
        return context$1$0.abrupt('return');

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 9]]);
};

commands.postAcceptAlert = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var method, endpoint, params, _alert3;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        method = 'POST';
        endpoint = '/alert/accept';
        params = {};

        if (opts.buttonLabel) {
          params.name = opts.buttonLabel;
        }
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, method, params));

      case 7:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](0);

        if (this.isWebContext()) {
          context$1$0.next = 14;
          break;
        }

        throw context$1$0.t0;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.getAlert());

      case 16:
        _alert3 = context$1$0.sent;

        if (!_alert3.close) {
          context$1$0.next = 22;
          break;
        }

        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(_alert3.close());

      case 20:
        context$1$0.next = 24;
        break;

      case 22:
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(_alert3.ok());

      case 24:
        return context$1$0.abrupt('return');

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 10]]);
};

commands.postDismissAlert = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var method, endpoint, params, _alert4;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        method = 'POST';
        endpoint = '/alert/dismiss';
        params = {};

        if (opts.buttonLabel) {
          params.name = opts.buttonLabel;
        }
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.proxyCommand(endpoint, method, params));

      case 7:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](0);

        if (this.isWebContext()) {
          context$1$0.next = 14;
          break;
        }

        throw context$1$0.t0;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.getAlert());

      case 16:
        _alert4 = context$1$0.sent;

        if (!_alert4.close) {
          context$1$0.next = 22;
          break;
        }

        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(_alert4.close());

      case 20:
        context$1$0.next = 24;
        break;

      case 22:
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(_alert4.cancel());

      case 24:
        return context$1$0.abrupt('return');

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 10]]);
};

commands.getAlertButtons = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/alert/buttons', 'GET'));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.mobileHandleAlert = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.t0 = opts.action;
        context$1$0.next = context$1$0.t0 === 'accept' ? 3 : context$1$0.t0 === 'dismiss' ? 6 : context$1$0.t0 === 'getButtons' ? 9 : 12;
        break;

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.postAcceptAlert(opts));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.postDismissAlert(opts));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.getAlertButtons());

      case 11:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 12:
        throw new Error('The \'action\' value should be either \'accept\', \'dismiss\' or \'getButtons\'. ' + ('\'' + opts.action + '\' is provided instead.'));

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.getAlert = function callee$0$0() {
  var possibleAlert, possibleAlertButtons, assertButtonName, alert;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeScrollView', true));

      case 2:
        possibleAlert = context$1$0.sent;

        if (!(possibleAlert.length !== 1)) {
          context$1$0.next = 5;
          break;
        }

        throw new _appiumBaseDriver.errors.NoAlertOpenError();

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, possibleAlert[0].ELEMENT));

      case 7:
        possibleAlertButtons = context$1$0.sent;

        if (!(possibleAlertButtons.length < 1 || possibleAlertButtons.length > 2)) {
          context$1$0.next = 10;
          break;
        }

        throw new _appiumBaseDriver.errors.NoAlertOpenError();

      case 10:
        assertButtonName = function assertButtonName(button, expectedName) {
          var name;
          return _regeneratorRuntime.async(function assertButtonName$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                button = button.ELEMENT ? button.ELEMENT : button;
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + button + '/attribute/name', 'GET'));

              case 3:
                name = context$2$0.sent;

                if (!(name.toLowerCase() !== expectedName)) {
                  context$2$0.next = 6;
                  break;
                }

                throw new _appiumBaseDriver.errors.NoAlertOpenError();

              case 6:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        alert = possibleAlert[0];

        if (!(possibleAlertButtons.length === 1)) {
          context$1$0.next = 17;
          break;
        }

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap((function callee$1$0() {
          var closeButton;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            var _this2 = this;

            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                closeButton = possibleAlertButtons[0];
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(assertButtonName(closeButton, 'close'));

              case 3:

                alert.close = function callee$2$0() {
                  return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                    while (1) switch (context$3$0.prev = context$3$0.next) {
                      case 0:
                        context$3$0.next = 2;
                        return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + closeButton.ELEMENT + '/click', 'POST'));

                      case 2:
                      case 'end':
                        return context$3$0.stop();
                    }
                  }, null, _this2);
                };

              case 4:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        })());

      case 15:
        context$1$0.next = 19;
        break;

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap((function callee$1$0() {
          var cancelButton, okButton;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            var _this3 = this;

            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                cancelButton = possibleAlertButtons[0];
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(assertButtonName(cancelButton, 'cancel'));

              case 3:
                okButton = possibleAlertButtons[1];
                context$2$0.next = 6;
                return _regeneratorRuntime.awrap(assertButtonName(okButton, 'ok'));

              case 6:

                alert.cancel = function callee$2$0() {
                  return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                    while (1) switch (context$3$0.prev = context$3$0.next) {
                      case 0:
                        context$3$0.next = 2;
                        return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + cancelButton.ELEMENT + '/click', 'POST'));

                      case 2:
                      case 'end':
                        return context$3$0.stop();
                    }
                  }, null, _this3);
                };
                alert.ok = function callee$2$0() {
                  return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                    while (1) switch (context$3$0.prev = context$3$0.next) {
                      case 0:
                        context$3$0.next = 2;
                        return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + okButton.ELEMENT + '/click', 'POST'));

                      case 2:
                      case 'end':
                        return context$3$0.stop();
                    }
                  }, null, _this3);
                };

              case 8:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        })());

      case 19:

        alert.getText = function callee$1$0() {
          var textView;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeTextView', false, alert.ELEMENT));

              case 2:
                textView = context$2$0.sent;
                context$2$0.next = 5;
                return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + textView.ELEMENT + '/attribute/value', 'GET'));

              case 5:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 6:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };
        alert.setText = function callee$1$0(value) {
          var textView;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.prev = 0;
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(this.findNativeElementOrElements('class name', 'XCUIElementTypeTextField', false, alert.ELEMENT));

              case 3:
                textView = context$2$0.sent;
                context$2$0.next = 6;
                return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + textView.ELEMENT + '/value ', 'POST', { value: value }));

              case 6:
                context$2$0.next = 13;
                break;

              case 8:
                context$2$0.prev = 8;
                context$2$0.t0 = context$2$0['catch'](0);

                if (!(0, _appiumBaseDriver.isErrorType)(context$2$0.t0, _appiumBaseDriver.errors.NoSuchElementError)) {
                  context$2$0.next = 12;
                  break;
                }

                throw new Error('Tried to set text of an alert that was not a prompt');

              case 12:
                throw context$2$0.t0;

              case 13:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[0, 8]]);
        };

        return context$1$0.abrupt('return', alert);

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// make sure the button is 'Close'

// ensure the buttons are 'Cancel' and 'OK'
//# sourceMappingURL=data:application/json;charset=utf8;base64,
