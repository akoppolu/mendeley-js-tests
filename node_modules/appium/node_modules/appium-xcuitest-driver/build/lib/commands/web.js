'use strict';

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumIosDriver = require('appium-ios-driver');

var _asyncbox = require('asyncbox');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var extensions = {};

_Object$assign(extensions, _appiumIosDriver.iosCommands.web);

extensions.clickCoords = function callee$0$0(coords) {
  var x, y;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        x = coords.x;
        y = coords.y;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.proxyCommand('/wda/tap/nil', 'POST', { x: x, y: y }));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.translateWebCoords = function callee$0$0(coords) {
  var webviewIndex, yOffset, webviews, wvId, rect, wvPos, realDims, cmd, _ref, w, h, wvDims, urlBarHeight, realDimensionHeight, xRatio, yRatio, newCoords;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Translating coordinates (' + JSON.stringify(coords) + ') to web coordinates');
        webviewIndex = this.webContextIndex();
        yOffset = this.opts.curOrientation === 'LANDSCAPE' ? this.landscapeWebCoordsOffset : 0;
        webviews = undefined;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(5, 100, function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.proxyCommand('/elements', 'POST', { using: 'class name', value: 'XCUIElementTypeWebView' }));

              case 2:
                webviews = context$2$0.sent;

                if (!(!webviews || webviews.length < 1)) {
                  context$2$0.next = 5;
                  break;
                }

                throw new Error('Could not find any webviews to click inside!');

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 6:
        if (_lodash2['default'].isUndefined(webviews[webviewIndex])) {
          _logger2['default'].warn('Could not find webview at index ' + webviewIndex + ', taking ' + 'last available one for clicking purposes');
          webviewIndex = webviews.length - 1;
        }

        wvId = webviews[webviewIndex].ELEMENT;
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.proxyCommand('/element/' + wvId + '/rect', 'GET'));

      case 10:
        rect = context$1$0.sent;
        wvPos = { x: rect.x, y: rect.y };
        realDims = { w: rect.width, h: rect.height };
        cmd = '(function () { return {w: document.documentElement.clientWidth, h: document.documentElement.clientHeight}; })()';
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.remote.execute(cmd));

      case 16:
        _ref = context$1$0.sent;
        w = _ref.w;
        h = _ref.h;
        wvDims = { w: w, h: h };
        urlBarHeight = 64;

        wvPos.y += urlBarHeight;

        realDimensionHeight = 108;

        realDims.h -= realDimensionHeight;

        if (!(wvDims && realDims && wvPos)) {
          context$1$0.next = 30;
          break;
        }

        xRatio = realDims.w / wvDims.w;
        yRatio = realDims.h / wvDims.h;
        newCoords = {
          x: wvPos.x + Math.round(xRatio * coords.x),
          y: wvPos.y + yOffset + Math.round(yRatio * coords.y)
        };

        _logger2['default'].debug('Converted web coords ' + JSON.stringify(coords) + ' ' + ('into real coords ' + JSON.stringify(newCoords)));
        return context$1$0.abrupt('return', newCoords);

      case 30:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.checkForAlert = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', false);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.waitForAtom = function callee$0$0(promise) {
  var res, msg;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        res = null;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(promise);

      case 4:
        res = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);
        msg = _lodash2['default'].isString(context$1$0.t0.message) ? context$1$0.t0.message : JSON.stringify(context$1$0.t0.message);
        throw new Error('Error while executing atom: ' + msg);

      case 11:
        return context$1$0.abrupt('return', this.parseExecuteResponse(res));

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
};

exports['default'] = extensions;
module.exports = exports['default'];

// tap on absolute coordinates

// add static offset for safari in landscape mode

// absolutize web coords

// TODO: investigate where these come from. They appear to be constants in my tests

// TODO: Add check for alert and accept/dismiss it as per autoAcceptAlert capability
//# sourceMappingURL=data:application/json;charset=utf8;base64,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QVUiLCJmaWxlIjoibGliL2NvbW1hbmRzL3dlYi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlvc0NvbW1hbmRzIH0gZnJvbSAnYXBwaXVtLWlvcy1kcml2ZXInO1xuaW1wb3J0IHsgcmV0cnlJbnRlcnZhbCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cblxubGV0IGV4dGVuc2lvbnMgPSB7fTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBpb3NDb21tYW5kcy53ZWIpO1xuXG5leHRlbnNpb25zLmNsaWNrQ29vcmRzID0gYXN5bmMgZnVuY3Rpb24gKGNvb3Jkcykge1xuICBsZXQge3gsIHl9ID0gY29vcmRzO1xuXG4gIC8vIHRhcCBvbiBhYnNvbHV0ZSBjb29yZGluYXRlc1xuICBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS90YXAvbmlsJywgJ1BPU1QnLCB7eCwgeX0pO1xufTtcblxuZXh0ZW5zaW9ucy50cmFuc2xhdGVXZWJDb29yZHMgPSBhc3luYyBmdW5jdGlvbiAoY29vcmRzKSB7XG4gIGxvZy5kZWJ1ZyhgVHJhbnNsYXRpbmcgY29vcmRpbmF0ZXMgKCR7SlNPTi5zdHJpbmdpZnkoY29vcmRzKX0pIHRvIHdlYiBjb29yZGluYXRlc2ApO1xuICBsZXQgd2Vidmlld0luZGV4ID0gdGhpcy53ZWJDb250ZXh0SW5kZXgoKTtcblxuICAvLyBhZGQgc3RhdGljIG9mZnNldCBmb3Igc2FmYXJpIGluIGxhbmRzY2FwZSBtb2RlXG4gIGxldCB5T2Zmc2V0ID0gdGhpcy5vcHRzLmN1ck9yaWVudGF0aW9uID09PSAnTEFORFNDQVBFJyA/IHRoaXMubGFuZHNjYXBlV2ViQ29vcmRzT2Zmc2V0IDogMDtcblxuICAvLyBhYnNvbHV0aXplIHdlYiBjb29yZHNcbiAgbGV0IHdlYnZpZXdzO1xuICBhd2FpdCByZXRyeUludGVydmFsKDUsIDEwMCwgYXN5bmMgKCkgPT4ge1xuICAgIHdlYnZpZXdzID0gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy9lbGVtZW50cycsICdQT1NUJywge3VzaW5nOiAnY2xhc3MgbmFtZScsIHZhbHVlOiAnWENVSUVsZW1lbnRUeXBlV2ViVmlldyd9KTtcbiAgICBpZiAoIXdlYnZpZXdzIHx8IHdlYnZpZXdzLmxlbmd0aCA8IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgYW55IHdlYnZpZXdzIHRvIGNsaWNrIGluc2lkZSEnKTtcbiAgICB9XG4gIH0pO1xuICBpZiAoXy5pc1VuZGVmaW5lZCh3ZWJ2aWV3c1t3ZWJ2aWV3SW5kZXhdKSkge1xuICAgIGxvZy53YXJuKGBDb3VsZCBub3QgZmluZCB3ZWJ2aWV3IGF0IGluZGV4ICR7d2Vidmlld0luZGV4fSwgdGFraW5nIGAgK1xuICAgICAgICAgICAgICAgIGBsYXN0IGF2YWlsYWJsZSBvbmUgZm9yIGNsaWNraW5nIHB1cnBvc2VzYCk7XG4gICAgd2Vidmlld0luZGV4ID0gd2Vidmlld3MubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIGxldCB3dklkID0gd2Vidmlld3Nbd2Vidmlld0luZGV4XS5FTEVNRU5UO1xuICBsZXQgcmVjdCA9IGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke3d2SWR9L3JlY3RgLCAnR0VUJyk7XG4gIGxldCB3dlBvcyA9IHt4OiByZWN0LngsIHk6IHJlY3QueX07XG4gIGxldCByZWFsRGltcyA9IHt3OiByZWN0LndpZHRoLCBoOiByZWN0LmhlaWdodH07XG5cbiAgbGV0IGNtZCA9ICcoZnVuY3Rpb24gKCkgeyByZXR1cm4ge3c6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgaDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodH07IH0pKCknO1xuICBsZXQge3csIGh9ID0gYXdhaXQgdGhpcy5yZW1vdGUuZXhlY3V0ZShjbWQpO1xuICBsZXQgd3ZEaW1zID0ge3csIGh9O1xuXG4gIC8vIFRPRE86IGludmVzdGlnYXRlIHdoZXJlIHRoZXNlIGNvbWUgZnJvbS4gVGhleSBhcHBlYXIgdG8gYmUgY29uc3RhbnRzIGluIG15IHRlc3RzXG4gIGxldCB1cmxCYXJIZWlnaHQgPSA2NDtcbiAgd3ZQb3MueSArPSB1cmxCYXJIZWlnaHQ7XG5cbiAgbGV0IHJlYWxEaW1lbnNpb25IZWlnaHQgPSAxMDg7XG4gIHJlYWxEaW1zLmggLT0gcmVhbERpbWVuc2lvbkhlaWdodDtcblxuICBpZiAod3ZEaW1zICYmIHJlYWxEaW1zICYmIHd2UG9zKSB7XG4gICAgbGV0IHhSYXRpbyA9IHJlYWxEaW1zLncgLyB3dkRpbXMudztcbiAgICBsZXQgeVJhdGlvID0gcmVhbERpbXMuaCAvIHd2RGltcy5oO1xuICAgIGxldCBuZXdDb29yZHMgPSB7XG4gICAgICB4OiB3dlBvcy54ICsgTWF0aC5yb3VuZCh4UmF0aW8gKiBjb29yZHMueCksXG4gICAgICB5OiB3dlBvcy55ICsgeU9mZnNldCArIE1hdGgucm91bmQoeVJhdGlvICogY29vcmRzLnkpLFxuICAgIH07XG4gICAgbG9nLmRlYnVnKGBDb252ZXJ0ZWQgd2ViIGNvb3JkcyAke0pTT04uc3RyaW5naWZ5KGNvb3Jkcyl9IGAgK1xuICAgICAgICAgICAgICAgIGBpbnRvIHJlYWwgY29vcmRzICR7SlNPTi5zdHJpbmdpZnkobmV3Q29vcmRzKX1gKTtcbiAgICByZXR1cm4gbmV3Q29vcmRzO1xuICB9XG59O1xuXG5leHRlbnNpb25zLmNoZWNrRm9yQWxlcnQgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4dGVuc2lvbnMud2FpdEZvckF0b20gPSBhc3luYyBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAvLyBUT0RPOiBBZGQgY2hlY2sgZm9yIGFsZXJ0IGFuZCBhY2NlcHQvZGlzbWlzcyBpdCBhcyBwZXIgYXV0b0FjY2VwdEFsZXJ0IGNhcGFiaWxpdHlcbiAgbGV0IHJlcyA9IG51bGw7XG4gIHRyeSB7XG4gICAgcmVzID0gYXdhaXQgcHJvbWlzZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbGV0IG1zZyA9IF8uaXNTdHJpbmcoZXJyLm1lc3NhZ2UpID8gZXJyLm1lc3NhZ2UgOiBKU09OLnN0cmluZ2lmeShlcnIubWVzc2FnZSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciB3aGlsZSBleGVjdXRpbmcgYXRvbTogJHttc2d9YCk7XG4gIH1cbiAgcmV0dXJuIHRoaXMucGFyc2VFeGVjdXRlUmVzcG9uc2UocmVzKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
