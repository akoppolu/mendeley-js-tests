'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumIosSimulator = require('appium-ios-simulator');

var _nodeSimctl = require('node-simctl');

var _asyncbox = require('asyncbox');

var _teen_process = require('teen_process');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

// returns true if sim is booted. false if not booted or doesnt exist
function simBooted(sim) {
  var stat;
  return _regeneratorRuntime.async(function simBooted$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(sim.stat());

      case 2:
        stat = context$1$0.sent;
        return context$1$0.abrupt('return', stat.state === 'Booted');

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

// returns sim for desired caps
function createSim(caps, sessionId) {
  var name, udid;
  return _regeneratorRuntime.async(function createSim$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        name = 'appiumTest-' + sessionId;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.createDevice)(name, caps.deviceName, caps.platformVersion));

      case 3:
        udid = context$1$0.sent;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap((0, _appiumIosSimulator.getSimulator)(udid));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getExistingSim(deviceName, platformVersion) {
  var devices, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, device;

  return _regeneratorRuntime.async(function getExistingSim$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.getDevices)(platformVersion));

      case 2:
        devices = context$1$0.sent;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 6;
        _iterator = _getIterator(_lodash2['default'].values(devices));

      case 8:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 17;
          break;
        }

        device = _step.value;

        if (!(device.name === deviceName)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 13;
        return _regeneratorRuntime.awrap((0, _appiumIosSimulator.getSimulator)(device.udid));

      case 13:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 14:
        _iteratorNormalCompletion = true;
        context$1$0.next = 8;
        break;

      case 17:
        context$1$0.next = 23;
        break;

      case 19:
        context$1$0.prev = 19;
        context$1$0.t0 = context$1$0['catch'](6);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 23:
        context$1$0.prev = 23;
        context$1$0.prev = 24;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 26:
        context$1$0.prev = 26;

        if (!_didIteratorError) {
          context$1$0.next = 29;
          break;
        }

        throw _iteratorError;

      case 29:
        return context$1$0.finish(26);

      case 30:
        return context$1$0.finish(23);

      case 31:
        return context$1$0.abrupt('return', null);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 19, 23, 31], [24,, 26, 30]]);
}

function prepareSafariForCleanup() {
  var timeout = arguments.length <= 0 || arguments[0] === undefined ? 5000 : arguments[0];
  return _regeneratorRuntime.async(function prepareSafariForCleanup$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.prev = 0;
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)('pgrep', ['-x', 'MobileSafari']));

              case 3:
                context$2$0.next = 19;
                break;

              case 5:
                context$2$0.prev = 5;
                context$2$0.t0 = context$2$0['catch'](0);

                if (!(context$2$0.t0.code === 1)) {
                  context$2$0.next = 9;
                  break;
                }

                return context$2$0.abrupt('return', true);

              case 9:
                context$2$0.prev = 9;
                context$2$0.next = 12;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)('pkill', ['-9', '-x', 'MobileSafari']));

              case 12:
                context$2$0.next = 19;
                break;

              case 14:
                context$2$0.prev = 14;
                context$2$0.t1 = context$2$0['catch'](9);

                if (!(context$2$0.t1.code === 1)) {
                  context$2$0.next = 18;
                  break;
                }

                return context$2$0.abrupt('return', true);

              case 18:
                _logger2['default'].warn(context$2$0.t1.message);

              case 19:
                return context$2$0.abrupt('return', false);

              case 20:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[0, 5], [9, 14]]);
        }, {
          waitMs: timeout,
          intervalMs: 200
        }));

      case 3:
        _logger2['default'].debug('Mobile Safari process is not running. Continuing with cleanup');
        context$1$0.next = 9;
        break;

      case 6:
        context$1$0.prev = 6;
        context$1$0.t0 = context$1$0['catch'](0);

        _logger2['default'].warn('Mobile Safari is still running after ' + timeout + ' ms');

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 6]]);
}

function runSimulatorReset(device, opts) {
  var isSafari;
  return _regeneratorRuntime.async(function runSimulatorReset$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(opts.noReset && !opts.fullReset)) {
          context$1$0.next = 3;
          break;
        }

        // noReset === true && fullReset === false
        _logger2['default'].debug('Reset: noReset is on. Leaving simulator as is');
        return context$1$0.abrupt('return');

      case 3:
        if (device) {
          context$1$0.next = 6;
          break;
        }

        _logger2['default'].debug('Reset: no device available. Skipping');
        return context$1$0.abrupt('return');

      case 6:
        if (!opts.fullReset) {
          context$1$0.next = 14;
          break;
        }

        _logger2['default'].debug('Reset: fullReset is on. Cleaning simulator');
        // The simulator process must be ended before we delete applications.
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(endSimulator(device));

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(fullResetSimulator(device));

      case 12:
        context$1$0.next = 51;
        break;

      case 14:
        if (!opts.bundleId) {
          context$1$0.next = 51;
          break;
        }

        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(simBooted(device));

      case 17:
        if (!context$1$0.sent) {
          context$1$0.next = 31;
          break;
        }

        if (!(device.xcodeVersion.major >= 8)) {
          context$1$0.next = 29;
          break;
        }

        context$1$0.prev = 19;
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.terminate)(device.udid, opts.bundleId));

      case 22:
        context$1$0.next = 27;
        break;

      case 24:
        context$1$0.prev = 24;
        context$1$0.t0 = context$1$0['catch'](19);

        _logger2['default'].warn('Reset: failed to terminate Simulator application with id "' + opts.bundleId + '"');

      case 27:
        context$1$0.next = 31;
        break;

      case 29:
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(endSimulator(device));

      case 31:
        if (!opts.app) {
          context$1$0.next = 34;
          break;
        }

        _logger2['default'].info('Not scrubbing third party app in anticipation of uninstall');
        return context$1$0.abrupt('return');

      case 34:
        isSafari = (opts.browserName || '').toLowerCase() === 'safari';
        context$1$0.prev = 35;

        if (!isSafari) {
          context$1$0.next = 43;
          break;
        }

        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(prepareSafariForCleanup());

      case 39:
        context$1$0.next = 41;
        return _regeneratorRuntime.awrap(device.cleanSafari());

      case 41:
        context$1$0.next = 45;
        break;

      case 43:
        context$1$0.next = 45;
        return _regeneratorRuntime.awrap(device.scrubCustomApp(_path2['default'].basename(opts.app), opts.bundleId));

      case 45:
        context$1$0.next = 51;
        break;

      case 47:
        context$1$0.prev = 47;
        context$1$0.t1 = context$1$0['catch'](35);

        _logger2['default'].warn(context$1$0.t1.message);
        _logger2['default'].warn('Reset: could not scrub ' + (isSafari ? 'Safari browser' : 'application with id "' + opts.bundleId + '"') + '. Leaving as is.');

      case 51:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[19, 24], [35, 47]]);
}

function fullResetSimulator(device) {
  return _regeneratorRuntime.async(function fullResetSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (device) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(device.clean());

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function endSimulator(device) {
  return _regeneratorRuntime.async(function endSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (device) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:

        _logger2['default'].debug('Reset: shutting down simulator');
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(device.shutdown());

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function isolateSimulatorDevice(device) {
  var isolateSimDevice = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
  return _regeneratorRuntime.async(function isolateSimulatorDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!isolateSimDevice) {
          context$1$0.next = 3;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(device.isolateSim());

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function installToSimulator(device, app, bundleId) {
  var noReset = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
  return _regeneratorRuntime.async(function installToSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (app) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].debug('No app path is given. Nothing to install.');
        return context$1$0.abrupt('return');

      case 3:
        if (!bundleId) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(device.isAppInstalled(bundleId));

      case 6:
        if (!context$1$0.sent) {
          context$1$0.next = 13;
          break;
        }

        if (!noReset) {
          context$1$0.next = 10;
          break;
        }

        _logger2['default'].debug('App \'' + bundleId + '\' is already installed. No need to reinstall.');
        return context$1$0.abrupt('return');

      case 10:
        _logger2['default'].debug('Reset requested. Removing app with id \'' + bundleId + '\' from the device');
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(device.removeApp(bundleId));

      case 13:
        _logger2['default'].debug('Installing ' + app + ' on Simulator with UUID \'' + device.udid + '\'...');
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(device.installApp(app));

      case 16:
        _logger2['default'].debug('The app has been installed successfully.');

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.simBooted = simBooted;
exports.createSim = createSim;
exports.getExistingSim = getExistingSim;
exports.runSimulatorReset = runSimulatorReset;
exports.isolateSimulatorDevice = isolateSimulatorDevice;
exports.installToSimulator = installToSimulator;

// Terminate the app under test if it is still running on Simulator
// Termination is not needed if Simulator is not running
//# sourceMappingURL=data:application/json;charset=utf8;base64,
