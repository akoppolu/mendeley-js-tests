'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _helpers = require('./helpers');

var should = _chai2['default'].should();

function generalTests() {
  var _this = this;

  describe('generic actions', function () {
    var driver = undefined;
    (0, _helpers.initSession)(_helpers.DEFAULT_CAPS).then(function (d) {
      driver = d;
    });
    it('should not send keys without a focused element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.keys("test").should.eventually.be.rejectedWith(/12/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should send keys to a focused element', function callee$2$0() {
      var el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementById('input'));

          case 2:
            el = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(el.click());

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(driver.keys("test"));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(el.text());

          case 9:
            context$3$0.sent.should.equal("test");

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it.skip('should set geolocation', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setGeoLocation(-30, 30));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should get geolocation', function callee$2$0() {
      var geo;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getGeoLocation());

          case 2:
            geo = context$3$0.sent;

            should.exist(geo.latitude);
            should.exist(geo.longitude);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should get app source', function callee$2$0() {
      var source;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.source());

          case 2:
            source = context$3$0.sent;

            source.should.contain('<MockNavBar id="nav"');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    // TODO do we want to test driver.pageIndex? probably not

    it('should get the orientation', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getOrientation());

          case 2:
            context$3$0.sent.should.equal("PORTRAIT");

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should set the orientation to something valid', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setOrientation("LANDSCAPE"));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.getOrientation());

          case 4:
            context$3$0.sent.should.equal("LANDSCAPE");

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should not set the orientation to something invalid', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setOrientation("INSIDEOUT").should.eventually.be.rejectedWith(/Orientation must be/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should get a screenshot', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.t0 = should;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.takeScreenshot());

          case 3:
            context$3$0.t1 = context$3$0.sent;
            context$3$0.t0.exist.call(context$3$0.t0, context$3$0.t1);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should set implicit wait timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setImplicitWaitTimeout(1000));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should not set invalid implicit wait timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setImplicitWaitTimeout('foo').should.eventually.be.rejectedWith(/ms/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    // skip these until basedriver supports these timeouts
    it.skip('should set async script timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setAsyncScriptTimeout(1000));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it.skip('should not set invalid async script timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setAsyncScriptTimeout('foo').should.eventually.be.rejectedWith(/ms/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it.skip('should set page load timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setPageLoadTimeout(1000));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it.skip('should not set page load script timeout', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.setPageLoadTimeout('foo').should.eventually.be.rejectedWith(/ms/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
}

exports['default'] = generalTests;
module.exports = exports['default'];

// TODO unquarantine when WD fixes what it sends the server
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZ2VuZXJhbC10ZXN0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O29CQUFpQixNQUFNOzs7O3VCQUNtQixXQUFXOztBQUVyRCxJQUFNLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQzs7QUFFN0IsU0FBUyxZQUFZLEdBQUk7OztBQUN2QixVQUFRLENBQUMsaUJBQWlCLEVBQUUsWUFBTTtBQUNoQyxRQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsb0RBQXlCLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxFQUFLO0FBQUUsWUFBTSxHQUFHLENBQUMsQ0FBQztLQUFFLENBQUMsQ0FBQztBQUN2RCxNQUFFLENBQUMsZ0RBQWdELEVBQUU7Ozs7OzZDQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7S0FDbEUsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLHVDQUF1QyxFQUFFO1VBQ3RDLEVBQUU7Ozs7OzZDQUFTLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDOzs7QUFBdEMsY0FBRTs7NkNBQ0EsRUFBRSxDQUFDLEtBQUssRUFBRTs7Ozs2Q0FDVixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7Ozs2Q0FDbEIsRUFBRSxDQUFDLElBQUksRUFBRTs7OzZCQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTTs7Ozs7OztLQUN0QyxDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFOzs7Ozs2Q0FFMUIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7Ozs7Ozs7S0FDckMsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLHdCQUF3QixFQUFFO1VBQ3ZCLEdBQUc7Ozs7OzZDQUFTLE1BQU0sQ0FBQyxjQUFjLEVBQUU7OztBQUFuQyxlQUFHOztBQUNQLGtCQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMzQixrQkFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7Ozs7Ozs7S0FDN0IsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLHVCQUF1QixFQUFFO1VBQ3RCLE1BQU07Ozs7OzZDQUFTLE1BQU0sQ0FBQyxNQUFNLEVBQUU7OztBQUE5QixrQkFBTTs7QUFDVixrQkFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQzs7Ozs7OztLQUMvQyxDQUFDLENBQUM7OztBQUdILE1BQUUsQ0FBQyw0QkFBNEIsRUFBRTs7Ozs7NkNBQ3hCLE1BQU0sQ0FBQyxjQUFjLEVBQUU7Ozs2QkFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVU7Ozs7Ozs7S0FDeEQsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLCtDQUErQyxFQUFFOzs7Ozs2Q0FDNUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUM7Ozs7NkNBQ2pDLE1BQU0sQ0FBQyxjQUFjLEVBQUU7Ozs2QkFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVc7Ozs7Ozs7S0FDekQsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLHFEQUFxRCxFQUFFOzs7Ozs2Q0FDbEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FDL0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUFDOzs7Ozs7O0tBQ2xFLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMseUJBQXlCLEVBQUU7Ozs7NkJBQzVCLE1BQU07OzZDQUFhLE1BQU0sQ0FBQyxjQUFjLEVBQUU7Ozs7MkJBQW5DLEtBQUs7Ozs7Ozs7S0FDYixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLGtDQUFrQyxFQUFFOzs7Ozs2Q0FDL0IsTUFBTSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQzs7Ozs7OztLQUMxQyxDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsOENBQThDLEVBQUU7Ozs7OzZDQUMzQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQ2pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7S0FDakQsQ0FBQyxDQUFDOzs7QUFHSCxNQUFFLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxFQUFFOzs7Ozs2Q0FDbkMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQzs7Ozs7OztLQUN6QyxDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxFQUFFOzs7Ozs2Q0FDL0MsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUNoQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDOzs7Ozs7O0tBQ2pELENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsSUFBSSxDQUFDLDhCQUE4QixFQUFFOzs7Ozs2Q0FDaEMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQzs7Ozs7OztLQUN0QyxDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsSUFBSSxDQUFDLHlDQUF5QyxFQUFFOzs7Ozs2Q0FDM0MsTUFBTSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUM3QixNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDOzs7Ozs7O0tBQ2pELENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUNKOztxQkFFYyxZQUFZIiwiZmlsZSI6InRlc3QvZ2VuZXJhbC10ZXN0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IHsgaW5pdFNlc3Npb24sIERFRkFVTFRfQ0FQUyB9IGZyb20gJy4vaGVscGVycyc7XG5cbmNvbnN0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG5cbmZ1bmN0aW9uIGdlbmVyYWxUZXN0cyAoKSB7XG4gIGRlc2NyaWJlKCdnZW5lcmljIGFjdGlvbnMnLCAoKSA9PiB7XG4gICAgbGV0IGRyaXZlcjtcbiAgICBpbml0U2Vzc2lvbihERUZBVUxUX0NBUFMpLnRoZW4oKGQpID0+IHsgZHJpdmVyID0gZDsgfSk7XG4gICAgaXQoJ3Nob3VsZCBub3Qgc2VuZCBrZXlzIHdpdGhvdXQgYSBmb2N1c2VkIGVsZW1lbnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBkcml2ZXIua2V5cyhcInRlc3RcIikuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC8xMi8pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgc2VuZCBrZXlzIHRvIGEgZm9jdXNlZCBlbGVtZW50JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IGVsID0gYXdhaXQgZHJpdmVyLmVsZW1lbnRCeUlkKCdpbnB1dCcpO1xuICAgICAgYXdhaXQgZWwuY2xpY2soKTtcbiAgICAgIGF3YWl0IGRyaXZlci5rZXlzKFwidGVzdFwiKTtcbiAgICAgIChhd2FpdCBlbC50ZXh0KCkpLnNob3VsZC5lcXVhbChcInRlc3RcIik7XG4gICAgfSk7XG4gICAgaXQuc2tpcCgnc2hvdWxkIHNldCBnZW9sb2NhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFRPRE8gdW5xdWFyYW50aW5lIHdoZW4gV0QgZml4ZXMgd2hhdCBpdCBzZW5kcyB0aGUgc2VydmVyXG4gICAgICBhd2FpdCBkcml2ZXIuc2V0R2VvTG9jYXRpb24oLTMwLCAzMCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBnZXQgZ2VvbG9jYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgZ2VvID0gYXdhaXQgZHJpdmVyLmdldEdlb0xvY2F0aW9uKCk7XG4gICAgICBzaG91bGQuZXhpc3QoZ2VvLmxhdGl0dWRlKTtcbiAgICAgIHNob3VsZC5leGlzdChnZW8ubG9uZ2l0dWRlKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGdldCBhcHAgc291cmNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHNvdXJjZSA9IGF3YWl0IGRyaXZlci5zb3VyY2UoKTtcbiAgICAgIHNvdXJjZS5zaG91bGQuY29udGFpbignPE1vY2tOYXZCYXIgaWQ9XCJuYXZcIicpO1xuICAgIH0pO1xuICAgIC8vIFRPRE8gZG8gd2Ugd2FudCB0byB0ZXN0IGRyaXZlci5wYWdlSW5kZXg/IHByb2JhYmx5IG5vdFxuXG4gICAgaXQoJ3Nob3VsZCBnZXQgdGhlIG9yaWVudGF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgKGF3YWl0IGRyaXZlci5nZXRPcmllbnRhdGlvbigpKS5zaG91bGQuZXF1YWwoXCJQT1JUUkFJVFwiKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHNldCB0aGUgb3JpZW50YXRpb24gdG8gc29tZXRoaW5nIHZhbGlkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZHJpdmVyLnNldE9yaWVudGF0aW9uKFwiTEFORFNDQVBFXCIpO1xuICAgICAgKGF3YWl0IGRyaXZlci5nZXRPcmllbnRhdGlvbigpKS5zaG91bGQuZXF1YWwoXCJMQU5EU0NBUEVcIik7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBub3Qgc2V0IHRoZSBvcmllbnRhdGlvbiB0byBzb21ldGhpbmcgaW52YWxpZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGRyaXZlci5zZXRPcmllbnRhdGlvbihcIklOU0lERU9VVFwiKVxuICAgICAgICAgICAgICAuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC9PcmllbnRhdGlvbiBtdXN0IGJlLyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdldCBhIHNjcmVlbnNob3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBzaG91bGQuZXhpc3QoYXdhaXQgZHJpdmVyLnRha2VTY3JlZW5zaG90KCkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzZXQgaW1wbGljaXQgd2FpdCB0aW1lb3V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZHJpdmVyLnNldEltcGxpY2l0V2FpdFRpbWVvdXQoMTAwMCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBub3Qgc2V0IGludmFsaWQgaW1wbGljaXQgd2FpdCB0aW1lb3V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZHJpdmVyLnNldEltcGxpY2l0V2FpdFRpbWVvdXQoJ2ZvbycpXG4gICAgICAgICAgICAgIC5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoL21zLyk7XG4gICAgfSk7XG5cbiAgICAvLyBza2lwIHRoZXNlIHVudGlsIGJhc2Vkcml2ZXIgc3VwcG9ydHMgdGhlc2UgdGltZW91dHNcbiAgICBpdC5za2lwKCdzaG91bGQgc2V0IGFzeW5jIHNjcmlwdCB0aW1lb3V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZHJpdmVyLnNldEFzeW5jU2NyaXB0VGltZW91dCgxMDAwKTtcbiAgICB9KTtcbiAgICBpdC5za2lwKCdzaG91bGQgbm90IHNldCBpbnZhbGlkIGFzeW5jIHNjcmlwdCB0aW1lb3V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZHJpdmVyLnNldEFzeW5jU2NyaXB0VGltZW91dCgnZm9vJylcbiAgICAgICAgICAgICAgLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvbXMvKTtcbiAgICB9KTtcblxuICAgIGl0LnNraXAoJ3Nob3VsZCBzZXQgcGFnZSBsb2FkIHRpbWVvdXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBkcml2ZXIuc2V0UGFnZUxvYWRUaW1lb3V0KDEwMDApO1xuICAgIH0pO1xuICAgIGl0LnNraXAoJ3Nob3VsZCBub3Qgc2V0IHBhZ2UgbG9hZCBzY3JpcHQgdGltZW91dCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGRyaXZlci5zZXRQYWdlTG9hZFRpbWVvdXQoJ2ZvbycpXG4gICAgICAgICAgICAgIC5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoL21zLyk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZW5lcmFsVGVzdHM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
