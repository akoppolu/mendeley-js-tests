'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _helpers = require('./helpers');

function alertTests() {
  var _this = this;

  describe('alerts', function () {
    var driver = undefined;
    (0, _helpers.initSession)(_helpers.DEFAULT_CAPS).then(function (d) {
      driver = d;
    });

    it('should not work with alerts when one is not present', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.alertText().should.eventually.be.rejectedWith(/27/));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.alertKeys('foo').should.eventually.be.rejectedWith(/27/));

          case 4:
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.acceptAlert().should.eventually.be.rejectedWith(/27/));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.dismissAlert().should.eventually.be.rejectedWith(/27/));

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should get text of an alert', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementById("AlertButton").click());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.alertText());

          case 4:
            context$3$0.sent.should.equal("Fake Alert");

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should set the text of an alert', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.alertKeys('foo'));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.alertText());

          case 4:
            context$3$0.sent.should.equal('foo');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should not do other things while an alert is there', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementById("nav").click().should.eventually.be.rejectedWith(/26/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it.skip('should accept an alert', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.acceptAlert().elementById("nav").click().nodeify();

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it.skip('should not set the text of the wrong kind of alert', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.elementById("AlertButton2").click().alertText().should.eventually.become('Fake Alert 2').alertKeys('foo').should.be.rejectedWith(/12/).nodeify();

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it.skip('should dismiss an alert', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.acceptAlert().elementById("nav").click().nodeify();

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
}

exports['default'] = alertTests;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYWxlcnQtdGVzdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7dUJBQTBDLFdBQVc7O0FBRXJELFNBQVMsVUFBVSxHQUFJOzs7QUFDckIsVUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0FBQ3ZCLFFBQUksTUFBTSxZQUFBLENBQUM7QUFDWCxvREFBeUIsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFDLEVBQUs7QUFBRSxZQUFNLEdBQUcsQ0FBQyxDQUFDO0tBQUUsQ0FBQyxDQUFDOztBQUV2RCxNQUFFLENBQUMscURBQXFELEVBQUU7Ozs7OzZDQUNsRCxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQzs7Ozs2Q0FDMUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDOzs7OzZDQUMvRCxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQzs7Ozs2Q0FDNUQsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7S0FDcEUsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLDZCQUE2QixFQUFFOzs7Ozs2Q0FDMUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLEVBQUU7Ozs7NkNBQ3hDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Ozs2QkFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVk7Ozs7Ozs7S0FDckQsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLGlDQUFpQyxFQUFFOzs7Ozs2Q0FDOUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7Ozs7NkNBQ3RCLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Ozs2QkFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUs7Ozs7Ozs7S0FDOUMsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLG9EQUFvRCxFQUFFOzs7Ozs2Q0FDakQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FDOUIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQzs7Ozs7OztLQUNqRCxDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFOzs7O0FBQ2hDLGtCQUFNLENBQ0gsV0FBVyxFQUFFLENBQ2IsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUNsQixLQUFLLEVBQUUsQ0FDUCxPQUFPLEVBQUUsQ0FBQzs7Ozs7OztLQUNkLENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQyxJQUFJLENBQUMsb0RBQW9ELEVBQUU7Ozs7QUFDNUQsa0JBQU0sQ0FDSCxXQUFXLENBQUMsY0FBYyxDQUFDLENBQzNCLEtBQUssRUFBRSxDQUNQLFNBQVMsRUFBRSxDQUNULE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUMxQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQ2QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQzlCLE9BQU8sRUFBRSxDQUFDOzs7Ozs7O0tBQ2QsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRTs7OztBQUNqQyxrQkFBTSxDQUNILFdBQVcsRUFBRSxDQUNiLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FDbEIsS0FBSyxFQUFFLENBQ1AsT0FBTyxFQUFFLENBQUM7Ozs7Ozs7S0FDZCxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FFSjs7cUJBRWMsVUFBVSIsImZpbGUiOiJ0ZXN0L2FsZXJ0LXRlc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5pdFNlc3Npb24sIERFRkFVTFRfQ0FQUyB9IGZyb20gJy4vaGVscGVycyc7XG5cbmZ1bmN0aW9uIGFsZXJ0VGVzdHMgKCkge1xuICBkZXNjcmliZSgnYWxlcnRzJywgKCkgPT4ge1xuICAgIGxldCBkcml2ZXI7XG4gICAgaW5pdFNlc3Npb24oREVGQVVMVF9DQVBTKS50aGVuKChkKSA9PiB7IGRyaXZlciA9IGQ7IH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3Qgd29yayB3aXRoIGFsZXJ0cyB3aGVuIG9uZSBpcyBub3QgcHJlc2VudCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGRyaXZlci5hbGVydFRleHQoKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoLzI3Lyk7XG4gICAgICBhd2FpdCBkcml2ZXIuYWxlcnRLZXlzKCdmb28nKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoLzI3Lyk7XG4gICAgICBhd2FpdCBkcml2ZXIuYWNjZXB0QWxlcnQoKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoLzI3Lyk7XG4gICAgICBhd2FpdCBkcml2ZXIuZGlzbWlzc0FsZXJ0KCkuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC8yNy8pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgZ2V0IHRleHQgb2YgYW4gYWxlcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBkcml2ZXIuZWxlbWVudEJ5SWQoXCJBbGVydEJ1dHRvblwiKS5jbGljaygpO1xuICAgICAgKGF3YWl0IGRyaXZlci5hbGVydFRleHQoKSkuc2hvdWxkLmVxdWFsKFwiRmFrZSBBbGVydFwiKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHNldCB0aGUgdGV4dCBvZiBhbiBhbGVydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGRyaXZlci5hbGVydEtleXMoJ2ZvbycpO1xuICAgICAgKGF3YWl0IGRyaXZlci5hbGVydFRleHQoKSkuc2hvdWxkLmVxdWFsKCdmb28nKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG5vdCBkbyBvdGhlciB0aGluZ3Mgd2hpbGUgYW4gYWxlcnQgaXMgdGhlcmUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBkcml2ZXIuZWxlbWVudEJ5SWQoXCJuYXZcIikuY2xpY2soKVxuICAgICAgICAgICAgICAuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC8yNi8pO1xuICAgIH0pO1xuICAgIGl0LnNraXAoJ3Nob3VsZCBhY2NlcHQgYW4gYWxlcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBkcml2ZXJcbiAgICAgICAgLmFjY2VwdEFsZXJ0KClcbiAgICAgICAgLmVsZW1lbnRCeUlkKFwibmF2XCIpXG4gICAgICAgIC5jbGljaygpXG4gICAgICAgIC5ub2RlaWZ5KCk7XG4gICAgfSk7XG4gICAgaXQuc2tpcCgnc2hvdWxkIG5vdCBzZXQgdGhlIHRleHQgb2YgdGhlIHdyb25nIGtpbmQgb2YgYWxlcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBkcml2ZXJcbiAgICAgICAgLmVsZW1lbnRCeUlkKFwiQWxlcnRCdXR0b24yXCIpXG4gICAgICAgIC5jbGljaygpXG4gICAgICAgIC5hbGVydFRleHQoKVxuICAgICAgICAgIC5zaG91bGQuZXZlbnR1YWxseS5iZWNvbWUoJ0Zha2UgQWxlcnQgMicpXG4gICAgICAgIC5hbGVydEtleXMoJ2ZvbycpXG4gICAgICAgICAgLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoLzEyLylcbiAgICAgICAgLm5vZGVpZnkoKTtcbiAgICB9KTtcbiAgICBpdC5za2lwKCdzaG91bGQgZGlzbWlzcyBhbiBhbGVydCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGRyaXZlclxuICAgICAgICAuYWNjZXB0QWxlcnQoKVxuICAgICAgICAuZWxlbWVudEJ5SWQoXCJuYXZcIilcbiAgICAgICAgLmNsaWNrKClcbiAgICAgICAgLm5vZGVpZnkoKTtcbiAgICB9KTtcbiAgfSk7XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgYWxlcnRUZXN0cztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
