require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

require('request-promise');

// not used by this lib but a devDep of basedriver

var _2 = require('../..');

var _helpers = require('./helpers');

_chai2['default'].use(_chaiAsPromised2['default']);

_chai2['default'].should();

describe('FakeDriver', function () {
  it('should not start a session when a unique session is already running', function callee$1$0() {
    var d1, caps1, _ref, _ref2, uniqueSession, d2, otherSessionData;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          d1 = new _2.FakeDriver();
          caps1 = _lodash2['default'].clone(_helpers.DEFAULT_CAPS);

          caps1.uniqueApp = true;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(d1.createSession(caps1, {}));

        case 5:
          _ref = context$2$0.sent;
          _ref2 = _slicedToArray(_ref, 1);
          uniqueSession = _ref2[0];

          uniqueSession.should.be.a('string');
          d2 = new _2.FakeDriver();
          otherSessionData = [d1.driverData];
          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(d2.createSession(_helpers.DEFAULT_CAPS, {}, otherSessionData).should.eventually.be.rejectedWith(/unique/));

        case 13:
          context$2$0.next = 15;
          return _regeneratorRuntime.awrap(d1.deleteSession(uniqueSession));

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should start a new session when another non-unique session is running', function callee$1$0() {
    var d1, _ref3, _ref32, session1Id, d2, otherSessionData, _ref4, _ref42, session2Id;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          d1 = new _2.FakeDriver();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(d1.createSession(_helpers.DEFAULT_CAPS, {}));

        case 3:
          _ref3 = context$2$0.sent;
          _ref32 = _slicedToArray(_ref3, 1);
          session1Id = _ref32[0];

          session1Id.should.be.a('string');
          d2 = new _2.FakeDriver();
          otherSessionData = [d1.driverData];
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(d2.createSession(_helpers.DEFAULT_CAPS, {}, otherSessionData));

        case 11:
          _ref4 = context$2$0.sent;
          _ref42 = _slicedToArray(_ref4, 1);
          session2Id = _ref42[0];

          session2Id.should.be.a('string');
          session1Id.should.not.equal(session2Id);
          context$2$0.next = 18;
          return _regeneratorRuntime.awrap(d1.deleteSession(session1Id));

        case 18:
          context$2$0.next = 20;
          return _regeneratorRuntime.awrap(d2.deleteSession(session2Id));

        case 20:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZHJpdmVyLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFFYyxRQUFROzs7O29CQUNMLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O1FBQ3RDLGlCQUFpQjs7OztpQkFDRyxPQUFPOzt1QkFDTCxXQUFXOztBQUV4QyxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixrQkFBSyxNQUFNLEVBQUUsQ0FBQzs7QUFFZCxRQUFRLENBQUMsWUFBWSxFQUFFLFlBQU07QUFDM0IsSUFBRSxDQUFDLHFFQUFxRSxFQUFFO1FBQ3BFLEVBQUUsRUFDRixLQUFLLGVBRUosYUFBYSxFQUVkLEVBQUUsRUFDRixnQkFBZ0I7Ozs7O0FBTmhCLFlBQUUsR0FBRyxtQkFBZ0I7QUFDckIsZUFBSyxHQUFHLG9CQUFFLEtBQUssdUJBQWM7O0FBQ2pDLGVBQUssQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDOzsyQ0FDSyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUM7Ozs7O0FBQWxELHVCQUFhOztBQUNsQix1QkFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2hDLFlBQUUsR0FBRyxtQkFBZ0I7QUFDckIsMEJBQWdCLEdBQUcsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDOzsyQ0FDaEMsRUFBRSxDQUFDLGFBQWEsd0JBQWUsRUFBRSxFQUFFLGdCQUFnQixDQUFDLENBQ2pELE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7Ozs7MkNBQzlDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDOzs7Ozs7O0dBQ3RDLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyx1RUFBdUUsRUFBRTtRQUN0RSxFQUFFLGlCQUNELFVBQVUsRUFFWCxFQUFFLEVBQ0YsZ0JBQWdCLGlCQUNmLFVBQVU7Ozs7O0FBTFgsWUFBRSxHQUFHLG1CQUFnQjs7MkNBQ0EsRUFBRSxDQUFDLGFBQWEsd0JBQWUsRUFBRSxDQUFDOzs7OztBQUF0RCxvQkFBVTs7QUFDZixvQkFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdCLFlBQUUsR0FBRyxtQkFBZ0I7QUFDckIsMEJBQWdCLEdBQUcsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDOzsyQ0FDYixFQUFFLENBQUMsYUFBYSx3QkFBZSxFQUFFLEVBQUUsZ0JBQWdCLENBQUM7Ozs7O0FBQXhFLG9CQUFVOztBQUNmLG9CQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakMsb0JBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQzs7MkNBQ2xDLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDOzs7OzJDQUM1QixFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQzs7Ozs7OztHQUNuQyxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9kcml2ZXItc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0ICdyZXF1ZXN0LXByb21pc2UnOyAvLyBub3QgdXNlZCBieSB0aGlzIGxpYiBidXQgYSBkZXZEZXAgb2YgYmFzZWRyaXZlclxuaW1wb3J0IHsgRmFrZURyaXZlciB9IGZyb20gJy4uLy4uJztcbmltcG9ydCB7IERFRkFVTFRfQ0FQUyB9IGZyb20gJy4vaGVscGVycyc7XG5cbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuY2hhaS5zaG91bGQoKTtcblxuZGVzY3JpYmUoJ0Zha2VEcml2ZXInLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgbm90IHN0YXJ0IGEgc2Vzc2lvbiB3aGVuIGEgdW5pcXVlIHNlc3Npb24gaXMgYWxyZWFkeSBydW5uaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBkMSA9IG5ldyBGYWtlRHJpdmVyKCk7XG4gICAgbGV0IGNhcHMxID0gXy5jbG9uZShERUZBVUxUX0NBUFMpO1xuICAgIGNhcHMxLnVuaXF1ZUFwcCA9IHRydWU7XG4gICAgbGV0IFt1bmlxdWVTZXNzaW9uXSA9IGF3YWl0IGQxLmNyZWF0ZVNlc3Npb24oY2FwczEsIHt9KTtcbiAgICB1bmlxdWVTZXNzaW9uLnNob3VsZC5iZS5hKCdzdHJpbmcnKTtcbiAgICBsZXQgZDIgPSBuZXcgRmFrZURyaXZlcigpO1xuICAgIGxldCBvdGhlclNlc3Npb25EYXRhID0gW2QxLmRyaXZlckRhdGFdO1xuICAgIGF3YWl0IGQyLmNyZWF0ZVNlc3Npb24oREVGQVVMVF9DQVBTLCB7fSwgb3RoZXJTZXNzaW9uRGF0YSlcbiAgICAgICAgICAgIC5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoL3VuaXF1ZS8pO1xuICAgIGF3YWl0IGQxLmRlbGV0ZVNlc3Npb24odW5pcXVlU2Vzc2lvbik7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHN0YXJ0IGEgbmV3IHNlc3Npb24gd2hlbiBhbm90aGVyIG5vbi11bmlxdWUgc2Vzc2lvbiBpcyBydW5uaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBkMSA9IG5ldyBGYWtlRHJpdmVyKCk7XG4gICAgbGV0IFtzZXNzaW9uMUlkXSA9IGF3YWl0IGQxLmNyZWF0ZVNlc3Npb24oREVGQVVMVF9DQVBTLCB7fSk7XG4gICAgc2Vzc2lvbjFJZC5zaG91bGQuYmUuYSgnc3RyaW5nJyk7XG4gICAgbGV0IGQyID0gbmV3IEZha2VEcml2ZXIoKTtcbiAgICBsZXQgb3RoZXJTZXNzaW9uRGF0YSA9IFtkMS5kcml2ZXJEYXRhXTtcbiAgICBsZXQgW3Nlc3Npb24ySWRdID0gYXdhaXQgZDIuY3JlYXRlU2Vzc2lvbihERUZBVUxUX0NBUFMsIHt9LCBvdGhlclNlc3Npb25EYXRhKTtcbiAgICBzZXNzaW9uMklkLnNob3VsZC5iZS5hKCdzdHJpbmcnKTtcbiAgICBzZXNzaW9uMUlkLnNob3VsZC5ub3QuZXF1YWwoc2Vzc2lvbjJJZCk7XG4gICAgYXdhaXQgZDEuZGVsZXRlU2Vzc2lvbihzZXNzaW9uMUlkKTtcbiAgICBhd2FpdCBkMi5kZWxldGVTZXNzaW9uKHNlc3Npb24ySWQpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
