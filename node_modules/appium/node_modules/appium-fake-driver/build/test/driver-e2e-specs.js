require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _wd = require('wd');

var _wd2 = _interopRequireDefault(_wd);

var _appiumBaseDriverBuildTestBasedriver = require('appium-base-driver/build/test/basedriver');

var _ = require('../..');

var _helpers = require('./helpers');

var _contextTests = require('./context-tests');

var _contextTests2 = _interopRequireDefault(_contextTests);

var _findElementTests = require('./find-element-tests');

var _findElementTests2 = _interopRequireDefault(_findElementTests);

var _elementInteractionTests = require('./element-interaction-tests');

var _elementInteractionTests2 = _interopRequireDefault(_elementInteractionTests);

var _alertTests = require('./alert-tests');

var _alertTests2 = _interopRequireDefault(_alertTests);

var _generalTests = require('./general-tests');

var _generalTests2 = _interopRequireDefault(_generalTests);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);
var shouldStartServer = process.env.USE_RUNNING_SERVER !== "0";

// test the same things as for base driver
(0, _appiumBaseDriverBuildTestBasedriver.baseDriverUnitTests)(_.FakeDriver, _helpers.DEFAULT_CAPS);
(0, _appiumBaseDriverBuildTestBasedriver.baseDriverE2ETests)(_.FakeDriver, _helpers.DEFAULT_CAPS);

describe('FakeDriver - via HTTP', function () {
  var server = null;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!shouldStartServer) {
            context$2$0.next = 4;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _.startServer)(_helpers.TEST_PORT, _helpers.TEST_HOST));

        case 3:
          server = context$2$0.sent;

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (server) {
            server.close();
          }

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  describe('session handling', function () {
    it('should start and stop a session', function callee$2$0() {
      var driver, _ref, _ref2, sessionId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = _wd2['default'].promiseChainRemote(_helpers.TEST_HOST, _helpers.TEST_PORT);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.init(_helpers.DEFAULT_CAPS));

          case 3:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];

            should.exist(sessionId);
            sessionId.should.be.a('string');
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.quit());

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.title().should.eventually.be.rejectedWith(/terminated/));

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('session-based tests', function () {
    (0, _contextTests2['default'])();
    (0, _findElementTests2['default'])();
    (0, _elementInteractionTests2['default'])();
    (0, _alertTests2['default'])();
    (0, _generalTests2['default'])();
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZHJpdmVyLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7b0JBRWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O2tCQUM5QixJQUFJOzs7O21EQUNxQywwQ0FBMEM7O2dCQUMxRCxPQUFPOzt1QkFDSSxXQUFXOzs0QkFDckMsaUJBQWlCOzs7O2dDQUNiLHNCQUFzQjs7Ozt1Q0FDZiw2QkFBNkI7Ozs7MEJBQzFDLGVBQWU7Ozs7NEJBQ2IsaUJBQWlCOzs7O0FBRTFDLElBQU0sTUFBTSxHQUFHLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQzdCLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7QUFDekIsSUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixLQUFLLEdBQUcsQ0FBQzs7O0FBR2pFLGtHQUE2QyxDQUFDO0FBQzlDLGlHQUE0QyxDQUFDOztBQUU3QyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsWUFBTTtBQUN0QyxNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDbEIsUUFBTSxDQUFDOzs7O2VBQ0QsaUJBQWlCOzs7Ozs7MkNBQ0osMERBQWlDOzs7QUFBaEQsZ0JBQU07Ozs7Ozs7R0FFVCxDQUFDLENBQUM7QUFDSCxPQUFLLENBQUM7Ozs7QUFDSixjQUFJLE1BQU0sRUFBRTtBQUNWLGtCQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7V0FDaEI7Ozs7Ozs7R0FDRixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQU07QUFDakMsTUFBRSxDQUFDLGlDQUFpQyxFQUFFO1VBQ2hDLE1BQU0sZUFDTCxTQUFTOzs7OztBQURWLGtCQUFNLEdBQUcsZ0JBQUcsa0JBQWtCLHdDQUFzQjs7NkNBQ2hDLE1BQU0sQ0FBQyxJQUFJLHVCQUFjOzs7OztBQUE1QyxxQkFBUzs7QUFDZCxrQkFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4QixxQkFBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs2Q0FDMUIsTUFBTSxDQUFDLElBQUksRUFBRTs7Ozs2Q0FDYixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQzs7Ozs7OztLQUNyRSxDQUFDLENBQUM7R0FFSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLHFCQUFxQixFQUFFLFlBQU07QUFDcEMsb0NBQWMsQ0FBQztBQUNmLHdDQUFrQixDQUFDO0FBQ25CLCtDQUF5QixDQUFDO0FBQzFCLGtDQUFZLENBQUM7QUFDYixvQ0FBYyxDQUFDO0dBQ2hCLENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2RyaXZlci1lMmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgd2QgZnJvbSAnd2QnO1xuaW1wb3J0IHsgYmFzZURyaXZlckUyRVRlc3RzLCBiYXNlRHJpdmVyVW5pdFRlc3RzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyL2J1aWxkL3Rlc3QvYmFzZWRyaXZlcic7XG5pbXBvcnQgeyBGYWtlRHJpdmVyLCBzdGFydFNlcnZlciB9IGZyb20gJy4uLy4uJztcbmltcG9ydCB7IERFRkFVTFRfQ0FQUywgVEVTVF9IT1NULCBURVNUX1BPUlQgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IGNvbnRleHRUZXN0cyBmcm9tICcuL2NvbnRleHQtdGVzdHMnO1xuaW1wb3J0IGZpbmRFbGVtZW50VGVzdHMgZnJvbSAnLi9maW5kLWVsZW1lbnQtdGVzdHMnO1xuaW1wb3J0IGVsZW1lbnRJbnRlcmFjdGlvblRlc3RzIGZyb20gJy4vZWxlbWVudC1pbnRlcmFjdGlvbi10ZXN0cyc7XG5pbXBvcnQgYWxlcnRUZXN0cyBmcm9tICcuL2FsZXJ0LXRlc3RzJztcbmltcG9ydCBnZW5lcmFsVGVzdHMgZnJvbSAnLi9nZW5lcmFsLXRlc3RzJztcblxuY29uc3Qgc2hvdWxkID0gY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcbmNvbnN0IHNob3VsZFN0YXJ0U2VydmVyID0gcHJvY2Vzcy5lbnYuVVNFX1JVTk5JTkdfU0VSVkVSICE9PSBcIjBcIjtcblxuLy8gdGVzdCB0aGUgc2FtZSB0aGluZ3MgYXMgZm9yIGJhc2UgZHJpdmVyXG5iYXNlRHJpdmVyVW5pdFRlc3RzKEZha2VEcml2ZXIsIERFRkFVTFRfQ0FQUyk7XG5iYXNlRHJpdmVyRTJFVGVzdHMoRmFrZURyaXZlciwgREVGQVVMVF9DQVBTKTtcblxuZGVzY3JpYmUoJ0Zha2VEcml2ZXIgLSB2aWEgSFRUUCcsICgpID0+IHtcbiAgbGV0IHNlcnZlciA9IG51bGw7XG4gIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgaWYgKHNob3VsZFN0YXJ0U2VydmVyKSB7XG4gICAgICBzZXJ2ZXIgPSBhd2FpdCBzdGFydFNlcnZlcihURVNUX1BPUlQsIFRFU1RfSE9TVCk7XG4gICAgfVxuICB9KTtcbiAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgIGlmIChzZXJ2ZXIpIHtcbiAgICAgIHNlcnZlci5jbG9zZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Nlc3Npb24gaGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBzdGFydCBhbmQgc3RvcCBhIHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgZHJpdmVyID0gd2QucHJvbWlzZUNoYWluUmVtb3RlKFRFU1RfSE9TVCwgVEVTVF9QT1JUKTtcbiAgICAgIGxldCBbc2Vzc2lvbklkXSA9IGF3YWl0IGRyaXZlci5pbml0KERFRkFVTFRfQ0FQUyk7XG4gICAgICBzaG91bGQuZXhpc3Qoc2Vzc2lvbklkKTtcbiAgICAgIHNlc3Npb25JZC5zaG91bGQuYmUuYSgnc3RyaW5nJyk7XG4gICAgICBhd2FpdCBkcml2ZXIucXVpdCgpO1xuICAgICAgYXdhaXQgZHJpdmVyLnRpdGxlKCkuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC90ZXJtaW5hdGVkLyk7XG4gICAgfSk7XG5cbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Nlc3Npb24tYmFzZWQgdGVzdHMnLCAoKSA9PiB7XG4gICAgY29udGV4dFRlc3RzKCk7XG4gICAgZmluZEVsZW1lbnRUZXN0cygpO1xuICAgIGVsZW1lbnRJbnRlcmFjdGlvblRlc3RzKCk7XG4gICAgYWxlcnRUZXN0cygpO1xuICAgIGdlbmVyYWxUZXN0cygpO1xuICB9KTtcblxufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
