'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _asyncbox = require('asyncbox');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _plist = require('plist');

var _teen_process = require('teen_process');

var env = process.env;

var XCRUN_TIMEOUT = 15000;
var XCODE_SUBDIR = "/Contents/Developer";
var DEFAULT_NUMBER_OF_RETRIES = 3;

var log = _appiumSupport.logger.getLogger('Xcode');

function hasExpectedSubDir(path) {
  return path.substring(path.length - XCODE_SUBDIR.length) === XCODE_SUBDIR;
}

function runXcrunCommand(args) {
  var timeout = arguments.length <= 1 || arguments[1] === undefined ? XCRUN_TIMEOUT : arguments[1];
  return _regeneratorRuntime.async(function runXcrunCommand$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcrun', args, { timeout: timeout }));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.prev = 6;
        context$1$0.t0 = context$1$0['catch'](0);

        // the true error can be hidden within the stderr
        if (context$1$0.t0.stderr) {
          context$1$0.t0.message = context$1$0.t0.message + ': ' + context$1$0.t0.stderr;
        }

        throw context$1$0.t0;

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 6]]);
}

function getPathFromSymlink(failMessage) {
  var symlinkPath, legacySymlinkPath, xcodePath, customPath, mesg, msg;
  return _regeneratorRuntime.async(function getPathFromSymlink$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // Node's invocation of xcode-select sometimes flakes and returns an empty string.
        // Not clear why. As a workaround, Appium can reliably deduce the version in use by checking
        // the locations xcode-select uses to store the selected version's path. This should be 100%
        // reliable so long as the link locations remain the same. However, since we're relying on
        // hardcoded paths, this approach will break the next time Apple changes the symlink location.
        log.warn('Finding XcodePath by symlink because ' + failMessage);

        symlinkPath = "/var/db/xcode_select_link";
        legacySymlinkPath = "/usr/share/xcode-select/xcode_dir_link";
        xcodePath = null;

        if (!_appiumSupport.util.hasContent(env.DEVELOPER_DIR)) {
          context$1$0.next = 17;
          break;
        }

        customPath = hasExpectedSubDir(env.DEVELOPER_DIR) ? env.DEVELOPER_DIR : env.DEVELOPER_DIR + XCODE_SUBDIR;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(customPath));

      case 8:
        if (!context$1$0.sent) {
          context$1$0.next = 12;
          break;
        }

        xcodePath = customPath;
        context$1$0.next = 15;
        break;

      case 12:
        mesg = 'Could not find path to Xcode, environment variable ' + ('DEVELOPER_DIR set to: ' + env.DEVELOPER_DIR + ' ') + 'but no Xcode found';

        log.warn(mesg);
        throw new Error(mesg);

      case 15:
        context$1$0.next = 31;
        break;

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(symlinkPath));

      case 19:
        if (!context$1$0.sent) {
          context$1$0.next = 25;
          break;
        }

        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readlink(symlinkPath));

      case 22:
        xcodePath = context$1$0.sent;
        context$1$0.next = 31;
        break;

      case 25:
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(legacySymlinkPath));

      case 27:
        if (!context$1$0.sent) {
          context$1$0.next = 31;
          break;
        }

        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readlink(legacySymlinkPath));

      case 30:
        xcodePath = context$1$0.sent;

      case 31:
        if (!xcodePath) {
          context$1$0.next = 33;
          break;
        }

        return context$1$0.abrupt('return', xcodePath.replace(new RegExp("/$"), "").trim());

      case 33:
        msg = 'Could not find path to Xcode by symlinks located in ' + symlinkPath + ', or ' + legacySymlinkPath;

        log.warn(msg);
        throw new Error(msg);

      case 36:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getPathFromXcodeSelect() {
  var timeout = arguments.length <= 0 || arguments[0] === undefined ? XCRUN_TIMEOUT : arguments[0];

  var _ref, stdout, xcodeFolderPath, msg;

  return _regeneratorRuntime.async(function getPathFromXcodeSelect$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcode-select', ['--print-path'], { timeout: timeout }));

      case 2:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        xcodeFolderPath = stdout.replace(/\/$/, '').trim();

        if (!_appiumSupport.util.hasContent(xcodeFolderPath)) {
          log.errorAndThrow('xcode-select returned an empty string');
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(xcodeFolderPath));

      case 8:
        if (!context$1$0.sent) {
          context$1$0.next = 12;
          break;
        }

        return context$1$0.abrupt('return', xcodeFolderPath);

      case 12:
        msg = 'xcode-select could not find xcode. Path \'' + xcodeFolderPath + '\' does not exist.';

        log.errorAndThrow(msg);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

var getPath = _lodash2['default'].memoize(function () {
  var timeout = arguments.length <= 0 || arguments[0] === undefined ? XCRUN_TIMEOUT : arguments[0];

  // first we try using xcode-select to find the path
  // then we try using the symlinks that Apple has by default
  return getPathFromXcodeSelect(timeout)['catch'](getPathFromSymlink);
});

function getVersionWithoutRetry() {
  var timeout = arguments.length <= 0 || arguments[0] === undefined ? XCRUN_TIMEOUT : arguments[0];
  var xcodePath, plistPath, version, versionPattern, match;
  return _regeneratorRuntime.async(function getVersionWithoutRetry$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getPath(timeout));

      case 2:
        xcodePath = context$1$0.sent;
        plistPath = _path2['default'].resolve(xcodePath, "..", "Info.plist");
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(plistPath));

      case 6:
        if (context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        throw new Error('Could not get Xcode version. ' + plistPath + ' does not exist on disk.');

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.plist.parsePlistFile(plistPath));

      case 10:
        version = context$1$0.sent;

        version = version.CFBundleShortVersionString;

        versionPattern = /\d\.\d\.*\d*/;
        match = version.match(versionPattern);

        if (match === null || !_appiumSupport.util.hasContent(match[0])) {
          log.errorAndThrow('Could not parse Xcode version. xcodebuild output was: ' + version);
        }

        return context$1$0.abrupt('return', match[0]);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

var getVersionMemoized = _lodash2['default'].memoize(function () {
  var retries = arguments.length <= 0 || arguments[0] === undefined ? DEFAULT_NUMBER_OF_RETRIES : arguments[0];
  var timeout = arguments.length <= 1 || arguments[1] === undefined ? XCRUN_TIMEOUT : arguments[1];

  return (0, _asyncbox.retry)(retries, getVersionWithoutRetry, timeout);
});

function getVersion() {
  var parse = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
  var retries = arguments.length <= 1 || arguments[1] === undefined ? DEFAULT_NUMBER_OF_RETRIES : arguments[1];
  var timeout = arguments.length <= 2 || arguments[2] === undefined ? XCRUN_TIMEOUT : arguments[2];
  var version, match;
  return _regeneratorRuntime.async(function getVersion$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getVersionMemoized(retries, timeout));

      case 2:
        version = context$1$0.sent;

        if (parse) {
          context$1$0.next = 5;
          break;
        }

        return context$1$0.abrupt('return', version);

      case 5:
        match = /^(\d+)\.(\d+)(\.(\d+))?$/.exec(version);
        return context$1$0.abrupt('return', {
          versionString: version,
          versionFloat: parseFloat(match[1] + '.' + match[2]),
          major: parseInt(match[1], 10),
          minor: parseInt(match[2], 10),
          patch: match[4] ? parseInt(match[4], 10) : undefined
        });

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getCommandLineToolsVersion() {
  var stdout, match;
  return _regeneratorRuntime.async(function getCommandLineToolsVersion$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        stdout = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('pkgutil', ['--pkg-info=com.apple.pkg.CLTools_Executables']));

      case 4:
        stdout = context$1$0.sent.stdout;
        context$1$0.next = 18;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);
        context$1$0.prev = 9;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('pkgutil', ['--pkg-info=com.apple.pkg.DeveloperToolsCLI']));

      case 12:
        stdout = context$1$0.sent.stdout;
        context$1$0.next = 18;
        break;

      case 15:
        context$1$0.prev = 15;
        context$1$0.t1 = context$1$0['catch'](9);

        stdout = '';

      case 18:
        match = /^version: (.+)$/m.exec(stdout);
        return context$1$0.abrupt('return', match ? match[1] : undefined);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7], [9, 15]]);
}

function getAutomationTraceTemplatePathWithoutRetry() {
  var timeout = arguments.length <= 0 || arguments[0] === undefined ? XCRUN_TIMEOUT : arguments[0];
  var xcodePath, extensions, pathPrefix, pathSuffix, automationTraceTemplatePaths, msg;
  return _regeneratorRuntime.async(function getAutomationTraceTemplatePathWithoutRetry$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getPath(timeout));

      case 2:
        xcodePath = context$1$0.sent;
        extensions = ['xrplugin', 'bundle'];
        pathPrefix = _path2['default'].resolve(xcodePath, "../Applications/Instruments.app/Contents/PlugIns");
        pathSuffix = "Contents/Resources/Automation.tracetemplate";
        automationTraceTemplatePaths = [_path2['default'].resolve(pathPrefix, 'AutomationInstrument.' + extensions[0], pathSuffix), _path2['default'].resolve(pathPrefix, 'AutomationInstrument.' + extensions[1], pathSuffix)];
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(automationTraceTemplatePaths[0]));

      case 9:
        if (!context$1$0.sent) {
          context$1$0.next = 11;
          break;
        }

        return context$1$0.abrupt('return', automationTraceTemplatePaths[0]);

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(automationTraceTemplatePaths[1]));

      case 13:
        if (!context$1$0.sent) {
          context$1$0.next = 15;
          break;
        }

        return context$1$0.abrupt('return', automationTraceTemplatePaths[1]);

      case 15:
        msg = "Could not find Automation.tracetemplate in any of the following" + ('locations ' + automationTraceTemplatePaths.toString());

        log.error(msg);
        throw new Error(msg);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

var getAutomationTraceTemplatePath = _lodash2['default'].memoize(function () {
  var retries = arguments.length <= 0 || arguments[0] === undefined ? DEFAULT_NUMBER_OF_RETRIES : arguments[0];
  var timeout = arguments.length <= 1 || arguments[1] === undefined ? XCRUN_TIMEOUT : arguments[1];

  return (0, _asyncbox.retry)(retries, getAutomationTraceTemplatePathWithoutRetry, timeout);
});

function getMaxIOSSDKWithoutRetry() {
  var timeout = arguments.length <= 0 || arguments[0] === undefined ? XCRUN_TIMEOUT : arguments[0];

  var version, args, _ref2, stdout, sdkVersion, match;

  return _regeneratorRuntime.async(function getMaxIOSSDKWithoutRetry$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getVersion(false, DEFAULT_NUMBER_OF_RETRIES, timeout));

      case 2:
        version = context$1$0.sent;

        if (!(version[0] === '4')) {
          context$1$0.next = 5;
          break;
        }

        return context$1$0.abrupt('return', '6.1');

      case 5:
        args = ['--sdk', 'iphonesimulator', '--show-sdk-version'];
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(runXcrunCommand(args, timeout));

      case 8:
        _ref2 = context$1$0.sent;
        stdout = _ref2.stdout;
        sdkVersion = stdout.trim();
        match = /\d.\d/.exec(stdout);

        if (match) {
          context$1$0.next = 14;
          break;
        }

        throw new Error('xcrun returned a non-numeric iOS SDK version: \'' + sdkVersion + '\'');

      case 14:
        return context$1$0.abrupt('return', sdkVersion);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

var getMaxIOSSDK = _lodash2['default'].memoize(function () {
  var retries = arguments.length <= 0 || arguments[0] === undefined ? DEFAULT_NUMBER_OF_RETRIES : arguments[0];
  var timeout = arguments.length <= 1 || arguments[1] === undefined ? XCRUN_TIMEOUT : arguments[1];

  return (0, _asyncbox.retry)(retries, getMaxIOSSDKWithoutRetry, timeout);
});

function getConnectedDevices() {
  var timeout = arguments.length <= 0 || arguments[0] === undefined ? XCRUN_TIMEOUT : arguments[0];

  var cmd, args, _ref3, stdout, plistContent, devicesFound, entriesToSearch, currentEntry, deviceInfo;

  return _regeneratorRuntime.async(function getConnectedDevices$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        cmd = '/usr/sbin/system_profiler';
        args = ['-xml', 'SPUSBDataType'];
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(cmd, args, { timeout: timeout }));

      case 4:
        _ref3 = context$1$0.sent;
        stdout = _ref3.stdout;
        plistContent = (0, _plist.parse)(stdout);
        devicesFound = [];
        entriesToSearch = [plistContent[0]];

        while (entriesToSearch.length > 0) {
          currentEntry = entriesToSearch.pop();

          if (currentEntry instanceof Array) {
            entriesToSearch = entriesToSearch.concat(currentEntry);
          } else if (currentEntry._name && currentEntry._name.substring(0, 4) === "iPad" || currentEntry._name && currentEntry._name.substring(0, 6) === "iPhone") {
            deviceInfo = {
              name: currentEntry._name,
              udid: currentEntry.serial_num,
              productId: currentEntry.product_id,
              deviceVersion: currentEntry.bcd_device
            };

            devicesFound.push(deviceInfo);
          } else if (currentEntry._items) {
            entriesToSearch = entriesToSearch.concat(currentEntry._items);
          }
        }
        return context$1$0.abrupt('return', devicesFound);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getInstrumentsPathWithoutRetry() {
  var timeout = arguments.length <= 0 || arguments[0] === undefined ? XCRUN_TIMEOUT : arguments[0];

  var args, _ref4, stdout, instrumentsPath;

  return _regeneratorRuntime.async(function getInstrumentsPathWithoutRetry$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        args = ['-find', 'instruments'];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(runXcrunCommand(args, timeout));

      case 3:
        _ref4 = context$1$0.sent;
        stdout = _ref4.stdout;

        if (!stdout) {
          stdout = "";
        }

        instrumentsPath = stdout.trim();

        if (instrumentsPath) {
          context$1$0.next = 9;
          break;
        }

        throw new Error('Could not find path to instruments binary using \'xcrun ' + args.join(' ') + '\'');

      case 9:
        return context$1$0.abrupt('return', instrumentsPath);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

var getInstrumentsPath = _lodash2['default'].memoize(function () {
  var retries = arguments.length <= 0 || arguments[0] === undefined ? DEFAULT_NUMBER_OF_RETRIES : arguments[0];
  var timeout = arguments.length <= 1 || arguments[1] === undefined ? XCRUN_TIMEOUT : arguments[1];

  return (0, _asyncbox.retry)(retries, getInstrumentsPathWithoutRetry, timeout);
});

function clearInternalCache() {

  // memoized functions
  var memoized = [getPath, getVersionMemoized, getAutomationTraceTemplatePath, getMaxIOSSDK, getInstrumentsPath];

  memoized.forEach(function (f) {
    if (f.cache) {
      f.cache = new _lodash2['default'].memoize.Cache();
    }
  });
}

exports['default'] = { getPath: getPath, getVersion: getVersion, getAutomationTraceTemplatePath: getAutomationTraceTemplatePath, getMaxIOSSDK: getMaxIOSSDK,
  getAutomationTraceTemplatePathWithoutRetry: getAutomationTraceTemplatePathWithoutRetry, getMaxIOSSDKWithoutRetry: getMaxIOSSDKWithoutRetry,
  getConnectedDevices: getConnectedDevices, clearInternalCache: clearInternalCache, getInstrumentsPath: getInstrumentsPath,
  getCommandLineToolsVersion: getCommandLineToolsVersion };
module.exports = exports['default'];
//  Xcode < 5.x

// xcode-select allows users to override its settings with the DEVELOPER_DIR env var,
// so check that first

// We should only get here is we failed to capture xcode-select's stdout and our
// other checks failed. Either Apple has moved the symlink to a new location or the user
// is not using the default install. 99.999% chance it's the latter, so issue a warning
// should we ever hit the edge case.

// trim and remove trailing slash

// we want to read the CFBundleShortVersionString from Xcode's plist.
// It should be in /[root]/XCode.app/Contents/

// need to use string#match here; previous code used regexp#exec, which does not return null

// match should be an array, either of
//     [ '7.0', '7', '0', undefined, undefined, index: 0, input: '7.0' ]
//     [ '7.0.1', '7', '0', '.1', '1', index: 0, input: '7.0.1' ]

// stdout should have a line like `version: 8.0.0.0.1.1472435881`
// https://regex101.com/r/HV3x4d/1

// for ios 8 and up, the file extension for AutiomationInstrument changed.
// rather than waste time getting the iOSSDKVersion, just get both paths and see which one exists
//# sourceMappingURL=data:application/json;charset=utf8;base64,
