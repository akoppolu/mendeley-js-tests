'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _asyncbox = require('asyncbox');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _mjsonwp = require('../../mjsonwp');

var commands = {},
    helpers = {},
    extensions = {};

var MIN_TIMEOUT = 0;

commands.timeouts = function callee$0$0(type, duration) {
  var ms;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        ms = this.parseTimeoutArgument(duration);
        context$1$0.t0 = type;
        context$1$0.next = context$1$0.t0 === 'command' ? 4 : context$1$0.t0 === 'implicit' ? 6 : 8;
        break;

      case 4:
        this.setNewCommandTimeout(ms);
        return context$1$0.abrupt('break', 9);

      case 6:
        this.setImplicitWait(ms);
        return context$1$0.abrupt('break', 9);

      case 8:
        throw new Error('Invalid timeout \'' + type + '\'');

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.implicitWait = function callee$0$0(ms) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.setImplicitWait(this.parseTimeoutArgument(ms));

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.setImplicitWait = function (ms) {
  this.implicitWaitMs = ms;
  _logger2['default'].debug('Set implicit wait to ' + ms + 'ms');
  if (this.managedDrivers && this.managedDrivers.length) {
    _logger2['default'].debug('Setting implicit wait on managed drivers');
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(this.managedDrivers), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var driver = _step.value;

        if (_lodash2['default'].isFunction(driver.setImplicitWait)) {
          driver.setImplicitWait(ms);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
};

helpers.setNewCommandTimeout = function (ms) {
  this.newCommandTimeoutMs = ms;
  _logger2['default'].debug('Set new command timeout to ' + ms + 'ms');
  if (this.managedDrivers && this.managedDrivers.length) {
    _logger2['default'].debug('Setting new command timeout on managed drivers');
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _getIterator(this.managedDrivers), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var driver = _step2.value;

        if (_lodash2['default'].isFunction(driver.setNewCommandTimeout)) {
          driver.setNewCommandTimeout(ms);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }
};

helpers.clearNewCommandTimeout = function () {
  if (this.noCommandTimer) {
    this.noCommandTimer.cancel();
    this.noCommandTimer = null;
  }
};

helpers.startNewCommandTimeout = function () {
  var _this = this;

  // make sure there are no rogue timeouts
  this.clearNewCommandTimeout();

  // if command timeout is 0, it is disabled
  if (!this.newCommandTimeoutMs) return;

  this.noCommandTimer = _appiumSupport.util.cancellableDelay(this.newCommandTimeoutMs);
  this.noCommandTimer.then(function callee$1$0() {
    var errorMessage;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          _logger2['default'].warn('Shutting down because we waited ' + (this.newCommandTimeoutMs / 1000 + ' seconds for a command'));
          errorMessage = 'New Command Timeout of ' + (this.newCommandTimeoutMs / 1000 + ' seconds ') + 'expired. Try customizing the timeout using the ' + '\'newCommandTimeout\' desired capability';
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.startUnexpectedShutdown(new Error(errorMessage)));

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  })['catch'](_bluebird2['default'].CancellationError, function () /*err*/{
    // ignore
  });
};

helpers.implicitWaitForCondition = function callee$0$0(condFn) {
  var wrappedCondFn;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Waiting up to ' + this.implicitWaitMs + ' ms for condition');

        wrappedCondFn = (function callee$1$0() {
          var args$2$0 = arguments;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                // reset command timeout
                this.clearNewCommandTimeout();

                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(condFn.apply(undefined, args$2$0));

              case 3:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 4:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        }).bind(this);

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(wrappedCondFn, {
          waitMs: this.implicitWaitMs, intervalMs: 500, logger: _logger2['default']
        }));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.parseTimeoutArgument = function (ms) {
  var duration = parseInt(ms, 10);
  if (_lodash2['default'].isNaN(duration) || duration < MIN_TIMEOUT) {
    throw new _mjsonwp.errors.UnknownError('Invalid timeout value \'' + ms + '\'');
  }
  return duration;
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
// TODO: fix jshint and use an arrow function
//# sourceMappingURL=data:application/json;charset=utf8;base64,
