'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _serveFavicon = require('serve-favicon');

var _serveFavicon2 = _interopRequireDefault(_serveFavicon);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _methodOverride = require('method-override');

var _methodOverride2 = _interopRequireDefault(_methodOverride);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _expressLogging = require('./express-logging');

var _middleware = require('./middleware');

var _static = require('./static');

var _crash = require('./crash');

function server(configureRoutes, port) {
  var hostname = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
  var app, httpServer, close;
  return _regeneratorRuntime.async(function server$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        app = (0, _express2['default'])();
        httpServer = _http2['default'].createServer(app);
        close = httpServer.close.bind(httpServer);

        httpServer.close = function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {
                  httpServer.on('close', resolve);
                  close(function (err) {
                    if (err) reject(err);
                  });
                }));

              case 2:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {
          httpServer.on('error', function (err) {
            if (err.code === 'EADDRNOTAVAIL') {
              _logger2['default'].error('Could not start REST http interface listener. ' + 'Requested address is not available.');
            } else {
              _logger2['default'].error('Could not start REST http interface listener. The requested ' + 'port may already be in use. Please make sure there is no ' + 'other instance of this server running already.');
            }
            reject(err);
          });
          httpServer.on('connection', function (socket) {
            socket.setTimeout(600 * 1000); // 10 minute timeout
          });
          configureServer(app, configureRoutes);

          var serverArgs = [port];
          if (hostname) {
            // If the hostname is omitted, the server will accept
            // connections on any IP address
            serverArgs.push(hostname);
          }
          httpServer.listen.apply(httpServer, serverArgs.concat([function (err) {
            if (err) {
              reject(err);
            }
            resolve(httpServer);
          }]));
        }));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function configureServer(app, configureRoutes) {
  app.use(_expressLogging.endLogFormatter);

  // set up static assets
  app.use((0, _serveFavicon2['default'])(_path2['default'].resolve(_static.STATIC_DIR, 'favicon.ico')));
  app.use(_express2['default']['static'](_static.STATIC_DIR));

  // crash routes, for testing
  app.use('/wd/hub/produce_error', _crash.produceError);
  app.use('/wd/hub/crash', _crash.produceCrash);

  // add middlewares
  app.use(_middleware.allowCrossDomain);
  app.use(_middleware.fixPythonContentType);
  app.use(_middleware.defaultToJSONContentType);
  app.use(_bodyParser2['default'].urlencoded({ extended: true }));
  app.use((0, _methodOverride2['default'])());
  app.use(_middleware.catch4XXHandler);
  app.use(_middleware.catchAllHandler);

  // make sure appium never fails because of a file size upload limit
  app.use(_bodyParser2['default'].json({ limit: '1gb' }));

  // set up start logging (which depends on bodyParser doing its thing)
  app.use(_expressLogging.startLogFormatter);

  configureRoutes(app);

  // dynamic routes for testing, etc.
  app.all('/welcome', _static.welcome);
  app.all('/test/guinea-pig', _static.guineaPig);
  app.all('/test/guinea-pig-scrollable', _static.guineaPigScrollable);

  // catch this last, so anything that falls through is 404ed
  app.use(_middleware.catch404Handler);
}

exports.server = server;
exports.configureServer = configureServer;

// create the actual http server

// http.Server.close() only stops new connections, but we need to wait until
// all connections are closed and the `close` event is emitted
//# sourceMappingURL=data:application/json;charset=utf8;base64,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LEtBQUcsQ0FBQyxHQUFHLGtDQUFzQixDQUFDO0FBQzlCLEtBQUcsQ0FBQyxHQUFHLHNDQUEwQixDQUFDO0FBQ2xDLEtBQUcsQ0FBQyxHQUFHLENBQUMsd0JBQVcsVUFBVSxDQUFDLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztBQUNqRCxLQUFHLENBQUMsR0FBRyxDQUFDLGtDQUFnQixDQUFDLENBQUM7QUFDMUIsS0FBRyxDQUFDLEdBQUcsNkJBQWlCLENBQUM7QUFDekIsS0FBRyxDQUFDLEdBQUcsNkJBQWlCLENBQUM7OztBQUd6QixLQUFHLENBQUMsR0FBRyxDQUFDLHdCQUFXLElBQUksQ0FBQyxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUM7OztBQUd6QyxLQUFHLENBQUMsR0FBRyxtQ0FBbUIsQ0FBQzs7QUFFM0IsaUJBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7O0FBR3JCLEtBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxrQkFBVSxDQUFDO0FBQzdCLEtBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLG9CQUFZLENBQUM7QUFDdkMsS0FBRyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsOEJBQXNCLENBQUM7OztBQUc1RCxLQUFHLENBQUMsR0FBRyw2QkFBaUIsQ0FBQztDQUMxQjs7UUFFUSxNQUFNLEdBQU4sTUFBTTtRQUFFLGVBQWUsR0FBZixlQUFlIiwiZmlsZSI6ImxpYi9leHByZXNzL3NlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgaHR0cCBmcm9tICdodHRwJztcbmltcG9ydCBmYXZpY29uIGZyb20gJ3NlcnZlLWZhdmljb24nO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0IG1ldGhvZE92ZXJyaWRlIGZyb20gJ21ldGhvZC1vdmVycmlkZSc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IHN0YXJ0TG9nRm9ybWF0dGVyLCBlbmRMb2dGb3JtYXR0ZXIgfSBmcm9tICcuL2V4cHJlc3MtbG9nZ2luZyc7XG5pbXBvcnQgeyBhbGxvd0Nyb3NzRG9tYWluLCBmaXhQeXRob25Db250ZW50VHlwZSwgZGVmYXVsdFRvSlNPTkNvbnRlbnRUeXBlLFxuICAgICAgICAgY2F0Y2hBbGxIYW5kbGVyLCBjYXRjaDQwNEhhbmRsZXIsIGNhdGNoNFhYSGFuZGxlciB9IGZyb20gJy4vbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBndWluZWFQaWcsIGd1aW5lYVBpZ1Njcm9sbGFibGUsIHdlbGNvbWUsIFNUQVRJQ19ESVIgfSBmcm9tICcuL3N0YXRpYyc7XG5pbXBvcnQgeyBwcm9kdWNlRXJyb3IsIHByb2R1Y2VDcmFzaCB9IGZyb20gJy4vY3Jhc2gnO1xuXG5cbmFzeW5jIGZ1bmN0aW9uIHNlcnZlciAoY29uZmlndXJlUm91dGVzLCBwb3J0LCBob3N0bmFtZSA9IG51bGwpIHtcbiAgLy8gY3JlYXRlIHRoZSBhY3R1YWwgaHR0cCBzZXJ2ZXJcbiAgbGV0IGFwcCA9IGV4cHJlc3MoKTtcbiAgbGV0IGh0dHBTZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihhcHApO1xuXG4gIC8vIGh0dHAuU2VydmVyLmNsb3NlKCkgb25seSBzdG9wcyBuZXcgY29ubmVjdGlvbnMsIGJ1dCB3ZSBuZWVkIHRvIHdhaXQgdW50aWxcbiAgLy8gYWxsIGNvbm5lY3Rpb25zIGFyZSBjbG9zZWQgYW5kIHRoZSBgY2xvc2VgIGV2ZW50IGlzIGVtaXR0ZWRcbiAgbGV0IGNsb3NlID0gaHR0cFNlcnZlci5jbG9zZS5iaW5kKGh0dHBTZXJ2ZXIpO1xuICBodHRwU2VydmVyLmNsb3NlID0gYXN5bmMgKCkgPT4ge1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBodHRwU2VydmVyLm9uKCdjbG9zZScsIHJlc29sdmUpO1xuICAgICAgY2xvc2UoKGVycikgPT4ge1xuICAgICAgICBpZiAoZXJyKSByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaHR0cFNlcnZlci5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyLmNvZGUgPT09ICdFQUREUk5PVEFWQUlMJykge1xuICAgICAgICBsb2cuZXJyb3IoJ0NvdWxkIG5vdCBzdGFydCBSRVNUIGh0dHAgaW50ZXJmYWNlIGxpc3RlbmVyLiAnICtcbiAgICAgICAgICAgICAgICAgICdSZXF1ZXN0ZWQgYWRkcmVzcyBpcyBub3QgYXZhaWxhYmxlLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmVycm9yKCdDb3VsZCBub3Qgc3RhcnQgUkVTVCBodHRwIGludGVyZmFjZSBsaXN0ZW5lci4gVGhlIHJlcXVlc3RlZCAnICtcbiAgICAgICAgICAgICAgICAgICdwb3J0IG1heSBhbHJlYWR5IGJlIGluIHVzZS4gUGxlYXNlIG1ha2Ugc3VyZSB0aGVyZSBpcyBubyAnICtcbiAgICAgICAgICAgICAgICAgICdvdGhlciBpbnN0YW5jZSBvZiB0aGlzIHNlcnZlciBydW5uaW5nIGFscmVhZHkuJyk7XG4gICAgICB9XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9KTtcbiAgICBodHRwU2VydmVyLm9uKCdjb25uZWN0aW9uJywgKHNvY2tldCkgPT4ge1xuICAgICAgc29ja2V0LnNldFRpbWVvdXQoNjAwICogMTAwMCk7IC8vIDEwIG1pbnV0ZSB0aW1lb3V0XG4gICAgfSk7XG4gICAgY29uZmlndXJlU2VydmVyKGFwcCwgY29uZmlndXJlUm91dGVzKTtcblxuICAgIGxldCBzZXJ2ZXJBcmdzID0gW3BvcnRdO1xuICAgIGlmIChob3N0bmFtZSkge1xuICAgICAgLy8gSWYgdGhlIGhvc3RuYW1lIGlzIG9taXR0ZWQsIHRoZSBzZXJ2ZXIgd2lsbCBhY2NlcHRcbiAgICAgIC8vIGNvbm5lY3Rpb25zIG9uIGFueSBJUCBhZGRyZXNzXG4gICAgICBzZXJ2ZXJBcmdzLnB1c2goaG9zdG5hbWUpO1xuICAgIH1cbiAgICBodHRwU2VydmVyLmxpc3RlbiguLi5zZXJ2ZXJBcmdzLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShodHRwU2VydmVyKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZVNlcnZlciAoYXBwLCBjb25maWd1cmVSb3V0ZXMpIHtcbiAgYXBwLnVzZShlbmRMb2dGb3JtYXR0ZXIpO1xuXG4gIC8vIHNldCB1cCBzdGF0aWMgYXNzZXRzXG4gIGFwcC51c2UoZmF2aWNvbihwYXRoLnJlc29sdmUoU1RBVElDX0RJUiwgJ2Zhdmljb24uaWNvJykpKTtcbiAgYXBwLnVzZShleHByZXNzLnN0YXRpYyhTVEFUSUNfRElSKSk7XG5cbiAgLy8gY3Jhc2ggcm91dGVzLCBmb3IgdGVzdGluZ1xuICBhcHAudXNlKCcvd2QvaHViL3Byb2R1Y2VfZXJyb3InLCBwcm9kdWNlRXJyb3IpO1xuICBhcHAudXNlKCcvd2QvaHViL2NyYXNoJywgcHJvZHVjZUNyYXNoKTtcblxuICAvLyBhZGQgbWlkZGxld2FyZXNcbiAgYXBwLnVzZShhbGxvd0Nyb3NzRG9tYWluKTtcbiAgYXBwLnVzZShmaXhQeXRob25Db250ZW50VHlwZSk7XG4gIGFwcC51c2UoZGVmYXVsdFRvSlNPTkNvbnRlbnRUeXBlKTtcbiAgYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoe2V4dGVuZGVkOiB0cnVlfSkpO1xuICBhcHAudXNlKG1ldGhvZE92ZXJyaWRlKCkpO1xuICBhcHAudXNlKGNhdGNoNFhYSGFuZGxlcik7XG4gIGFwcC51c2UoY2F0Y2hBbGxIYW5kbGVyKTtcblxuICAvLyBtYWtlIHN1cmUgYXBwaXVtIG5ldmVyIGZhaWxzIGJlY2F1c2Ugb2YgYSBmaWxlIHNpemUgdXBsb2FkIGxpbWl0XG4gIGFwcC51c2UoYm9keVBhcnNlci5qc29uKHtsaW1pdDogJzFnYid9KSk7XG5cbiAgLy8gc2V0IHVwIHN0YXJ0IGxvZ2dpbmcgKHdoaWNoIGRlcGVuZHMgb24gYm9keVBhcnNlciBkb2luZyBpdHMgdGhpbmcpXG4gIGFwcC51c2Uoc3RhcnRMb2dGb3JtYXR0ZXIpO1xuXG4gIGNvbmZpZ3VyZVJvdXRlcyhhcHApO1xuXG4gIC8vIGR5bmFtaWMgcm91dGVzIGZvciB0ZXN0aW5nLCBldGMuXG4gIGFwcC5hbGwoJy93ZWxjb21lJywgd2VsY29tZSk7XG4gIGFwcC5hbGwoJy90ZXN0L2d1aW5lYS1waWcnLCBndWluZWFQaWcpO1xuICBhcHAuYWxsKCcvdGVzdC9ndWluZWEtcGlnLXNjcm9sbGFibGUnLCBndWluZWFQaWdTY3JvbGxhYmxlKTtcblxuICAvLyBjYXRjaCB0aGlzIGxhc3QsIHNvIGFueXRoaW5nIHRoYXQgZmFsbHMgdGhyb3VnaCBpcyA0MDRlZFxuICBhcHAudXNlKGNhdGNoNDA0SGFuZGxlcik7XG59XG5cbmV4cG9ydCB7IHNlcnZlciwgY29uZmlndXJlU2VydmVyIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
