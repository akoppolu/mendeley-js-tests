'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _libBasedriverCapabilities = require('../../lib/basedriver/capabilities');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

_chai2['default'].use(_chaiAsPromised2['default']);

describe('caps', function () {

  // Tests based on: https://www.w3.org/TR/webdriver/#dfn-validate-caps
  describe('#validateCaps', function () {
    it('returns invalid argument error if "capability" is not a JSON object (1)', function () {
      var _arr = [undefined, null, 1, true, 'string'];

      var _loop = function () {
        var arg = _arr[_i];
        (function () {
          (0, _libBasedriverCapabilities.validateCaps)(arg);
        }).should['throw'](/must be a JSON object/); // jshint ignore:line
      };

      for (var _i = 0; _i < _arr.length; _i++) {
        _loop();
      }
    });

    it('returns result {} by default if caps is empty object and no constraints provided (2)', function () {
      (0, _libBasedriverCapabilities.validateCaps)({}).should.deep.equal({});
    });

    describe('throws errors if constraints are not met', function () {
      it('returns invalid argument error if "present" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({}, { foo: { presence: true } });
        }).should['throw'](/foo can't be blank/);
      });

      it('returns the capability that was passed in if "skipPresenceConstraint" is false', function () {
        (0, _libBasedriverCapabilities.validateCaps)({}, { foo: { presence: true } }, true).should.deep.equal({});
      });

      it('returns invalid argument error if "isString" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({ foo: 1 }, { foo: { isString: true } });
        }).should['throw'](/foo must be of type string/);
      });

      it('returns invalid argument error if "isNumber" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({ foo: 'bar' }, { foo: { isNumber: true } });
        }).should['throw'](/foo must be of type number/);
      });

      it('returns invalid argument error if "isBoolean" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({ foo: 'bar' }, { foo: { isBoolean: true } });
        }).should['throw'](/foo must be of type boolean/);
      });

      it('returns invalid argument error if "inclusion" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({ foo: '3' }, { foo: { inclusionCaseInsensitive: ['1', '2'] } });
        }).should['throw'](/foo 3 not part of 1,2./);
      });

      it('returns invalid argument error if "inclusionCaseInsensitive" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({ foo: 'a' }, { foo: { inclusion: ['A', 'B', 'C'] } });
        }).should['throw'](/foo a is not included in the list/);
      });
    });

    it('should not throw errors if constraints are met', function () {
      var caps = {
        number: 1,
        string: 'string',
        present: 'present',
        extra: 'extra'
      };

      var constraints = {
        number: { isNumber: true },
        string: { isString: true },
        present: { presence: true },
        notPresent: { presence: false }
      };

      (0, _libBasedriverCapabilities.validateCaps)(caps, constraints).should.deep.equal(caps);
    });
  });

  // Tests based on: https://www.w3.org/TR/webdriver/#dfn-merging-caps
  describe('#mergeCaps', function () {
    it('returns a result that is {} by default (1)', function () {
      (0, _libBasedriverCapabilities.mergeCaps)().should.deep.equal({});
    });

    it('returns a result that matches primary by default (2, 3)', function () {
      (0, _libBasedriverCapabilities.mergeCaps)({ hello: 'world' }).should.deep.equal({ hello: 'world' });
    });

    it('returns invalid argument error if primary and secondary have matching properties (4)', function () {
      (function () {
        return (0, _libBasedriverCapabilities.mergeCaps)({ hello: 'world' }, { hello: 'whirl' });
      }).should['throw'](/property hello should not exist on both primary and secondary/);
    });

    it('returns a result with keys from primary and secondary together', function () {
      var primary = {
        a: 'a',
        b: 'b'
      };
      var secondary = {
        c: 'c',
        d: 'd'
      };
      (0, _libBasedriverCapabilities.mergeCaps)(primary, secondary).should.deep.equal({
        a: 'a', b: 'b', c: 'c', d: 'd'
      });
    });
  });

  // Tests based on: https://www.w3.org/TR/webdriver/#dfn-matching-caps
  describe('#matchCaps', function () {
    // TODO: Do we need this?
  });

  // Tests based on: https://www.w3.org/TR/webdriver/#processing-caps
  describe('#parseCaps', function () {
    var caps = undefined;

    beforeEach(function () {
      caps = {};
    });

    it('should return invalid argument if no caps object provided', function () {
      (function () {
        return (0, _libBasedriverCapabilities.parseCaps)();
      }).should['throw'](/must be a JSON object/);
    });

    it('sets "requiredCaps" to property named "alwaysMatch" (2)', function () {
      caps.alwaysMatch = { hello: 'world' };
      (0, _libBasedriverCapabilities.parseCaps)(caps).requiredCaps.should.deep.equal(caps.alwaysMatch);
    });

    it('sets "requiredCaps" to empty JSON object if "alwaysMatch" is not an object (2.1)', function () {
      (0, _libBasedriverCapabilities.parseCaps)(caps).requiredCaps.should.deep.equal({});
    });

    it('returns invalid argument error if "requiredCaps" don\'t match "constraints" (2.2)', function () {
      caps.alwaysMatch = { foo: 1 };
      (function () {
        return (0, _libBasedriverCapabilities.parseCaps)(caps, { foo: { isString: true } });
      }).should['throw'](/foo must be of type string/);
    });

    it('sets "allFirstMatchCaps" to property named "firstMatch" (3)', function () {
      (0, _libBasedriverCapabilities.parseCaps)({}, []).allFirstMatchCaps.should.deep.equal([]);
    });

    it('sets "allFirstMatchCaps" to [] if "firstMatch" is undefined (3.1)', function () {
      (0, _libBasedriverCapabilities.parseCaps)({}).allFirstMatchCaps.should.deep.equal([]);
    });

    it('returns invalid argument error if "firstMatch" is not an array and is not undefined (3.2)', function () {
      var _arr2 = [null, 1, true, 'string'];

      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
        var arg = _arr2[_i2];
        caps.firstMatch = arg;
        (function () {
          (0, _libBasedriverCapabilities.parseCaps)(caps);
        }).should['throw'](/must be a JSON array or undefined/); // jshint ignore:line
      }
    });

    it('has "validatedFirstMatchCaps" property that is [] by default (4)', function () {
      (0, _libBasedriverCapabilities.parseCaps)(caps).validatedFirstMatchCaps.should.deep.equal([]);
    });

    describe('returns a "validatedFirstMatchCaps" array (5)', function () {
      it('that equals "firstMatch" if firstMatch is one empty object and there are no constraints', function () {
        caps.firstMatch = [{}];
        (0, _libBasedriverCapabilities.parseCaps)(caps).validatedFirstMatchCaps.should.deep.equal(caps.firstMatch);
      });

      it('returns invalid argument error if firstMatch array\'s first argument fails constraints', function () {
        caps.firstMatch = [{}];
        (function () {
          return (0, _libBasedriverCapabilities.parseCaps)(caps, { foo: { presence: true } });
        }).should['throw'](/foo can't be blank/);
      });

      it('that equals firstMatch if firstMatch contains two objects that pass the provided constraints', function () {
        caps.alwaysMatch = {
          foo: 'bar'
        };
        caps.firstMatch = [{ foo: 'bar1' }, { foo: 'bar2' }];

        var constraints = {
          foo: {
            presence: true,
            isString: true
          }
        };

        (0, _libBasedriverCapabilities.parseCaps)(caps, constraints).validatedFirstMatchCaps.should.deep.equal(caps.firstMatch);
      });

      it('returns invalid argument error if the firstMatch[2] is not an object', function () {
        caps.firstMatch = [{ foo: 'bar' }, 'foo'];
        (function () {
          return (0, _libBasedriverCapabilities.parseCaps)(caps, {});
        }).should['throw'](/must be a JSON object/);
      });
    });

    describe('returns a matchedCaps object (6)', function () {
      beforeEach(function () {
        caps.alwaysMatch = { hello: 'world' };
      });

      it('which is same as alwaysMatch if firstMatch array is not provided', function () {
        (0, _libBasedriverCapabilities.parseCaps)(caps).matchedCaps.should.deep.equal({ hello: 'world' });
      });

      it('merges caps together', function () {
        caps.firstMatch = [{ foo: 'bar' }];
        (0, _libBasedriverCapabilities.parseCaps)(caps).matchedCaps.should.deep.equal({ hello: 'world', foo: 'bar' });
      });

      it('with merged caps', function () {
        caps.firstMatch = [{ hello: 'bar', foo: 'foo' }, { foo: 'bar' }];
        (0, _libBasedriverCapabilities.parseCaps)(caps).matchedCaps.should.deep.equal({ hello: 'world', foo: 'bar' });
      });
    });
  });

  describe('#processCaps', function () {
    it('should return "alwaysMatch" if "firstMatch" and "constraints" were not provided', function () {
      (0, _libBasedriverCapabilities.processCaps)({}).should.deep.equal({});
    });

    it('should return merged caps', function () {
      (0, _libBasedriverCapabilities.processCaps)({
        alwaysMatch: { hello: 'world' },
        firstMatch: [{ foo: 'bar' }]
      }).should.deep.equal({ hello: 'world', foo: 'bar' });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci9jYXBhYmlsaXRpZXMtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozt5Q0FBZ0UsbUNBQW1DOztvQkFDbEYsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7QUFFN0Msa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsUUFBUSxDQUFDLE1BQU0sRUFBRSxZQUFNOzs7QUFHckIsVUFBUSxDQUFDLGVBQWUsRUFBRSxZQUFNO0FBQzlCLE1BQUUsQ0FBQyx5RUFBeUUsRUFBRSxZQUFNO2lCQUNsRSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUM7OztBQUEvQyxZQUFJLEdBQUcsV0FBQSxDQUFBO0FBQ1YsU0FBQyxZQUFZO0FBQUUsdURBQWEsR0FBRyxDQUFDLENBQUM7U0FBRSxDQUFBLENBQUUsTUFBTSxTQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQzs7O0FBRDdFLCtDQUFzRDs7T0FFckQ7S0FDRixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLHNGQUFzRixFQUFFLFlBQU07QUFDL0YsbURBQWEsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDeEMsQ0FBQyxDQUFDOztBQUVILFlBQVEsQ0FBQywwQ0FBMEMsRUFBRSxZQUFNO0FBQ3pELFFBQUUsQ0FBQyw0RUFBNEUsRUFBRSxZQUFNO0FBQ3JGLFNBQUM7aUJBQU0sNkNBQWEsRUFBRSxFQUFFLEVBQUMsR0FBRyxFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxFQUFDLENBQUM7VUFBQSxDQUFFLE1BQU0sU0FBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7T0FDdEYsQ0FBQyxDQUFDOztBQUVILFFBQUUsQ0FBQyxnRkFBZ0YsRUFBRSxZQUFNO0FBQ3pGLHFEQUFhLEVBQUUsRUFBRSxFQUFDLEdBQUcsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFJLEVB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ZXIvY2FwYWJpbGl0aWVzLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VDYXBzLCB2YWxpZGF0ZUNhcHMsIG1lcmdlQ2FwcywgcHJvY2Vzc0NhcHMgfSBmcm9tICcuLi8uLi9saWIvYmFzZWRyaXZlci9jYXBhYmlsaXRpZXMnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5cbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ2NhcHMnLCAoKSA9PiB7XG5cbiAgLy8gVGVzdHMgYmFzZWQgb246IGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJkcml2ZXIvI2Rmbi12YWxpZGF0ZS1jYXBzXG4gIGRlc2NyaWJlKCcjdmFsaWRhdGVDYXBzJywgKCkgPT4ge1xuICAgIGl0KCdyZXR1cm5zIGludmFsaWQgYXJndW1lbnQgZXJyb3IgaWYgXCJjYXBhYmlsaXR5XCIgaXMgbm90IGEgSlNPTiBvYmplY3QgKDEpJywgKCkgPT4ge1xuICAgICAgZm9yIChsZXQgYXJnIG9mIFt1bmRlZmluZWQsIG51bGwsIDEsIHRydWUsICdzdHJpbmcnXSkgeyBcbiAgICAgICAgKGZ1bmN0aW9uICgpIHsgdmFsaWRhdGVDYXBzKGFyZyk7IH0pLnNob3VsZC50aHJvdygvbXVzdCBiZSBhIEpTT04gb2JqZWN0Lyk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3JldHVybnMgcmVzdWx0IHt9IGJ5IGRlZmF1bHQgaWYgY2FwcyBpcyBlbXB0eSBvYmplY3QgYW5kIG5vIGNvbnN0cmFpbnRzIHByb3ZpZGVkICgyKScsICgpID0+IHtcbiAgICAgIHZhbGlkYXRlQ2Fwcyh7fSkuc2hvdWxkLmRlZXAuZXF1YWwoe30pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3Rocm93cyBlcnJvcnMgaWYgY29uc3RyYWludHMgYXJlIG5vdCBtZXQnLCAoKSA9PiB7XG4gICAgICBpdCgncmV0dXJucyBpbnZhbGlkIGFyZ3VtZW50IGVycm9yIGlmIFwicHJlc2VudFwiIGNvbnN0cmFpbnQgbm90IG1ldCBvbiBwcm9wZXJ0eScsICgpID0+IHtcbiAgICAgICAgKCgpID0+IHZhbGlkYXRlQ2Fwcyh7fSwge2Zvbzoge3ByZXNlbmNlOiB0cnVlfX0pKS5zaG91bGQudGhyb3coL2ZvbyBjYW4ndCBiZSBibGFuay8pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdyZXR1cm5zIHRoZSBjYXBhYmlsaXR5IHRoYXQgd2FzIHBhc3NlZCBpbiBpZiBcInNraXBQcmVzZW5jZUNvbnN0cmFpbnRcIiBpcyBmYWxzZScsICgpID0+IHtcbiAgICAgICAgdmFsaWRhdGVDYXBzKHt9LCB7Zm9vOiB7cHJlc2VuY2U6IHRydWV9fSwgdHJ1ZSkuc2hvdWxkLmRlZXAuZXF1YWwoe30pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdyZXR1cm5zIGludmFsaWQgYXJndW1lbnQgZXJyb3IgaWYgXCJpc1N0cmluZ1wiIGNvbnN0cmFpbnQgbm90IG1ldCBvbiBwcm9wZXJ0eScsICgpID0+IHtcbiAgICAgICAgKCgpID0+IHZhbGlkYXRlQ2Fwcyh7Zm9vOiAxfSwge2Zvbzoge2lzU3RyaW5nOiB0cnVlfX0pKS5zaG91bGQudGhyb3coL2ZvbyBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3JldHVybnMgaW52YWxpZCBhcmd1bWVudCBlcnJvciBpZiBcImlzTnVtYmVyXCIgY29uc3RyYWludCBub3QgbWV0IG9uIHByb3BlcnR5JywgKCkgPT4ge1xuICAgICAgICAoKCkgPT4gdmFsaWRhdGVDYXBzKHtmb286ICdiYXInfSwge2Zvbzoge2lzTnVtYmVyOiB0cnVlfX0pKS5zaG91bGQudGhyb3coL2ZvbyBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyLyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3JldHVybnMgaW52YWxpZCBhcmd1bWVudCBlcnJvciBpZiBcImlzQm9vbGVhblwiIGNvbnN0cmFpbnQgbm90IG1ldCBvbiBwcm9wZXJ0eScsICgpID0+IHtcbiAgICAgICAgKCgpID0+IHZhbGlkYXRlQ2Fwcyh7Zm9vOiAnYmFyJ30sIHtmb286IHtpc0Jvb2xlYW46IHRydWV9fSkpLnNob3VsZC50aHJvdygvZm9vIG11c3QgYmUgb2YgdHlwZSBib29sZWFuLyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3JldHVybnMgaW52YWxpZCBhcmd1bWVudCBlcnJvciBpZiBcImluY2x1c2lvblwiIGNvbnN0cmFpbnQgbm90IG1ldCBvbiBwcm9wZXJ0eScsICgpID0+IHtcbiAgICAgICAgKCgpID0+IHZhbGlkYXRlQ2Fwcyh7Zm9vOiAnMyd9LCB7Zm9vOiB7aW5jbHVzaW9uQ2FzZUluc2Vuc2l0aXZlOiBbJzEnLCAnMiddfX0pKS5zaG91bGQudGhyb3coL2ZvbyAzIG5vdCBwYXJ0IG9mIDEsMi4vKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgncmV0dXJucyBpbnZhbGlkIGFyZ3VtZW50IGVycm9yIGlmIFwiaW5jbHVzaW9uQ2FzZUluc2Vuc2l0aXZlXCIgY29uc3RyYWludCBub3QgbWV0IG9uIHByb3BlcnR5JywgKCkgPT4ge1xuICAgICAgICAoKCkgPT4gdmFsaWRhdGVDYXBzKHtmb286ICdhJ30sIHtmb286IHtpbmNsdXNpb246IFsnQScsICdCJywgJ0MnXX19KSkuc2hvdWxkLnRocm93KC9mb28gYSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGxpc3QvKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgdGhyb3cgZXJyb3JzIGlmIGNvbnN0cmFpbnRzIGFyZSBtZXQnLCAoKSA9PiB7XG4gICAgICBsZXQgY2FwcyA9IHtcbiAgICAgICAgbnVtYmVyOiAxLFxuICAgICAgICBzdHJpbmc6ICdzdHJpbmcnLFxuICAgICAgICBwcmVzZW50OiAncHJlc2VudCcsXG4gICAgICAgIGV4dHJhOiAnZXh0cmEnLFxuICAgICAgfTtcblxuICAgICAgbGV0IGNvbnN0cmFpbnRzID0ge1xuICAgICAgICBudW1iZXI6IHtpc051bWJlcjogdHJ1ZX0sXG4gICAgICAgIHN0cmluZzoge2lzU3RyaW5nOiB0cnVlfSxcbiAgICAgICAgcHJlc2VudDoge3ByZXNlbmNlOiB0cnVlfSxcbiAgICAgICAgbm90UHJlc2VudDoge3ByZXNlbmNlOiBmYWxzZX0sXG4gICAgICB9O1xuXG4gICAgICB2YWxpZGF0ZUNhcHMoY2FwcywgY29uc3RyYWludHMpLnNob3VsZC5kZWVwLmVxdWFsKGNhcHMpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBUZXN0cyBiYXNlZCBvbjogaHR0cHM6Ly93d3cudzMub3JnL1RSL3dlYmRyaXZlci8jZGZuLW1lcmdpbmctY2Fwc1xuICBkZXNjcmliZSgnI21lcmdlQ2FwcycsICgpID0+IHtcbiAgICBpdCgncmV0dXJucyBhIHJlc3VsdCB0aGF0IGlzIHt9IGJ5IGRlZmF1bHQgKDEpJywgKCkgPT4ge1xuICAgICAgbWVyZ2VDYXBzKCkuc2hvdWxkLmRlZXAuZXF1YWwoe30pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JldHVybnMgYSByZXN1bHQgdGhhdCBtYXRjaGVzIHByaW1hcnkgYnkgZGVmYXVsdCAoMiwgMyknLCAoKSA9PiB7XG4gICAgICBtZXJnZUNhcHMoe2hlbGxvOiAnd29ybGQnfSkuc2hvdWxkLmRlZXAuZXF1YWwoe2hlbGxvOiAnd29ybGQnfSk7XG4gICAgfSk7XG5cbiAgICBpdCgncmV0dXJucyBpbnZhbGlkIGFyZ3VtZW50IGVycm9yIGlmIHByaW1hcnkgYW5kIHNlY29uZGFyeSBoYXZlIG1hdGNoaW5nIHByb3BlcnRpZXMgKDQpJywgKCkgPT4ge1xuICAgICAgKCgpID0+IG1lcmdlQ2Fwcyh7aGVsbG86ICd3b3JsZCd9LCB7aGVsbG86ICd3aGlybCd9KSkuc2hvdWxkLnRocm93KC9wcm9wZXJ0eSBoZWxsbyBzaG91bGQgbm90IGV4aXN0IG9uIGJvdGggcHJpbWFyeSBhbmQgc2Vjb25kYXJ5Lyk7XG4gICAgfSk7XG5cbiAgICBpdCgncmV0dXJucyBhIHJlc3VsdCB3aXRoIGtleXMgZnJvbSBwcmltYXJ5IGFuZCBzZWNvbmRhcnkgdG9nZXRoZXInLCAoKSA9PiB7XG4gICAgICBsZXQgcHJpbWFyeSA9IHtcbiAgICAgICAgYTogJ2EnLFxuICAgICAgICBiOiAnYicsXG4gICAgICB9O1xuICAgICAgbGV0IHNlY29uZGFyeSA9IHtcbiAgICAgICAgYzogJ2MnLFxuICAgICAgICBkOiAnZCcsXG4gICAgICB9O1xuICAgICAgbWVyZ2VDYXBzKHByaW1hcnksIHNlY29uZGFyeSkuc2hvdWxkLmRlZXAuZXF1YWwoe1xuICAgICAgICBhOiAnYScsIGI6ICdiJywgYzogJ2MnLCBkOiAnZCcsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gVGVzdHMgYmFzZWQgb246IGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJkcml2ZXIvI2Rmbi1tYXRjaGluZy1jYXBzXG4gIGRlc2NyaWJlKCcjbWF0Y2hDYXBzJywgKCkgPT4ge1xuICAgIC8vIFRPRE86IERvIHdlIG5lZWQgdGhpcz9cbiAgfSk7XG5cbiAgLy8gVGVzdHMgYmFzZWQgb246IGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJkcml2ZXIvI3Byb2Nlc3NpbmctY2Fwc1xuICBkZXNjcmliZSgnI3BhcnNlQ2FwcycsICgpID0+IHtcbiAgICBsZXQgY2FwcztcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgY2FwcyA9IHt9O1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gaW52YWxpZCBhcmd1bWVudCBpZiBubyBjYXBzIG9iamVjdCBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgICgoKSA9PiBwYXJzZUNhcHMoKSkuc2hvdWxkLnRocm93KC9tdXN0IGJlIGEgSlNPTiBvYmplY3QvKTtcbiAgICB9KTtcblxuICAgIGl0KCdzZXRzIFwicmVxdWlyZWRDYXBzXCIgdG8gcHJvcGVydHkgbmFtZWQgXCJhbHdheXNNYXRjaFwiICgyKScsICgpID0+IHtcbiAgICAgIGNhcHMuYWx3YXlzTWF0Y2ggPSB7aGVsbG86ICd3b3JsZCd9O1xuICAgICAgcGFyc2VDYXBzKGNhcHMpLnJlcXVpcmVkQ2Fwcy5zaG91bGQuZGVlcC5lcXVhbChjYXBzLmFsd2F5c01hdGNoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzZXRzIFwicmVxdWlyZWRDYXBzXCIgdG8gZW1wdHkgSlNPTiBvYmplY3QgaWYgXCJhbHdheXNNYXRjaFwiIGlzIG5vdCBhbiBvYmplY3QgKDIuMSknLCAoKSA9PiB7XG4gICAgICBwYXJzZUNhcHMoY2FwcykucmVxdWlyZWRDYXBzLnNob3VsZC5kZWVwLmVxdWFsKHt9KTtcbiAgICB9KTtcblxuICAgIGl0KCdyZXR1cm5zIGludmFsaWQgYXJndW1lbnQgZXJyb3IgaWYgXCJyZXF1aXJlZENhcHNcIiBkb25cXCd0IG1hdGNoIFwiY29uc3RyYWludHNcIiAoMi4yKScsICgpID0+IHtcbiAgICAgIGNhcHMuYWx3YXlzTWF0Y2ggPSB7Zm9vOiAxfTtcbiAgICAgICgoKSA9PiBwYXJzZUNhcHMoY2Fwcywge2Zvbzoge2lzU3RyaW5nOiB0cnVlfX0pKS5zaG91bGQudGhyb3coL2ZvbyBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2V0cyBcImFsbEZpcnN0TWF0Y2hDYXBzXCIgdG8gcHJvcGVydHkgbmFtZWQgXCJmaXJzdE1hdGNoXCIgKDMpJywgKCkgPT4ge1xuICAgICAgcGFyc2VDYXBzKHt9LCBbXSkuYWxsRmlyc3RNYXRjaENhcHMuc2hvdWxkLmRlZXAuZXF1YWwoW10pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3NldHMgXCJhbGxGaXJzdE1hdGNoQ2Fwc1wiIHRvIFtdIGlmIFwiZmlyc3RNYXRjaFwiIGlzIHVuZGVmaW5lZCAoMy4xKScsICgpID0+IHtcbiAgICAgIHBhcnNlQ2Fwcyh7fSkuYWxsRmlyc3RNYXRjaENhcHMuc2hvdWxkLmRlZXAuZXF1YWwoW10pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JldHVybnMgaW52YWxpZCBhcmd1bWVudCBlcnJvciBpZiBcImZpcnN0TWF0Y2hcIiBpcyBub3QgYW4gYXJyYXkgYW5kIGlzIG5vdCB1bmRlZmluZWQgKDMuMiknLCAoKSA9PiB7XG4gICAgICBmb3IgKGxldCBhcmcgb2YgW251bGwsIDEsIHRydWUsICdzdHJpbmcnXSkge1xuICAgICAgICBjYXBzLmZpcnN0TWF0Y2ggPSBhcmc7XG4gICAgICAgIChmdW5jdGlvbiAoKXsgcGFyc2VDYXBzKGNhcHMpOyB9KS5zaG91bGQudGhyb3coL211c3QgYmUgYSBKU09OIGFycmF5IG9yIHVuZGVmaW5lZC8pOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdoYXMgXCJ2YWxpZGF0ZWRGaXJzdE1hdGNoQ2Fwc1wiIHByb3BlcnR5IHRoYXQgaXMgW10gYnkgZGVmYXVsdCAoNCknLCAoKSA9PiB7XG4gICAgICBwYXJzZUNhcHMoY2FwcykudmFsaWRhdGVkRmlyc3RNYXRjaENhcHMuc2hvdWxkLmRlZXAuZXF1YWwoW10pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3JldHVybnMgYSBcInZhbGlkYXRlZEZpcnN0TWF0Y2hDYXBzXCIgYXJyYXkgKDUpJywgKCkgPT4ge1xuICAgICAgaXQoJ3RoYXQgZXF1YWxzIFwiZmlyc3RNYXRjaFwiIGlmIGZpcnN0TWF0Y2ggaXMgb25lIGVtcHR5IG9iamVjdCBhbmQgdGhlcmUgYXJlIG5vIGNvbnN0cmFpbnRzJywgKCkgPT4ge1xuICAgICAgICBjYXBzLmZpcnN0TWF0Y2ggPSBbe31dO1xuICAgICAgICBwYXJzZUNhcHMoY2FwcykudmFsaWRhdGVkRmlyc3RNYXRjaENhcHMuc2hvdWxkLmRlZXAuZXF1YWwoY2Fwcy5maXJzdE1hdGNoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgncmV0dXJucyBpbnZhbGlkIGFyZ3VtZW50IGVycm9yIGlmIGZpcnN0TWF0Y2ggYXJyYXlcXCdzIGZpcnN0IGFyZ3VtZW50IGZhaWxzIGNvbnN0cmFpbnRzJywgKCkgPT4ge1xuICAgICAgICBjYXBzLmZpcnN0TWF0Y2ggPSBbe31dO1xuICAgICAgICAoKCkgPT4gcGFyc2VDYXBzKGNhcHMsIHtmb286IHtwcmVzZW5jZTogdHJ1ZX19KSkuc2hvdWxkLnRocm93KC9mb28gY2FuJ3QgYmUgYmxhbmsvKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgndGhhdCBlcXVhbHMgZmlyc3RNYXRjaCBpZiBmaXJzdE1hdGNoIGNvbnRhaW5zIHR3byBvYmplY3RzIHRoYXQgcGFzcyB0aGUgcHJvdmlkZWQgY29uc3RyYWludHMnLCAoKSA9PiB7XG4gICAgICAgIGNhcHMuYWx3YXlzTWF0Y2ggPSB7XG4gICAgICAgICAgZm9vOiAnYmFyJ1xuICAgICAgICB9O1xuICAgICAgICBjYXBzLmZpcnN0TWF0Y2ggPSBbXG4gICAgICAgICAge2ZvbzogJ2JhcjEnfSxcbiAgICAgICAgICB7Zm9vOiAnYmFyMid9LFxuICAgICAgICBdO1xuXG4gICAgICAgIGxldCBjb25zdHJhaW50cyA9IHtcbiAgICAgICAgICBmb286IHtcbiAgICAgICAgICAgIHByZXNlbmNlOiB0cnVlLFxuICAgICAgICAgICAgaXNTdHJpbmc6IHRydWUsXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHBhcnNlQ2FwcyhjYXBzLCBjb25zdHJhaW50cykudmFsaWRhdGVkRmlyc3RNYXRjaENhcHMuc2hvdWxkLmRlZXAuZXF1YWwoY2Fwcy5maXJzdE1hdGNoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgncmV0dXJucyBpbnZhbGlkIGFyZ3VtZW50IGVycm9yIGlmIHRoZSBmaXJzdE1hdGNoWzJdIGlzIG5vdCBhbiBvYmplY3QnLCAoKSA9PiB7XG4gICAgICAgIGNhcHMuZmlyc3RNYXRjaCA9IFt7Zm9vOiAnYmFyJ30sICdmb28nXTtcbiAgICAgICAgKCgpID0+IHBhcnNlQ2FwcyhjYXBzLCB7fSkpLnNob3VsZC50aHJvdygvbXVzdCBiZSBhIEpTT04gb2JqZWN0Lyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdyZXR1cm5zIGEgbWF0Y2hlZENhcHMgb2JqZWN0ICg2KScsICgpID0+IHtcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBjYXBzLmFsd2F5c01hdGNoID0ge2hlbGxvOiAnd29ybGQnfTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnd2hpY2ggaXMgc2FtZSBhcyBhbHdheXNNYXRjaCBpZiBmaXJzdE1hdGNoIGFycmF5IGlzIG5vdCBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgICAgcGFyc2VDYXBzKGNhcHMpLm1hdGNoZWRDYXBzLnNob3VsZC5kZWVwLmVxdWFsKHtoZWxsbzogJ3dvcmxkJ30pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdtZXJnZXMgY2FwcyB0b2dldGhlcicsICgpID0+IHtcbiAgICAgICAgY2Fwcy5maXJzdE1hdGNoID0gW3tmb286ICdiYXInfV07XG4gICAgICAgIHBhcnNlQ2FwcyhjYXBzKS5tYXRjaGVkQ2Fwcy5zaG91bGQuZGVlcC5lcXVhbCh7aGVsbG86ICd3b3JsZCcsIGZvbzogJ2Jhcid9KTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnd2l0aCBtZXJnZWQgY2FwcycsICgpID0+IHtcbiAgICAgICAgY2Fwcy5maXJzdE1hdGNoID0gW3toZWxsbzogJ2JhcicsIGZvbzogJ2Zvbyd9LCB7Zm9vOiAnYmFyJ31dO1xuICAgICAgICBwYXJzZUNhcHMoY2FwcykubWF0Y2hlZENhcHMuc2hvdWxkLmRlZXAuZXF1YWwoe2hlbGxvOiAnd29ybGQnLCBmb286ICdiYXInfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJyNwcm9jZXNzQ2FwcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBcImFsd2F5c01hdGNoXCIgaWYgXCJmaXJzdE1hdGNoXCIgYW5kIFwiY29uc3RyYWludHNcIiB3ZXJlIG5vdCBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgIHByb2Nlc3NDYXBzKHt9KS5zaG91bGQuZGVlcC5lcXVhbCh7fSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBtZXJnZWQgY2FwcycsICgpID0+IHtcbiAgICAgIHByb2Nlc3NDYXBzKHtcbiAgICAgICAgYWx3YXlzTWF0Y2g6IHtoZWxsbzogJ3dvcmxkJ30sIFxuICAgICAgICBmaXJzdE1hdGNoOiBbe2ZvbzogJ2Jhcid9XVxuICAgICAgfSkuc2hvdWxkLmRlZXAuZXF1YWwoe2hlbGxvOiAnd29ybGQnLCBmb286ICdiYXInfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
