'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

// wrap these tests in a function so we can export the tests and re-use them
// for actual driver implementations
function baseDriverUnitTests(DriverClass) {
  var _this = this;

  var defaultCaps = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  describe('BaseDriver', function () {

    var d = undefined;
    beforeEach(function () {
      d = new DriverClass();
    });

    it('should return an empty status object', function callee$2$0() {
      var status;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.getStatus());

          case 2:
            status = context$3$0.sent;

            status.should.eql({});

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should return a sessionId from createSession', function callee$2$0() {
      var _ref, _ref2, sessId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessId = _ref2[0];

            should.exist(sessId);
            sessId.should.be.a('string');
            sessId.length.should.be.above(5);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should not be able to start two sessions without closing the first', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps).should.eventually.be.rejectedWith('session'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should be able to delete a session', function callee$2$0() {
      var sessionId1, sessionId2;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            sessionId1 = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.deleteSession());

          case 5:
            should.equal(d.sessionId, null);
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 8:
            sessionId2 = context$3$0.sent;

            sessionId1.should.not.eql(sessionId2);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should get the current session', function callee$2$0() {
      var _ref3, _ref32, caps;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            _ref3 = context$3$0.sent;
            _ref32 = _slicedToArray(_ref3, 2);
            caps = _ref32[1];
            context$3$0.t0 = caps.should;
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.getSession());

          case 8:
            context$3$0.t1 = context$3$0.sent;
            context$3$0.t0.equal.call(context$3$0.t0, context$3$0.t1);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should return sessions if no session exists', function callee$2$0() {
      var sessions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.getSessions());

          case 2:
            sessions = context$3$0.sent;

            sessions.length.should.equal(0);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should return sessions', function callee$2$0() {
      var caps, sessions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = _lodash2['default'].clone(defaultCaps);

            caps.a = 'cap';
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.createSession(caps));

          case 4:
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(d.getSessions());

          case 6:
            sessions = context$3$0.sent;

            sessions.length.should.equal(1);
            sessions[0].should.eql({
              id: d.sessionId,
              capabilities: caps
            });

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should fulfill an unexpected driver quit promise', function callee$2$0() {
      var cmdPromise;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make a command that will wait a bit so we can crash while it's running
            d.getStatus = (function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

                  case 2:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            }).bind(d);
            cmdPromise = d.executeCommand('getStatus');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(0));

          case 4:
            d.startUnexpectedShutdown(new Error('We crashed'));
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(cmdPromise.should.be.rejectedWith(/We crashed/));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/));

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should not allow commands in middle of unexpected shutdown', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make a command that will wait a bit so we can crash while it's running
            d.oldDeleteSession = d.deleteSession;
            d.deleteSession = (function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

                  case 2:
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(this.oldDeleteSession());

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            }).bind(d);
            caps = _lodash2['default'].clone(defaultCaps);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.createSession(caps));

          case 5:
            d.startUnexpectedShutdown(new Error('We crashed'));
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(d.executeCommand('getSession').should.be.rejectedWith(/shut down/));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should allow new commands after done shutting down', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make a command that will wait a bit so we can crash while it's running
            d.oldDeleteSession = d.deleteSession;
            d.deleteSession = (function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

                  case 2:
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(this.oldDeleteSession());

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            }).bind(d);
            caps = _lodash2['default'].clone(defaultCaps);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.createSession(caps));

          case 5:
            d.startUnexpectedShutdown(new Error('We crashed'));
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(d.executeCommand('getSession').should.be.rejectedWith(/shut down/));

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

          case 12:
            context$3$0.next = 14;
            return _regeneratorRuntime.awrap(d.executeCommand('createSession', caps));

          case 14:
            context$3$0.next = 16;
            return _regeneratorRuntime.awrap(d.deleteSession());

          case 16:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should have a method to get driver for a session', function callee$2$0() {
      var _ref4, _ref42, sessId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            _ref4 = context$3$0.sent;
            _ref42 = _slicedToArray(_ref4, 1);
            sessId = _ref42[0];

            d.driverForSession(sessId).should.eql(d);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    describe('command queue', function () {
      var d = new DriverClass();

      var waitMs = 10;
      d.getStatus = (function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(waitMs));

            case 2:
              return context$4$0.abrupt('return', Date.now());

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      }).bind(d);

      d.getSessions = (function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(waitMs));

            case 2:
              throw new Error('multipass');

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      }).bind(d);

      afterEach(function () {
        d.clearNewCommandTimeout();
      });

      it('should queue commands and.executeCommand/respond in the order received', function callee$3$0() {
        var numCmds, cmds, i, results;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              numCmds = 10;
              cmds = [];

              for (i = 0; i < numCmds; i++) {
                cmds.push(d.executeCommand('getStatus'));
              }
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_bluebird2['default'].all(cmds));

            case 5:
              results = context$4$0.sent;
              i = 1;

            case 7:
              if (!(i < numCmds)) {
                context$4$0.next = 13;
                break;
              }

              if (!(results[i] <= results[i - 1])) {
                context$4$0.next = 10;
                break;
              }

              throw new Error('Got result out of order');

            case 10:
              i++;
              context$4$0.next = 7;
              break;

            case 13:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should handle errors correctly when queuing', function callee$3$0() {
        var numCmds, cmds, i, results;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              numCmds = 10;
              cmds = [];

              for (i = 0; i < numCmds; i++) {
                if (i === 5) {
                  cmds.push(d.executeCommand('getSessions'));
                } else {
                  cmds.push(d.executeCommand('getStatus'));
                }
              }
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_bluebird2['default'].settle(cmds));

            case 5:
              results = context$4$0.sent;
              i = 1;

            case 7:
              if (!(i < 5)) {
                context$4$0.next = 13;
                break;
              }

              if (!(results[i].value() <= results[i - 1].value())) {
                context$4$0.next = 10;
                break;
              }

              throw new Error('Got result out of order');

            case 10:
              i++;
              context$4$0.next = 7;
              break;

            case 13:
              results[5].reason().message.should.contain('multipass');
              i = 7;

            case 15:
              if (!(i < numCmds)) {
                context$4$0.next = 21;
                break;
              }

              if (!(results[i].value() <= results[i - 1].value())) {
                context$4$0.next = 18;
                break;
              }

              throw new Error('Got result out of order');

            case 18:
              i++;
              context$4$0.next = 15;
              break;

            case 21:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should not care if queue empties for a bit', function callee$3$0() {
        var numCmds, cmds, i, results;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              numCmds = 10;
              cmds = [];

              for (i = 0; i < numCmds; i++) {
                cmds.push(d.executeCommand('getStatus'));
              }
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_bluebird2['default'].all(cmds));

            case 5:
              results = context$4$0.sent;

              cmds = [];
              for (i = 0; i < numCmds; i++) {
                cmds.push(d.executeCommand('getStatus'));
              }
              context$4$0.next = 10;
              return _regeneratorRuntime.awrap(_bluebird2['default'].all(cmds));

            case 10:
              results = context$4$0.sent;
              i = 1;

            case 12:
              if (!(i < numCmds)) {
                context$4$0.next = 18;
                break;
              }

              if (!(results[i] <= results[i - 1])) {
                context$4$0.next = 15;
                break;
              }

              throw new Error('Got result out of order');

            case 15:
              i++;
              context$4$0.next = 12;
              break;

            case 18:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });

    describe('timeouts', function () {
      before(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      describe('command', function () {
        it('should exist by default', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                d.newCommandTimeoutMs.should.equal(60000);

              case 1:
              case 'end':
                return context$5$0.stop();
            }
          }, null, _this);
        });
        it('should be settable through `timeouts`', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(d.timeouts('command', 20));

              case 2:
                d.newCommandTimeoutMs.should.equal(20);

              case 3:
              case 'end':
                return context$5$0.stop();
            }
          }, null, _this);
        });
      });
      describe('implicit', function () {
        it('should not exist by default', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                d.implicitWaitMs.should.equal(0);

              case 1:
              case 'end':
                return context$5$0.stop();
            }
          }, null, _this);
        });
        it('should be settable through `timeouts`', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(d.timeouts('implicit', 20));

              case 2:
                d.implicitWaitMs.should.equal(20);

              case 3:
              case 'end':
                return context$5$0.stop();
            }
          }, null, _this);
        });
      });
    });

    describe('reset compatibility', function () {
      it('should not allow both fullReset and noReset to be true', function callee$3$0() {
        var newCaps;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              newCaps = _Object$assign({}, defaultCaps, {
                fullReset: true,
                noReset: true
              });
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(d.createSession(newCaps).should.eventually.be.rejectedWith(/noReset.+fullReset/));

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });

    describe('proxying', function () {
      var sessId = undefined;
      beforeEach(function callee$3$0() {
        var _ref5, _ref52;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

            case 2:
              _ref5 = context$4$0.sent;
              _ref52 = _slicedToArray(_ref5, 1);
              sessId = _ref52[0];

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      describe('#proxyActive', function () {
        it('should exist', function () {
          d.proxyActive.should.be.an['instanceof'](Function);
        });
        it('should return false', function () {
          d.proxyActive(sessId).should.be['false'];
        });
        it('should throw an error when sessionId is wrong', function () {
          (function () {
            d.proxyActive('aaa');
          }).should['throw'];
        });
      });

      describe('#getProxyAvoidList', function () {
        it('should exist', function () {
          d.getProxyAvoidList.should.be.an['instanceof'](Function);
        });
        it('should return an array', function () {
          d.getProxyAvoidList(sessId).should.be.an['instanceof'](Array);
        });
        it('should throw an error when sessionId is wrong', function () {
          (function () {
            d.getProxyAvoidList('aaa');
          }).should['throw'];
        });
      });

      describe('#canProxy', function () {
        it('should have a #canProxy method', function () {
          d.canProxy.should.be.an['instanceof'](Function);
        });
        it('should return false from #canProxy', function () {
          d.canProxy(sessId).should.be['false'];
        });
        it('should throw an error when sessionId is wrong', function () {
          (function () {
            d.canProxy();
          }).should['throw'];
        });
      });
    });

    describe('event timing framework', function () {
      var beforeStartTime = undefined;
      beforeEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              beforeStartTime = Date.now();
              d.shouldValidateCaps = false;
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(d.executeCommand('createSession', [defaultCaps]));

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      describe('#eventHistory', function () {
        it('should have an eventHistory property', function () {
          should.exist(d.eventHistory);
          should.exist(d.eventHistory.commands);
        });

        it('should have a session start timing after session start', function () {
          var _d$eventHistory = d.eventHistory;
          var newSessionRequested = _d$eventHistory.newSessionRequested;
          var newSessionStarted = _d$eventHistory.newSessionStarted;

          newSessionRequested.should.have.length(1);
          newSessionStarted.should.have.length(1);
          newSessionRequested[0].should.be.a('number');
          newSessionStarted[0].should.be.a('number');
          (newSessionRequested[0] >= beforeStartTime).should.be['true'];
          (newSessionStarted[0] >= newSessionRequested[0]).should.be['true'];
        });

        it('should include a commands list', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(d.executeCommand('getStatus', []));

              case 2:
                d.eventHistory.commands.length.should.equal(2);
                d.eventHistory.commands[1].cmd.should.equal('getStatus');
                d.eventHistory.commands[1].startTime.should.be.a('number');
                d.eventHistory.commands[1].endTime.should.be.a('number');

              case 6:
              case 'end':
                return context$5$0.stop();
            }
          }, null, _this);
        });
      });
      describe('#logEvent', function () {
        it('should allow logging arbitrary events', function () {
          d.logEvent('foo');
          d.eventHistory.foo[0].should.be.a('number');
          (d.eventHistory.foo[0] >= beforeStartTime).should.be['true'];
        });
        it('should not allow reserved or oddly formed event names', function () {
          (function () {
            d.logEvent('commands');
          }).should['throw']();
          (function () {
            d.logEvent(1);
          }).should['throw']();
          (function () {
            d.logEvent({});
          }).should['throw']();
        });
      });
      it('should allow logging the same event multiple times', function () {
        d.logEvent('bar');
        d.logEvent('bar');
        d.eventHistory.bar.should.have.length(2);
        d.eventHistory.bar[1].should.be.a('number');
        (d.eventHistory.bar[1] >= d.eventHistory.bar[0]).should.be['true'];
      });
      describe('getSession decoration', function () {
        it('should decorate getSession response if opt-in cap is provided', function callee$4$0() {
          var res;
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(d.getSession());

              case 2:
                res = context$5$0.sent;

                should.not.exist(res.events);

                d.caps.eventTimings = true;
                context$5$0.next = 7;
                return _regeneratorRuntime.awrap(d.getSession());

              case 7:
                res = context$5$0.sent;

                should.exist(res.events);
                should.exist(res.events.newSessionRequested);
                res.events.newSessionRequested[0].should.be.a('number');

              case 11:
              case 'end':
                return context$5$0.stop();
            }
          }, null, _this);
        });
      });
    });
  });
}

exports['default'] = baseDriverUnitTests;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci9kcml2ZXItdGVzdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7c0JBQWMsUUFBUTs7OztvQkFDTCxNQUFNOzs7OzhCQUNJLGtCQUFrQjs7Ozt3QkFDL0IsVUFBVTs7OztBQUV4QixJQUFNLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUM3QixrQkFBSyxHQUFHLDZCQUFnQixDQUFDOzs7O0FBSXpCLFNBQVMsbUJBQW1CLENBQUUsV0FBVyxFQUFvQjs7O01BQWxCLFdBQVcseURBQUcsRUFBRTs7QUFDekQsVUFBUSxDQUFDLFlBQVksRUFBRSxZQUFNOztBQUUzQixRQUFJLENBQUMsWUFBQSxDQUFDO0FBQ04sY0FBVSxDQUFDLFlBQU07QUFDZixPQUFDLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztLQUN2QixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLHNDQUFzQyxFQUFFO1VBQ3JDLE1BQU07Ozs7OzZDQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUU7OztBQUE1QixrQkFBTTs7QUFDVixrQkFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7Ozs7Ozs7S0FDdkIsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyw4Q0FBOEMsRUFBRTt1QkFDNUMsTUFBTTs7Ozs7OzZDQUFVLENBQUMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDOzs7OztBQUE1QyxrQkFBTTs7QUFDWCxrQkFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNyQixrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdCLGtCQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0tBQ2xDLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsb0VBQW9FLEVBQUU7Ozs7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R0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUUsTUFBTSxDQUFDLEVBQUUsUUFBSyxDQUFDO09BQ2pFLENBQUMsQ0FBQztBQUNILGNBQVEsQ0FBQyx1QkFBdUIsRUFBRSxZQUFNO0FBQ3RDLFVBQUUsQ0FBQywrREFBK0QsRUFBRTtjQUM5RCxHQUFHOzs7OztpREFBUyxDQUFDLENBQUMsVUFBVSxFQUFFOzs7QUFBMUIsbUJBQUc7O0FBQ1Asc0JBQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFN0IsaUJBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQzs7aURBQ2YsQ0FBQyxDQUFDLFVBQVUsRUFBRTs7O0FBQTFCLG1CQUFHOztBQUNILHNCQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN6QixzQkFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDN0MsbUJBQUcsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7Ozs7Ozs7U0FDekQsQ0FBQyxDQUFDO09BQ0osQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0o7O3FCQUVjLG1CQUFtQiIsImZpbGUiOiJ0ZXN0L2Jhc2Vkcml2ZXIvZHJpdmVyLXRlc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5jb25zdCBzaG91bGQgPSBjaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG4vLyB3cmFwIHRoZXNlIHRlc3RzIGluIGEgZnVuY3Rpb24gc28gd2UgY2FuIGV4cG9ydCB0aGUgdGVzdHMgYW5kIHJlLXVzZSB0aGVtXG4vLyBmb3IgYWN0dWFsIGRyaXZlciBpbXBsZW1lbnRhdGlvbnNcbmZ1bmN0aW9uIGJhc2VEcml2ZXJVbml0VGVzdHMgKERyaXZlckNsYXNzLCBkZWZhdWx0Q2FwcyA9IHt9KSB7XG4gIGRlc2NyaWJlKCdCYXNlRHJpdmVyJywgKCkgPT4ge1xuXG4gICAgbGV0IGQ7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBkID0gbmV3IERyaXZlckNsYXNzKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBlbXB0eSBzdGF0dXMgb2JqZWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHN0YXR1cyA9IGF3YWl0IGQuZ2V0U3RhdHVzKCk7XG4gICAgICBzdGF0dXMuc2hvdWxkLmVxbCh7fSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIHNlc3Npb25JZCBmcm9tIGNyZWF0ZVNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgW3Nlc3NJZF0gPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oZGVmYXVsdENhcHMpO1xuICAgICAgc2hvdWxkLmV4aXN0KHNlc3NJZCk7XG4gICAgICBzZXNzSWQuc2hvdWxkLmJlLmEoJ3N0cmluZycpO1xuICAgICAgc2Vzc0lkLmxlbmd0aC5zaG91bGQuYmUuYWJvdmUoNSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBiZSBhYmxlIHRvIHN0YXJ0IHR3byBzZXNzaW9ucyB3aXRob3V0IGNsb3NpbmcgdGhlIGZpcnN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihkZWZhdWx0Q2Fwcykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKCdzZXNzaW9uJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZGVsZXRlIGEgc2Vzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBzZXNzaW9uSWQxID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIGF3YWl0IGQuZGVsZXRlU2Vzc2lvbigpO1xuICAgICAgc2hvdWxkLmVxdWFsKGQuc2Vzc2lvbklkLCBudWxsKTtcbiAgICAgIGxldCBzZXNzaW9uSWQyID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIHNlc3Npb25JZDEuc2hvdWxkLm5vdC5lcWwoc2Vzc2lvbklkMik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdldCB0aGUgY3VycmVudCBzZXNzaW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IFssIGNhcHNdID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIGNhcHMuc2hvdWxkLmVxdWFsKGF3YWl0IGQuZ2V0U2Vzc2lvbigpKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHNlc3Npb25zIGlmIG5vIHNlc3Npb24gZXhpc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHNlc3Npb25zID0gYXdhaXQgZC5nZXRTZXNzaW9ucygpO1xuICAgICAgc2Vzc2lvbnMubGVuZ3RoLnNob3VsZC5lcXVhbCgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHNlc3Npb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IGNhcHMgPSBfLmNsb25lKGRlZmF1bHRDYXBzKTtcbiAgICAgIGNhcHMuYSA9ICdjYXAnO1xuICAgICAgYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGNhcHMpO1xuICAgICAgbGV0IHNlc3Npb25zID0gYXdhaXQgZC5nZXRTZXNzaW9ucygpO1xuXG4gICAgICBzZXNzaW9ucy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xuICAgICAgc2Vzc2lvbnNbMF0uc2hvdWxkLmVxbCh7XG4gICAgICAgIGlkOiBkLnNlc3Npb25JZCxcbiAgICAgICAgY2FwYWJpbGl0aWVzOiBjYXBzXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZnVsZmlsbCBhbiB1bmV4cGVjdGVkIGRyaXZlciBxdWl0IHByb21pc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBtYWtlIGEgY29tbWFuZCB0aGF0IHdpbGwgd2FpdCBhIGJpdCBzbyB3ZSBjYW4gY3Jhc2ggd2hpbGUgaXQncyBydW5uaW5nXG4gICAgICBkLmdldFN0YXR1cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXdhaXQgQi5kZWxheSgxMDApO1xuICAgICAgfS5iaW5kKGQpO1xuICAgICAgbGV0IGNtZFByb21pc2UgPSBkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnKTtcbiAgICAgIGF3YWl0IEIuZGVsYXkoMCk7XG4gICAgICBkLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcignV2UgY3Jhc2hlZCcpKTtcbiAgICAgIGF3YWl0IGNtZFByb21pc2Uuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvV2UgY3Jhc2hlZC8pO1xuICAgICAgYXdhaXQgZC5vblVuZXhwZWN0ZWRTaHV0ZG93bi5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9XZSBjcmFzaGVkLyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBhbGxvdyBjb21tYW5kcyBpbiBtaWRkbGUgb2YgdW5leHBlY3RlZCBzaHV0ZG93bicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIG1ha2UgYSBjb21tYW5kIHRoYXQgd2lsbCB3YWl0IGEgYml0IHNvIHdlIGNhbiBjcmFzaCB3aGlsZSBpdCdzIHJ1bm5pbmdcbiAgICAgIGQub2xkRGVsZXRlU2Vzc2lvbiA9IGQuZGVsZXRlU2Vzc2lvbjtcbiAgICAgIGQuZGVsZXRlU2Vzc2lvbiA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXdhaXQgQi5kZWxheSgxMDApO1xuICAgICAgICBhd2FpdCB0aGlzLm9sZERlbGV0ZVNlc3Npb24oKTtcbiAgICAgIH0uYmluZChkKTtcbiAgICAgIGxldCBjYXBzID0gXy5jbG9uZShkZWZhdWx0Q2Fwcyk7XG4gICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG4gICAgICBkLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcignV2UgY3Jhc2hlZCcpKTtcbiAgICAgIGF3YWl0IGQub25VbmV4cGVjdGVkU2h1dGRvd24uc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvV2UgY3Jhc2hlZC8pO1xuICAgICAgYXdhaXQgZC5leGVjdXRlQ29tbWFuZCgnZ2V0U2Vzc2lvbicpLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoL3NodXQgZG93bi8pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBuZXcgY29tbWFuZHMgYWZ0ZXIgZG9uZSBzaHV0dGluZyBkb3duJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gbWFrZSBhIGNvbW1hbmQgdGhhdCB3aWxsIHdhaXQgYSBiaXQgc28gd2UgY2FuIGNyYXNoIHdoaWxlIGl0J3MgcnVubmluZ1xuICAgICAgZC5vbGREZWxldGVTZXNzaW9uID0gZC5kZWxldGVTZXNzaW9uO1xuICAgICAgZC5kZWxldGVTZXNzaW9uID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBCLmRlbGF5KDEwMCk7XG4gICAgICAgIGF3YWl0IHRoaXMub2xkRGVsZXRlU2Vzc2lvbigpO1xuICAgICAgfS5iaW5kKGQpO1xuICAgICAgbGV0IGNhcHMgPSBfLmNsb25lKGRlZmF1bHRDYXBzKTtcbiAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihjYXBzKTtcbiAgICAgIGQuc3RhcnRVbmV4cGVjdGVkU2h1dGRvd24obmV3IEVycm9yKCdXZSBjcmFzaGVkJykpO1xuICAgICAgYXdhaXQgZC5vblVuZXhwZWN0ZWRTaHV0ZG93bi5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9XZSBjcmFzaGVkLyk7XG4gICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdnZXRTZXNzaW9uJykuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvc2h1dCBkb3duLyk7XG4gICAgICBhd2FpdCBCLmRlbGF5KDEwMCk7XG4gICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdjcmVhdGVTZXNzaW9uJywgY2Fwcyk7XG4gICAgICBhd2FpdCBkLmRlbGV0ZVNlc3Npb24oKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGF2ZSBhIG1ldGhvZCB0byBnZXQgZHJpdmVyIGZvciBhIHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgW3Nlc3NJZF0gPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oZGVmYXVsdENhcHMpO1xuICAgICAgZC5kcml2ZXJGb3JTZXNzaW9uKHNlc3NJZCkuc2hvdWxkLmVxbChkKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdjb21tYW5kIHF1ZXVlJywgKCkgPT4ge1xuICAgICAgbGV0IGQgPSBuZXcgRHJpdmVyQ2xhc3MoKTtcblxuICAgICAgbGV0IHdhaXRNcyA9IDEwO1xuICAgICAgZC5nZXRTdGF0dXMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkod2FpdE1zKTtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCk7XG4gICAgICB9LmJpbmQoZCk7XG5cbiAgICAgIGQuZ2V0U2Vzc2lvbnMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkod2FpdE1zKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdWx0aXBhc3MnKTtcbiAgICAgIH0uYmluZChkKTtcblxuICAgICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICAgZC5jbGVhck5ld0NvbW1hbmRUaW1lb3V0KCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBxdWV1ZSBjb21tYW5kcyBhbmQuZXhlY3V0ZUNvbW1hbmQvcmVzcG9uZCBpbiB0aGUgb3JkZXIgcmVjZWl2ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCBudW1DbWRzID0gMTA7XG4gICAgICAgIGxldCBjbWRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ21kczsgaSsrKSB7XG4gICAgICAgICAgY21kcy5wdXNoKGQuZXhlY3V0ZUNvbW1hbmQoJ2dldFN0YXR1cycpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IEIuYWxsKGNtZHMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGlmIChyZXN1bHRzW2ldIDw9IHJlc3VsdHNbaSAtIDFdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvdCByZXN1bHQgb3V0IG9mIG9yZGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXJyb3JzIGNvcnJlY3RseSB3aGVuIHF1ZXVpbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCBudW1DbWRzID0gMTA7XG4gICAgICAgIGxldCBjbWRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ21kczsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgPT09IDUpIHtcbiAgICAgICAgICAgIGNtZHMucHVzaChkLmV4ZWN1dGVDb21tYW5kKCdnZXRTZXNzaW9ucycpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY21kcy5wdXNoKGQuZXhlY3V0ZUNvbW1hbmQoJ2dldFN0YXR1cycpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBCLnNldHRsZShjbWRzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgICBpZiAocmVzdWx0c1tpXS52YWx1ZSgpIDw9IHJlc3VsdHNbaSAtIDFdLnZhbHVlKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR290IHJlc3VsdCBvdXQgb2Ygb3JkZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0c1s1XS5yZWFzb24oKS5tZXNzYWdlLnNob3VsZC5jb250YWluKCdtdWx0aXBhc3MnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDc7IGkgPCBudW1DbWRzOyBpKyspIHtcbiAgICAgICAgICBpZiAocmVzdWx0c1tpXS52YWx1ZSgpIDw9IHJlc3VsdHNbaSAtIDFdLnZhbHVlKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR290IHJlc3VsdCBvdXQgb2Ygb3JkZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIG5vdCBjYXJlIGlmIHF1ZXVlIGVtcHRpZXMgZm9yIGEgYml0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgbnVtQ21kcyA9IDEwO1xuICAgICAgICBsZXQgY21kcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGNtZHMucHVzaChkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBCLmFsbChjbWRzKTtcbiAgICAgICAgY21kcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGNtZHMucHVzaChkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0cyA9IGF3YWl0IEIuYWxsKGNtZHMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGlmIChyZXN1bHRzW2ldIDw9IHJlc3VsdHNbaSAtIDFdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvdCByZXN1bHQgb3V0IG9mIG9yZGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd0aW1lb3V0cycsICgpID0+IHtcbiAgICAgIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihkZWZhdWx0Q2Fwcyk7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCdjb21tYW5kJywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIGV4aXN0IGJ5IGRlZmF1bHQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgZC5uZXdDb21tYW5kVGltZW91dE1zLnNob3VsZC5lcXVhbCg2MDAwMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGJlIHNldHRhYmxlIHRocm91Z2ggYHRpbWVvdXRzYCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICBhd2FpdCBkLnRpbWVvdXRzKCdjb21tYW5kJywgMjApO1xuICAgICAgICAgIGQubmV3Q29tbWFuZFRpbWVvdXRNcy5zaG91bGQuZXF1YWwoMjApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJ2ltcGxpY2l0JywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIG5vdCBleGlzdCBieSBkZWZhdWx0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGQuaW1wbGljaXRXYWl0TXMuc2hvdWxkLmVxdWFsKDApO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBzZXR0YWJsZSB0aHJvdWdoIGB0aW1lb3V0c2AnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgYXdhaXQgZC50aW1lb3V0cygnaW1wbGljaXQnLCAyMCk7XG4gICAgICAgICAgZC5pbXBsaWNpdFdhaXRNcy5zaG91bGQuZXF1YWwoMjApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3Jlc2V0IGNvbXBhdGliaWxpdHknLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIG5vdCBhbGxvdyBib3RoIGZ1bGxSZXNldCBhbmQgbm9SZXNldCB0byBiZSB0cnVlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgbmV3Q2FwcyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRDYXBzLCB7XG4gICAgICAgICAgZnVsbFJlc2V0OiB0cnVlLFxuICAgICAgICAgIG5vUmVzZXQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihuZXdDYXBzKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoXG4gICAgICAgICAgICAvbm9SZXNldC4rZnVsbFJlc2V0Lyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdwcm94eWluZycsICgpID0+IHtcbiAgICAgIGxldCBzZXNzSWQ7XG4gICAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgICAgW3Nlc3NJZF0gPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oZGVmYXVsdENhcHMpO1xuICAgICAgfSk7XG4gICAgICBkZXNjcmliZSgnI3Byb3h5QWN0aXZlJywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIGV4aXN0JywgKCkgPT4ge1xuICAgICAgICAgIGQucHJveHlBY3RpdmUuc2hvdWxkLmJlLmFuLmluc3RhbmNlb2YoRnVuY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UnLCAoKSA9PiB7XG4gICAgICAgICAgZC5wcm94eUFjdGl2ZShzZXNzSWQpLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBzZXNzaW9uSWQgaXMgd3JvbmcnLCAoKSA9PiB7XG4gICAgICAgICAgKCgpID0+IHsgZC5wcm94eUFjdGl2ZSgnYWFhJyk7IH0pLnNob3VsZC50aHJvdztcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJyNnZXRQcm94eUF2b2lkTGlzdCcsICgpID0+IHtcbiAgICAgICAgaXQoJ3Nob3VsZCBleGlzdCcsICgpID0+IHtcbiAgICAgICAgICBkLmdldFByb3h5QXZvaWRMaXN0LnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEZ1bmN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGFuIGFycmF5JywgKCkgPT4ge1xuICAgICAgICAgIGQuZ2V0UHJveHlBdm9pZExpc3Qoc2Vzc0lkKS5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihBcnJheSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIHdoZW4gc2Vzc2lvbklkIGlzIHdyb25nJywgKCkgPT4ge1xuICAgICAgICAgICgoKSA9PiB7IGQuZ2V0UHJveHlBdm9pZExpc3QoJ2FhYScpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCcjY2FuUHJveHknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdzaG91bGQgaGF2ZSBhICNjYW5Qcm94eSBtZXRob2QnLCAoKSA9PiB7XG4gICAgICAgICAgZC5jYW5Qcm94eS5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSBmcm9tICNjYW5Qcm94eScsICgpID0+IHtcbiAgICAgICAgICBkLmNhblByb3h5KHNlc3NJZCkuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIHNlc3Npb25JZCBpcyB3cm9uZycsICgpID0+IHtcbiAgICAgICAgICAoKCkgPT4geyBkLmNhblByb3h5KCk7IH0pLnNob3VsZC50aHJvdztcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdldmVudCB0aW1pbmcgZnJhbWV3b3JrJywgKCkgPT4ge1xuICAgICAgbGV0IGJlZm9yZVN0YXJ0VGltZTtcbiAgICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgICBiZWZvcmVTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBkLnNob3VsZFZhbGlkYXRlQ2FwcyA9IGZhbHNlO1xuICAgICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdjcmVhdGVTZXNzaW9uJywgW2RlZmF1bHRDYXBzXSk7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCcjZXZlbnRIaXN0b3J5JywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIGhhdmUgYW4gZXZlbnRIaXN0b3J5IHByb3BlcnR5JywgKCkgPT4ge1xuICAgICAgICAgIHNob3VsZC5leGlzdChkLmV2ZW50SGlzdG9yeSk7XG4gICAgICAgICAgc2hvdWxkLmV4aXN0KGQuZXZlbnRIaXN0b3J5LmNvbW1hbmRzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBoYXZlIGEgc2Vzc2lvbiBzdGFydCB0aW1pbmcgYWZ0ZXIgc2Vzc2lvbiBzdGFydCcsICgpID0+IHtcbiAgICAgICAgICBsZXQge25ld1Nlc3Npb25SZXF1ZXN0ZWQsIG5ld1Nlc3Npb25TdGFydGVkfSA9IGQuZXZlbnRIaXN0b3J5O1xuICAgICAgICAgIG5ld1Nlc3Npb25SZXF1ZXN0ZWQuc2hvdWxkLmhhdmUubGVuZ3RoKDEpO1xuICAgICAgICAgIG5ld1Nlc3Npb25TdGFydGVkLnNob3VsZC5oYXZlLmxlbmd0aCgxKTtcbiAgICAgICAgICBuZXdTZXNzaW9uUmVxdWVzdGVkWzBdLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgICBuZXdTZXNzaW9uU3RhcnRlZFswXS5zaG91bGQuYmUuYSgnbnVtYmVyJyk7XG4gICAgICAgICAgKG5ld1Nlc3Npb25SZXF1ZXN0ZWRbMF0gPj0gYmVmb3JlU3RhcnRUaW1lKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgICAgICAobmV3U2Vzc2lvblN0YXJ0ZWRbMF0gPj0gbmV3U2Vzc2lvblJlcXVlc3RlZFswXSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgaW5jbHVkZSBhIGNvbW1hbmRzIGxpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgYXdhaXQgZC5leGVjdXRlQ29tbWFuZCgnZ2V0U3RhdHVzJywgW10pO1xuICAgICAgICAgIGQuZXZlbnRIaXN0b3J5LmNvbW1hbmRzLmxlbmd0aC5zaG91bGQuZXF1YWwoMik7XG4gICAgICAgICAgZC5ldmVudEhpc3RvcnkuY29tbWFuZHNbMV0uY21kLnNob3VsZC5lcXVhbCgnZ2V0U3RhdHVzJyk7XG4gICAgICAgICAgZC5ldmVudEhpc3RvcnkuY29tbWFuZHNbMV0uc3RhcnRUaW1lLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgICBkLmV2ZW50SGlzdG9yeS5jb21tYW5kc1sxXS5lbmRUaW1lLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCcjbG9nRXZlbnQnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdzaG91bGQgYWxsb3cgbG9nZ2luZyBhcmJpdHJhcnkgZXZlbnRzJywgKCkgPT4ge1xuICAgICAgICAgIGQubG9nRXZlbnQoJ2ZvbycpO1xuICAgICAgICAgIGQuZXZlbnRIaXN0b3J5LmZvb1swXS5zaG91bGQuYmUuYSgnbnVtYmVyJyk7XG4gICAgICAgICAgKGQuZXZlbnRIaXN0b3J5LmZvb1swXSA+PSBiZWZvcmVTdGFydFRpbWUpLnNob3VsZC5iZS50cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBub3QgYWxsb3cgcmVzZXJ2ZWQgb3Igb2RkbHkgZm9ybWVkIGV2ZW50IG5hbWVzJywgKCkgPT4ge1xuICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICBkLmxvZ0V2ZW50KCdjb21tYW5kcycpO1xuICAgICAgICAgIH0pLnNob3VsZC50aHJvdygpO1xuICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICBkLmxvZ0V2ZW50KDEpO1xuICAgICAgICAgIH0pLnNob3VsZC50aHJvdygpO1xuICAgICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgICBkLmxvZ0V2ZW50KHt9KTtcbiAgICAgICAgICB9KS5zaG91bGQudGhyb3coKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgYWxsb3cgbG9nZ2luZyB0aGUgc2FtZSBldmVudCBtdWx0aXBsZSB0aW1lcycsICgpID0+IHtcbiAgICAgICAgZC5sb2dFdmVudCgnYmFyJyk7XG4gICAgICAgIGQubG9nRXZlbnQoJ2JhcicpO1xuICAgICAgICBkLmV2ZW50SGlzdG9yeS5iYXIuc2hvdWxkLmhhdmUubGVuZ3RoKDIpO1xuICAgICAgICBkLmV2ZW50SGlzdG9yeS5iYXJbMV0uc2hvdWxkLmJlLmEoJ251bWJlcicpO1xuICAgICAgICAoZC5ldmVudEhpc3RvcnkuYmFyWzFdID49IGQuZXZlbnRIaXN0b3J5LmJhclswXSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCdnZXRTZXNzaW9uIGRlY29yYXRpb24nLCAoKSA9PiB7XG4gICAgICAgIGl0KCdzaG91bGQgZGVjb3JhdGUgZ2V0U2Vzc2lvbiByZXNwb25zZSBpZiBvcHQtaW4gY2FwIGlzIHByb3ZpZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGxldCByZXMgPSBhd2FpdCBkLmdldFNlc3Npb24oKTtcbiAgICAgICAgICBzaG91bGQubm90LmV4aXN0KHJlcy5ldmVudHMpO1xuXG4gICAgICAgICAgZC5jYXBzLmV2ZW50VGltaW5ncyA9IHRydWU7XG4gICAgICAgICAgcmVzID0gYXdhaXQgZC5nZXRTZXNzaW9uKCk7XG4gICAgICAgICAgc2hvdWxkLmV4aXN0KHJlcy5ldmVudHMpO1xuICAgICAgICAgIHNob3VsZC5leGlzdChyZXMuZXZlbnRzLm5ld1Nlc3Npb25SZXF1ZXN0ZWQpO1xuICAgICAgICAgIHJlcy5ldmVudHMubmV3U2Vzc2lvblJlcXVlc3RlZFswXS5zaG91bGQuYmUuYSgnbnVtYmVyJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlRHJpdmVyVW5pdFRlc3RzO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
