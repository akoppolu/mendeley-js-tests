'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _libBasedriverHelpers = require('../../lib/basedriver/helpers');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumSupport = require('appium-support');

var _mockFs = require('mock-fs');

var _mockFs2 = _interopRequireDefault(_mockFs);

_chai2['default'].use(_chaiAsPromised2['default']);

describe('helpers', function () {
  describe('#isPackageOrBundle', function () {
    it('should accept packages and bundles', function () {
      (0, _libBasedriverHelpers.isPackageOrBundle)('io.appium.testapp').should.be['true'];
    });
    it('should not accept non-packages or non-bundles', function () {
      (0, _libBasedriverHelpers.isPackageOrBundle)('foo').should.be['false'];
      (0, _libBasedriverHelpers.isPackageOrBundle)('/path/to/an.app').should.be['false'];
      (0, _libBasedriverHelpers.isPackageOrBundle)('/path/to/an.apk').should.be['false'];
    });
  });

  describe('#unzipFile', function () {
    var mockDir = 'path/to/mock/dir';
    before(function callee$2$0() {
      var fakeIOSAppZip;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // Start mock filesystem
            (0, _mockFs2['default'])(_defineProperty({}, mockDir, {}));

            // Write the base64 contents of FakeIOSApp.app.zip to the mock filesystem

            fakeIOSAppZip = 'UEsDBBQACAAIABF8/EYAAAAAAAAAAAAAAAAOABAARmFrZUlPU0FwcC5hcHBVWAwALwO4VQIDuFX1ARQAK8nILFYAorz8EoWi1MScnEqFxDyFxIICLgBQSwcIR93jPhoAAAAaAAAAUEsBAhUDFAAIAAgAEXz8Rkfd4z4aAAAAGgAAAA4ADAAAAAAAAAAAQKSBAAAAAEZha2VJT1NBcHAuYXBwVVgIAC8DuFUCA7hVUEsFBgAAAAABAAEASAAAAGYAAAAAAA==';
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(_path2['default'].resolve(mockDir, 'FakeIOSApp.app.zip'), fakeIOSAppZip, 'base64'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    after(function () {
      _mockFs2['default'].restore();
    });

    it('should unzip a .zip file (force isWindows to be true so we can test the internal zip library)', function callee$2$0() {
      var forceWindows;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            forceWindows = _sinon2['default'].stub(_appiumSupport.system, 'isWindows', function () {
              return true;
            });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((0, _libBasedriverHelpers.unzipFile)(_path2['default'].resolve(mockDir, 'FakeIOSApp.app.zip')));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(_path2['default'].resolve(mockDir, 'FakeIOSApp.app'), 'utf8').should.eventually.deep.equal('this is not really an app\n'));

          case 5:
            forceWindows.restore();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci9oZWxwZXJzLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7b0NBQTZDLDhCQUE4Qjs7b0JBQzFELE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O29CQUM1QixNQUFNOzs7O3FCQUNMLE9BQU87Ozs7NkJBQ0UsZ0JBQWdCOztzQkFDeEIsU0FBUzs7OztBQUU1QixrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsU0FBUyxFQUFFLFlBQU07QUFDeEIsVUFBUSxDQUFDLG9CQUFvQixFQUFFLFlBQU07QUFDbkMsTUFBRSxDQUFDLG9DQUFvQyxFQUFFLFlBQU07QUFDN0MsbURBQWtCLG1CQUFtQixDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBSyxDQUFDO0tBQ3ZELENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQywrQ0FBK0MsRUFBRSxZQUFNO0FBQ3hELG1EQUFrQixLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFNLENBQUM7QUFDekMsbURBQWtCLGlCQUFpQixDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsU0FBTSxDQUFDO0FBQ3JELG1EQUFrQixpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQU0sQ0FBQztLQUN0RCxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLFlBQVksRUFBRSxZQUFNO0FBQzNCLFFBQUksT0FBTyxHQUFHLGtCQUFrQixDQUFDO0FBQ2pDLFVBQU0sQ0FBQztVQVFDLGFBQWE7Ozs7O0FBTm5CLHlEQUNHLE9BQU8sRUFBRyxFQUFFLEVBQ2IsQ0FBQzs7OztBQUlHLHlCQUFhLEdBQUcsMFFBQTBROzs2Q0FDMVIsa0JBQUcsU0FBUyxDQUFDLGtCQUFLLE9BQU8sQ0FBQyxPQUFPLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxhQUFhLEVBQUUsUUFBUSxDQUFDOzs7Ozs7O0tBQ3pGLENBQUMsQ0FBQzs7QUFFSCxTQUFLLENBQUMsWUFBTTtBQUNWLDBCQUFPLE9BQU8sRUFBRSxDQUFDO0tBQ2xCLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsK0ZBQStGLEVBQUU7VUFDNUYsWUFBWTs7OztBQUFaLHdCQUFZLEdBQUcsbUJBQU0sSUFBSSx3QkFBUyxXQUFXLEVBQUU7cUJBQU0sSUFBSTthQUFBLENBQUM7OzZDQUMxRCxxQ0FBVSxrQkFBSyxPQUFPLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7Ozs7NkNBQ3RELGtCQUFHLFFBQVEsQ0FBQyxrQkFBSyxPQUFPLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLDZCQUE2QixDQUFDOzs7QUFDOUgsd0JBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7Ozs7OztLQUN4QixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9iYXNlZHJpdmVyL2hlbHBlcnMtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BhY2thZ2VPckJ1bmRsZSwgdW56aXBGaWxlIH0gZnJvbSAnLi4vLi4vbGliL2Jhc2Vkcml2ZXIvaGVscGVycyc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCB7IHN5c3RlbSwgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbW9ja0ZTIGZyb20gJ21vY2stZnMnO1xuXG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdoZWxwZXJzJywgKCkgPT4ge1xuICBkZXNjcmliZSgnI2lzUGFja2FnZU9yQnVuZGxlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYWNjZXB0IHBhY2thZ2VzIGFuZCBidW5kbGVzJywgKCkgPT4ge1xuICAgICAgaXNQYWNrYWdlT3JCdW5kbGUoJ2lvLmFwcGl1bS50ZXN0YXBwJykuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBub3QgYWNjZXB0IG5vbi1wYWNrYWdlcyBvciBub24tYnVuZGxlcycsICgpID0+IHtcbiAgICAgIGlzUGFja2FnZU9yQnVuZGxlKCdmb28nKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgICBpc1BhY2thZ2VPckJ1bmRsZSgnL3BhdGgvdG8vYW4uYXBwJykuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgaXNQYWNrYWdlT3JCdW5kbGUoJy9wYXRoL3RvL2FuLmFwaycpLnNob3VsZC5iZS5mYWxzZTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJyN1bnppcEZpbGUnLCAoKSA9PiB7XG4gICAgbGV0IG1vY2tEaXIgPSAncGF0aC90by9tb2NrL2Rpcic7XG4gICAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFN0YXJ0IG1vY2sgZmlsZXN5c3RlbVxuICAgICAgbW9ja0ZTKHtcbiAgICAgICAgW21vY2tEaXJdOiB7fSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBXcml0ZSB0aGUgYmFzZTY0IGNvbnRlbnRzIG9mIEZha2VJT1NBcHAuYXBwLnppcCB0byB0aGUgbW9jayBmaWxlc3lzdGVtXG4gICAgICBcbiAgICAgIGNvbnN0IGZha2VJT1NBcHBaaXAgPSAnVUVzREJCUUFDQUFJQUJGOC9FWUFBQUFBQUFBQUFBQUFBQUFPQUJBQVJtRnJaVWxQVTBGd2NDNWhjSEJWV0F3QUx3TzRWUUlEdUZYMUFSUUFLOG5JTEZZQW9yejhFb1dpMU1TY25FcUZ4RHlGeElJQ0xnQlFTd2NJUjkzalBob0FBQUFhQUFBQVVFc0JBaFVERkFBSUFBZ0FFWHo4UmtmZDR6NGFBQUFBR2dBQUFBNEFEQUFBQUFBQUFBQUFRS1NCQUFBQUFFWmhhMlZKVDFOQmNIQXVZWEJ3VlZnSUFDOER1RlVDQTdoVlVFc0ZCZ0FBQUFBQkFBRUFTQUFBQUdZQUFBQUFBQT09JztcbiAgICAgIGF3YWl0IGZzLndyaXRlRmlsZShwYXRoLnJlc29sdmUobW9ja0RpciwgJ0Zha2VJT1NBcHAuYXBwLnppcCcpLCBmYWtlSU9TQXBwWmlwLCAnYmFzZTY0Jyk7XG4gICAgfSk7XG5cbiAgICBhZnRlcigoKSA9PiB7XG4gICAgICBtb2NrRlMucmVzdG9yZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1bnppcCBhIC56aXAgZmlsZSAoZm9yY2UgaXNXaW5kb3dzIHRvIGJlIHRydWUgc28gd2UgY2FuIHRlc3QgdGhlIGludGVybmFsIHppcCBsaWJyYXJ5KScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGZvcmNlV2luZG93cyA9IHNpbm9uLnN0dWIoc3lzdGVtLCAnaXNXaW5kb3dzJywgKCkgPT4gdHJ1ZSk7XG4gICAgICBhd2FpdCB1bnppcEZpbGUocGF0aC5yZXNvbHZlKG1vY2tEaXIsICdGYWtlSU9TQXBwLmFwcC56aXAnKSk7XG4gICAgICBhd2FpdCBmcy5yZWFkRmlsZShwYXRoLnJlc29sdmUobW9ja0RpciwgJ0Zha2VJT1NBcHAuYXBwJyksICd1dGY4Jykuc2hvdWxkLmV2ZW50dWFsbHkuZGVlcC5lcXVhbCgndGhpcyBpcyBub3QgcmVhbGx5IGFuIGFwcFxcbicpO1xuICAgICAgZm9yY2VXaW5kb3dzLnJlc3RvcmUoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
