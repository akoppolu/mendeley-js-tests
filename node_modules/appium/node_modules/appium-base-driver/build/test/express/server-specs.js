require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _2 = require('../..');

var _libExpressServer = require('../../lib/express/server');

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('server configuration', function () {
  it('should actually use the middleware', function () {
    var app = { use: _sinon2['default'].spy(), all: _sinon2['default'].spy() };
    var configureRoutes = function configureRoutes() {};
    (0, _libExpressServer.configureServer)(app, configureRoutes);
    app.use.callCount.should.equal(15);
    app.all.callCount.should.equal(3);
  });

  it('should reject if error thrown in configureRoutes parameter', function callee$1$0() {
    var configureRoutes;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          configureRoutes = function configureRoutes() {
            throw new Error('I am Mr. MeeSeeks look at me!');
          };

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _2.server)(configureRoutes, 8181).should.be.rejectedWith('MeeSeeks'));

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
describe('server', function () {
  var hwServer = undefined;
  var errorStub = undefined;
  before(function callee$1$0() {
    var configureRoutes;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          configureRoutes = function configureRoutes(app) {
            var _this2 = this;

            app.get('/', function (req, res) {
              res.header['content-type'] = 'text/html';
              res.status(200).send('Hello World!');
            });
            app.get('/wd/hub/python', function (req, res) {
              res.status(200).send(req.headers['content-type']);
            });
            app.get('/error', function () {
              throw new Error('hahaha');
            });
            app.get('/pause', function callee$3$0(req, res) {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    res.header['content-type'] = 'text/html';
                    context$4$0.next = 3;
                    return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

                  case 3:
                    res.status(200).send('We have waited!');

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this2);
            });
          };

          errorStub = _sinon2['default'].stub(console, 'error');
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _2.server)(configureRoutes, 8181));

        case 4:
          hwServer = context$2$0.sent;

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(hwServer.close());

        case 2:
          errorStub.restore();

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should start up with our middleware', function callee$1$0() {
    var body;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])('http://localhost:8181/'));

        case 2:
          body = context$2$0.sent;

          body.should.eql('Hello World!');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should fix broken context type', function callee$1$0() {
    var body;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
            url: 'http://localhost:8181/wd/hub/python',
            headers: {
              'user-agent': 'Python',
              'content-type': 'application/x-www-form-urlencoded'
            }
          }));

        case 2:
          body = context$2$0.sent;

          body.should.eql('application/json');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should catch errors in the catchall', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])('http://localhost:8181/error').should.be.rejectedWith(/hahaha/));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should error if we try to start again on a port that is used', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _2.server)(function () {}, 8181).should.be.rejectedWith(/EADDRINUSE/));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should error if we try to start on a bad hostname', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _2.server)(_lodash2['default'].noop, 8181, 'lolcathost').should.be.rejectedWith(/ENOTFOUND|EADDRNOTAVAIL/));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _2.server)(_lodash2['default'].noop, 8181, '1.1.1.1').should.be.rejectedWith(/EADDRNOTAVAIL/));

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should wait for the server close connections before finishing closing', function callee$1$0() {
    var bodyPromise, before;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          bodyPromise = (0, _requestPromise2['default'])('http://localhost:8181/pause');
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

        case 3:
          before = Date.now();
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(hwServer.close());

        case 6:
          // expect slightly less than the request waited, since we paused above
          (Date.now() - before).should.be.above(900);

          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(bodyPromise);

        case 9:
          context$2$0.sent.should.equal('We have waited!');

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// relinquish control so that we don't close before the request is received
//# sourceMappingURL=data:application/json;charset=utf8;base64,
