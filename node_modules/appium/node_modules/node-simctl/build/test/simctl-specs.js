/* global it:true, describe:true*/
require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libSimctlJs = require('../lib/simctl.js');

var should = _chai2['default'].should();

describe('simctl', function () {
  var _this = this;

  this.timeout(40000); // enough time to allow the functions to themselves time out
  var randName = undefined;
  var randDeviceUdid = null;
  var validSdks = [];

  before(function callee$1$0() {
    var devices, i, randNum, nameFound, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, list;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 2:
          devices = context$2$0.sent;

          validSdks = _lodash2['default'].keys(devices);

          if (validSdks.length) {
            context$2$0.next = 6;
            break;
          }

          throw new Error('No valid SDKs');

        case 6:
          i = 0;

        case 7:
          if (!(i < 5)) {
            context$2$0.next = 43;
            break;
          }

          randNum = parseInt(Math.random() * 100, 10);

          randName = 'device' + randNum;

          nameFound = false;
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          context$2$0.prev = 14;
          _iterator = _getIterator(_lodash2['default'].values(devices));

        case 16:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            context$2$0.next = 24;
            break;
          }

          list = _step.value;

          if (!_lodash2['default'].includes(_lodash2['default'].map(list, 'name'), randName)) {
            context$2$0.next = 21;
            break;
          }

          // need to find another random name
          nameFound = true;
          return context$2$0.abrupt('break', 24);

        case 21:
          _iteratorNormalCompletion = true;
          context$2$0.next = 16;
          break;

        case 24:
          context$2$0.next = 30;
          break;

        case 26:
          context$2$0.prev = 26;
          context$2$0.t0 = context$2$0['catch'](14);
          _didIteratorError = true;
          _iteratorError = context$2$0.t0;

        case 30:
          context$2$0.prev = 30;
          context$2$0.prev = 31;

          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }

        case 33:
          context$2$0.prev = 33;

          if (!_didIteratorError) {
            context$2$0.next = 36;
            break;
          }

          throw _iteratorError;

        case 36:
          return context$2$0.finish(33);

        case 37:
          return context$2$0.finish(30);

        case 38:
          if (nameFound) {
            context$2$0.next = 40;
            break;
          }

          return context$2$0.abrupt('break', 43);

        case 40:
          i++;
          context$2$0.next = 7;
          break;

        case 43:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[14, 26, 30, 38], [31,, 33, 37]]);
  });

  it('should create a device', function callee$1$0() {
    var udid;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)(randName, 'iPhone 5s', _lodash2['default'].last(validSdks)));

        case 2:
          udid = context$2$0.sent;

          (typeof udid).should.equal('string');
          udid.length.should.equal(36);

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get devices', function callee$1$0() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)(_lodash2['default'].last(validSdks)));

        case 2:
          sdkDevices = context$2$0.sent;

          _lodash2['default'].map(sdkDevices, 'name').should.include(randName);
          randDeviceUdid = sdkDevices.filter(function (d) {
            return d.name === randName;
          })[0].udid;

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should erase devices', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.eraseDevice)(randDeviceUdid, 16000));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should delete devices', function callee$1$0() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.deleteDevice)(randDeviceUdid));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)(_lodash2['default'].last(validSdks)));

        case 4:
          sdkDevices = context$2$0.sent;

          _lodash2['default'].map(sdkDevices, 'name').should.not.include(randName);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should return a nice error for invalid usage', function callee$1$0() {
    var err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          err = null;
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('foo', 'bar', 'baz'));

        case 4:
          context$2$0.next = 9;
          break;

        case 6:
          context$2$0.prev = 6;
          context$2$0.t0 = context$2$0['catch'](1);

          err = context$2$0.t0;

        case 9:
          should.exist(err);
          err.message.should.include('Invalid device type: bar');

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[1, 6]]);
  });

  it('should create a device and be able to see it in devices list right away', function callee$1$0() {
    var sdk, numSimsBefore, udid, numSimsAfter;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          sdk = _lodash2['default'].last(validSdks);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 3:
          context$2$0.t0 = sdk;
          numSimsBefore = context$2$0.sent[context$2$0.t0].length;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('node-simctl test', 'iPhone 5s', sdk));

        case 7:
          udid = context$2$0.sent;
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 10:
          context$2$0.t1 = sdk;
          numSimsAfter = context$2$0.sent[context$2$0.t1].length;

          numSimsAfter.should.equal(numSimsBefore + 1);
          (0, _libSimctlJs.deleteDevice)(udid);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should create a device with compatible properties', function callee$1$0() {
    var sdk, devices, firstDevice, expectedList;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          sdk = _lodash2['default'].last(validSdks);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 3:
          context$2$0.t0 = sdk;
          devices = context$2$0.sent[context$2$0.t0];
          firstDevice = devices[0];
          expectedList = ['name', 'sdk', 'state', 'udid'];

          _Object$keys(firstDevice).sort().should.eql(expectedList);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// need to find a random name that does not already exist
// give it 5 tries
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc2ltY3RsLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7b0JBR2lCLE1BQU07Ozs7c0JBQ1QsUUFBUTs7OzsyQkFDOEMsa0JBQWtCOztBQUd0RixJQUFNLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQzs7QUFFN0IsUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFZOzs7QUFDN0IsTUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQixNQUFJLFFBQVEsWUFBQSxDQUFDO0FBQ2IsTUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDO0FBQzFCLE1BQUksU0FBUyxHQUFHLEVBQUUsQ0FBQzs7QUFFbkIsUUFBTSxDQUFDO1FBQ0QsT0FBTyxFQVFGLENBQUMsRUFDSixPQUFPLEVBR1AsU0FBUyxrRkFDSixJQUFJOzs7Ozs7MkNBYkssOEJBQVk7OztBQUE1QixpQkFBTzs7QUFDWCxtQkFBUyxHQUFHLG9CQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzs7Y0FDdkIsU0FBUyxDQUFDLE1BQU07Ozs7O2dCQUNiLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQzs7O0FBS3pCLFdBQUMsR0FBRyxDQUFDOzs7Z0JBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTs7Ozs7QUFDZixpQkFBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQzs7QUFDL0Msa0JBQVEsY0FBWSxPQUFPLEFBQUUsQ0FBQzs7QUFFMUIsbUJBQVMsR0FBRyxLQUFLOzs7OzttQ0FDSixvQkFBRSxNQUFNLENBQUMsT0FBTyxDQUFDOzs7Ozs7OztBQUF6QixjQUFJOztlQUNQLG9CQUFFLFFBQVEsQ0FBQyxvQkFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUFFLFFBQVEsQ0FBQzs7Ozs7O0FBRTNDLG1CQUFTLEdBQUcsSUFBSSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QUFXLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUN4QixzQkFBWSxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDOztBQUNuRCx1QkFBWSxXQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDOzs7Ozs7O0dBQzFELENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3NpbWN0bC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBpdDp0cnVlLCBkZXNjcmliZTp0cnVlKi9cbi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBjcmVhdGVEZXZpY2UsIGRlbGV0ZURldmljZSwgZXJhc2VEZXZpY2UsIGdldERldmljZXMgfSBmcm9tICcuLi9saWIvc2ltY3RsLmpzJztcblxuXG5jb25zdCBzaG91bGQgPSBjaGFpLnNob3VsZCgpO1xuXG5kZXNjcmliZSgnc2ltY3RsJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnRpbWVvdXQoNDAwMDApOyAvLyBlbm91Z2ggdGltZSB0byBhbGxvdyB0aGUgZnVuY3Rpb25zIHRvIHRoZW1zZWx2ZXMgdGltZSBvdXRcbiAgbGV0IHJhbmROYW1lO1xuICBsZXQgcmFuZERldmljZVVkaWQgPSBudWxsO1xuICBsZXQgdmFsaWRTZGtzID0gW107XG5cbiAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICBsZXQgZGV2aWNlcyA9IGF3YWl0IGdldERldmljZXMoKTtcbiAgICB2YWxpZFNka3MgPSBfLmtleXMoZGV2aWNlcyk7XG4gICAgaWYgKCF2YWxpZFNka3MubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHZhbGlkIFNES3MnKTtcbiAgICB9XG5cbiAgICAvLyBuZWVkIHRvIGZpbmQgYSByYW5kb20gbmFtZSB0aGF0IGRvZXMgbm90IGFscmVhZHkgZXhpc3RcbiAgICAvLyBnaXZlIGl0IDUgdHJpZXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgbGV0IHJhbmROdW0gPSBwYXJzZUludChNYXRoLnJhbmRvbSgpICogMTAwLCAxMCk7XG4gICAgICByYW5kTmFtZSA9IGBkZXZpY2Uke3JhbmROdW19YDtcblxuICAgICAgbGV0IG5hbWVGb3VuZCA9IGZhbHNlO1xuICAgICAgZm9yIChsZXQgbGlzdCBvZiBfLnZhbHVlcyhkZXZpY2VzKSkge1xuICAgICAgICBpZiAoXy5pbmNsdWRlcyhfLm1hcChsaXN0LCAnbmFtZScpLCByYW5kTmFtZSkpIHtcbiAgICAgICAgICAvLyBuZWVkIHRvIGZpbmQgYW5vdGhlciByYW5kb20gbmFtZVxuICAgICAgICAgIG5hbWVGb3VuZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghbmFtZUZvdW5kKSBicmVhaztcbiAgICB9XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY3JlYXRlIGEgZGV2aWNlJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCB1ZGlkID0gYXdhaXQgY3JlYXRlRGV2aWNlKHJhbmROYW1lLCAnaVBob25lIDVzJywgXy5sYXN0KHZhbGlkU2RrcykpO1xuICAgICh0eXBlb2YgdWRpZCkuc2hvdWxkLmVxdWFsKCdzdHJpbmcnKTtcbiAgICB1ZGlkLmxlbmd0aC5zaG91bGQuZXF1YWwoMzYpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCBkZXZpY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBzZGtEZXZpY2VzID0gYXdhaXQgZ2V0RGV2aWNlcyhfLmxhc3QodmFsaWRTZGtzKSk7XG4gICAgXy5tYXAoc2RrRGV2aWNlcywgJ25hbWUnKS5zaG91bGQuaW5jbHVkZShyYW5kTmFtZSk7XG4gICAgcmFuZERldmljZVVkaWQgPSBzZGtEZXZpY2VzLmZpbHRlcigoZCkgPT4gZC5uYW1lID09PSByYW5kTmFtZSlbMF0udWRpZDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBlcmFzZSBkZXZpY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGVyYXNlRGV2aWNlKHJhbmREZXZpY2VVZGlkLCAxNjAwMCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZGVsZXRlIGRldmljZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZGVsZXRlRGV2aWNlKHJhbmREZXZpY2VVZGlkKTtcbiAgICBsZXQgc2RrRGV2aWNlcyA9IGF3YWl0IGdldERldmljZXMoXy5sYXN0KHZhbGlkU2RrcykpO1xuICAgIF8ubWFwKHNka0RldmljZXMsICduYW1lJykuc2hvdWxkLm5vdC5pbmNsdWRlKHJhbmROYW1lKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gYSBuaWNlIGVycm9yIGZvciBpbnZhbGlkIHVzYWdlJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBlcnIgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBjcmVhdGVEZXZpY2UoJ2ZvbycsICdiYXInLCAnYmF6Jyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyID0gZTtcbiAgICB9XG4gICAgc2hvdWxkLmV4aXN0KGVycik7XG4gICAgZXJyLm1lc3NhZ2Uuc2hvdWxkLmluY2x1ZGUoJ0ludmFsaWQgZGV2aWNlIHR5cGU6IGJhcicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBhIGRldmljZSBhbmQgYmUgYWJsZSB0byBzZWUgaXQgaW4gZGV2aWNlcyBsaXN0IHJpZ2h0IGF3YXknLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHNkayA9IF8ubGFzdCh2YWxpZFNka3MpO1xuICAgIGxldCBudW1TaW1zQmVmb3JlID0gKGF3YWl0IGdldERldmljZXMoKSlbc2RrXS5sZW5ndGg7XG4gICAgbGV0IHVkaWQgPSBhd2FpdCBjcmVhdGVEZXZpY2UoJ25vZGUtc2ltY3RsIHRlc3QnLCAnaVBob25lIDVzJywgc2RrKTtcbiAgICBsZXQgbnVtU2ltc0FmdGVyID0gKGF3YWl0IGdldERldmljZXMoKSlbc2RrXS5sZW5ndGg7XG4gICAgbnVtU2ltc0FmdGVyLnNob3VsZC5lcXVhbChudW1TaW1zQmVmb3JlICsgMSk7XG4gICAgZGVsZXRlRGV2aWNlKHVkaWQpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBhIGRldmljZSB3aXRoIGNvbXBhdGlibGUgcHJvcGVydGllcycsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgc2RrID0gXy5sYXN0KHZhbGlkU2Rrcyk7XG4gICAgbGV0IGRldmljZXMgPSAoYXdhaXQgZ2V0RGV2aWNlcygpKVtzZGtdO1xuICAgIGxldCBmaXJzdERldmljZSA9IGRldmljZXNbMF07XG4gICAgbGV0IGV4cGVjdGVkTGlzdCA9IFsnbmFtZScsICdzZGsnLCAnc3RhdGUnLCAndWRpZCddO1xuICAgIE9iamVjdC5rZXlzKGZpcnN0RGV2aWNlKS5zb3J0KCkuc2hvdWxkLmVxbChleHBlY3RlZExpc3QpO1xuICB9KTtcblxufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
