'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _teen_process = require('teen_process');

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var log = _appiumSupport.logger.getLogger('simctl');

function simCommand(command, timeout) {
  var args = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
  var env = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
  var executingFunction = arguments.length <= 4 || arguments[4] === undefined ? _teen_process.exec : arguments[4];
  var logErrors = arguments.length <= 5 || arguments[5] === undefined ? true : arguments[5];
  return _regeneratorRuntime.async(function simCommand$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // run a particular simctl command
        args = ['simctl', command].concat(_toConsumableArray(args));
        // Prefix all passed in environment variables with 'SIMCTL_CHILD_', simctl
        // will then pass these to the child (spawned) process.
        env = _lodash2['default'].defaults(_lodash2['default'].mapKeys(env, function (value, key) {
          return 'SIMCTL_CHILD_' + key;
        }), process.env);

        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(executingFunction('xcrun', args, { timeout: timeout, env: env }));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](2);

        if (logErrors) {
          context$1$0.next = 14;
          break;
        }

        throw context$1$0.t0;

      case 14:
        if (context$1$0.t0.stderr) {
          log.errorAndThrow('simctl error running \'' + command + '\': ' + context$1$0.t0.stderr.trim());
        } else {
          log.errorAndThrow(context$1$0.t0);
        }

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 8]]);
}

function simExec(command, timeout) {
  var args = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
  var env = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
  var logErrors = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];
  return _regeneratorRuntime.async(function simExec$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simCommand(command, timeout, args, env, function callee$1$0(c, a, ob) {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)(c, a, ob));

              case 2:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }, logErrors));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function simSubProcess(command, timeout) {
  var args = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
  var env = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
  return _regeneratorRuntime.async(function simSubProcess$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simCommand(command, timeout, args, env, function callee$1$0(c, a, ob) {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                return context$2$0.abrupt('return', new _teen_process.SubProcess(c, a, ob));

              case 1:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function installApp(udid, appPath) {
  return _regeneratorRuntime.async(function installApp$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('install', 0, [udid, appPath]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function removeApp(udid, bundleId) {
  return _regeneratorRuntime.async(function removeApp$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('uninstall', 0, [udid, bundleId]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function launch(udid, bundleId) {
  var tries = arguments.length <= 2 || arguments[2] === undefined ? 5 : arguments[2];
  return _regeneratorRuntime.async(function launch$(context$1$0) {
    var _this3 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(tries, 1000, function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(simExec('launch', 0, [udid, bundleId]));

              case 2:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this3);
        }));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function spawn(udid, executablePath) {
  var env = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
  return _regeneratorRuntime.async(function spawn$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('spawn', 0, [udid, executablePath], env));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function spawnSubProcess(udid, executablePath) {
  var env = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
  return _regeneratorRuntime.async(function spawnSubProcess$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simSubProcess('spawn', 0, [udid, executablePath], env));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function openUrl(udid, url) {
  return _regeneratorRuntime.async(function openUrl$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('openurl', 0, [udid, url]));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function terminate(udid, bundleId) {
  return _regeneratorRuntime.async(function terminate$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('terminate', 0, [udid, bundleId]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getAppContainer(udid, bundleId) {
  var logErrors = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

  var _ref, stdout;

  return _regeneratorRuntime.async(function getAppContainer$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('get_app_container', 0, [udid, bundleId], {}, logErrors));

      case 2:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        return context$1$0.abrupt('return', (stdout || '').trim());

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function shutdown(udid) {
  return _regeneratorRuntime.async(function shutdown$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('shutdown', 0, [udid]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function createDevice(name, deviceTypeId, runtimeId) {
  var timeout = arguments.length <= 3 || arguments[3] === undefined ? 10000 : arguments[3];
  var udid, out, reason, retries;
  return _regeneratorRuntime.async(function createDevice$(context$1$0) {
    var _this4 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        udid = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(simExec('create', 0, [name, deviceTypeId, runtimeId]));

      case 4:
        out = context$1$0.sent;

        udid = out.stdout.trim();
        context$1$0.next = 13;
        break;

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](1);
        reason = context$1$0.t0.message;

        if (context$1$0.t0.stderr) {
          reason = context$1$0.t0.stderr.trim();
        }
        log.errorAndThrow('Could not create simulator with name \'' + name + '\', device ' + ('type id \'' + deviceTypeId + '\' and runtime id \'' + runtimeId + '\'. Reason: \'' + reason + '\''));

      case 13:
        retries = parseInt(timeout / 1000, 10);
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 1000, function callee$1$0() {
          var devices, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, deviceArr, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, device;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(getDevices());

              case 2:
                devices = context$2$0.sent;
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                context$2$0.prev = 6;
                _iterator = _getIterator(_lodash2['default'].values(devices));

              case 8:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  context$2$0.next = 43;
                  break;
                }

                deviceArr = _step.value;
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                context$2$0.prev = 13;
                _iterator2 = _getIterator(deviceArr);

              case 15:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  context$2$0.next = 26;
                  break;
                }

                device = _step2.value;

                if (!(device.udid === udid)) {
                  context$2$0.next = 23;
                  break;
                }

                if (!(device.state === 'Creating')) {
                  context$2$0.next = 22;
                  break;
                }

                throw new Error('Device still being created');

              case 22:
                return context$2$0.abrupt('return');

              case 23:
                _iteratorNormalCompletion2 = true;
                context$2$0.next = 15;
                break;

              case 26:
                context$2$0.next = 32;
                break;

              case 28:
                context$2$0.prev = 28;
                context$2$0.t0 = context$2$0['catch'](13);
                _didIteratorError2 = true;
                _iteratorError2 = context$2$0.t0;

              case 32:
                context$2$0.prev = 32;
                context$2$0.prev = 33;

                if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                  _iterator2['return']();
                }

              case 35:
                context$2$0.prev = 35;

                if (!_didIteratorError2) {
                  context$2$0.next = 38;
                  break;
                }

                throw _iteratorError2;

              case 38:
                return context$2$0.finish(35);

              case 39:
                return context$2$0.finish(32);

              case 40:
                _iteratorNormalCompletion = true;
                context$2$0.next = 8;
                break;

              case 43:
                context$2$0.next = 49;
                break;

              case 45:
                context$2$0.prev = 45;
                context$2$0.t1 = context$2$0['catch'](6);
                _didIteratorError = true;
                _iteratorError = context$2$0.t1;

              case 49:
                context$2$0.prev = 49;
                context$2$0.prev = 50;

                if (!_iteratorNormalCompletion && _iterator['return']) {
                  _iterator['return']();
                }

              case 52:
                context$2$0.prev = 52;

                if (!_didIteratorError) {
                  context$2$0.next = 55;
                  break;
                }

                throw _iteratorError;

              case 55:
                return context$2$0.finish(52);

              case 56:
                return context$2$0.finish(49);

              case 57:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this4, [[6, 45, 49, 57], [13, 28, 32, 40], [33,, 35, 39], [50,, 52, 56]]);
        }));

      case 16:
        return context$1$0.abrupt('return', udid);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 8]]);
}

function deleteDevice(udid) {
  return _regeneratorRuntime.async(function deleteDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('delete', 0, [udid]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function eraseDevice(udid) {
  var timeout = arguments.length <= 1 || arguments[1] === undefined ? 1000 : arguments[1];
  var loopFn, retries;
  return _regeneratorRuntime.async(function eraseDevice$(context$1$0) {
    var _this5 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        loopFn = function loopFn() {
          return _regeneratorRuntime.async(function loopFn$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(simExec('erase', 10000, [udid]));

              case 2:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this5);
        };

        retries = parseInt(timeout / 200, 10);
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(retries, 200, loopFn));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getDevicesByParsing() {
  var _ref2,
  // get the list of devices
  stdout, deviceSectionRe, matches, match, devices, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, sdk, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, line, lineRe, lineMatch;

  return _regeneratorRuntime.async(function getDevicesByParsing$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(simExec('list', 0, ['devices']));

      case 2:
        _ref2 = context$1$0.sent;
        stdout = _ref2.stdout;
        deviceSectionRe = /-- iOS (.+) --(\n\s{4}.+)*/mg;
        matches = [];
        match = deviceSectionRe.exec(stdout);

        // make an entry for each sdk version
        while (match !== null) {
          matches.push(match);
          match = deviceSectionRe.exec(stdout);
        }
        if (matches.length < 1) {
          log.errorAndThrow('Could not find device section');
        }

        // get all the devices for each sdk
        devices = {};
        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 13;
        _iterator3 = _getIterator(matches);

      case 15:
        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
          context$1$0.next = 51;
          break;
        }

        match = _step3.value;
        sdk = match[1];

        devices[sdk] = [];
        // split the full match into lines and remove the first
        _iteratorNormalCompletion4 = true;
        _didIteratorError4 = false;
        _iteratorError4 = undefined;
        context$1$0.prev = 22;
        _iterator4 = _getIterator(match[0].split('\n').slice(1));

      case 24:
        if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
          context$1$0.next = 34;
          break;
        }

        line = _step4.value;
        lineRe = /([^\s].+) \((\w+-.+\w+)\) \((\w+\s?\w+)\)/;
        lineMatch = lineRe.exec(line);

        if (!(lineMatch === null)) {
          context$1$0.next = 30;
          break;
        }

        throw new Error('Could not match line: ' + line);

      case 30:
        // save the whole thing as ab object in the list for this sdk

        devices[sdk].push({
          name: lineMatch[1],
          udid: lineMatch[2],
          state: lineMatch[3],
          sdk: sdk
        });

      case 31:
        _iteratorNormalCompletion4 = true;
        context$1$0.next = 24;
        break;

      case 34:
        context$1$0.next = 40;
        break;

      case 36:
        context$1$0.prev = 36;
        context$1$0.t0 = context$1$0['catch'](22);
        _didIteratorError4 = true;
        _iteratorError4 = context$1$0.t0;

      case 40:
        context$1$0.prev = 40;
        context$1$0.prev = 41;

        if (!_iteratorNormalCompletion4 && _iterator4['return']) {
          _iterator4['return']();
        }

      case 43:
        context$1$0.prev = 43;

        if (!_didIteratorError4) {
          context$1$0.next = 46;
          break;
        }

        throw _iteratorError4;

      case 46:
        return context$1$0.finish(43);

      case 47:
        return context$1$0.finish(40);

      case 48:
        _iteratorNormalCompletion3 = true;
        context$1$0.next = 15;
        break;

      case 51:
        context$1$0.next = 57;
        break;

      case 53:
        context$1$0.prev = 53;
        context$1$0.t1 = context$1$0['catch'](13);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t1;

      case 57:
        context$1$0.prev = 57;
        context$1$0.prev = 58;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 60:
        context$1$0.prev = 60;

        if (!_didIteratorError3) {
          context$1$0.next = 63;
          break;
        }

        throw _iteratorError3;

      case 63:
        return context$1$0.finish(60);

      case 64:
        return context$1$0.finish(57);

      case 65:
        return context$1$0.abrupt('return', devices);

      case 66:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[13, 53, 57, 65], [22, 36, 40, 48], [41,, 43, 47], [58,, 60, 64]]);
}

function getDevices() {
  var forSdk = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

  var devices, _ref3, stdout, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _loop, _iterator5, _step5, _ret;

  return _regeneratorRuntime.async(function getDevices$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        devices = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(simExec('list', 0, ['devices', '-j']));

      case 4:
        _ref3 = context$1$0.sent;
        stdout = _ref3.stdout;

        /* JSON should be
         * {
         *   "devices" : {
         *     "iOS <sdk>" : [
         *       {
         *         "state" : "Booted",
         *         "availability" : "(available)",
         *         "name" : "iPhone 6",
         *         "udid" : "75E34140-18E8-4D1A-9F45-AAC735DF75DF"
         *       }
         *     ]
         *   }
         * }
         */
        devices = {};
        _iteratorNormalCompletion5 = true;
        _didIteratorError5 = false;
        _iteratorError5 = undefined;
        context$1$0.prev = 10;

        _loop = function () {
          var _step5$value = _slicedToArray(_step5.value, 2);

          var sdkName = _step5$value[0];
          var entries = _step5$value[1];

          if (sdkName.indexOf('iOS') !== 0) {
            return 'continue';
          }
          var sdk = sdkName.replace('iOS ', '');
          devices[sdk] = entries.map(function (el) {
            delete el.availability;
            return _extends({}, el, { sdk: sdk });
          });
        };

        _iterator5 = _getIterator(_lodash2['default'].toPairs(JSON.parse(stdout).devices));

      case 13:
        if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
          context$1$0.next = 20;
          break;
        }

        _ret = _loop();

        if (!(_ret === 'continue')) {
          context$1$0.next = 17;
          break;
        }

        return context$1$0.abrupt('continue', 17);

      case 17:
        _iteratorNormalCompletion5 = true;
        context$1$0.next = 13;
        break;

      case 20:
        context$1$0.next = 26;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](10);
        _didIteratorError5 = true;
        _iteratorError5 = context$1$0.t0;

      case 26:
        context$1$0.prev = 26;
        context$1$0.prev = 27;

        if (!_iteratorNormalCompletion5 && _iterator5['return']) {
          _iterator5['return']();
        }

      case 29:
        context$1$0.prev = 29;

        if (!_didIteratorError5) {
          context$1$0.next = 32;
          break;
        }

        throw _iteratorError5;

      case 32:
        return context$1$0.finish(29);

      case 33:
        return context$1$0.finish(26);

      case 34:
        context$1$0.next = 43;
        break;

      case 36:
        context$1$0.prev = 36;
        context$1$0.t1 = context$1$0['catch'](1);

        log.debug('Unable to get JSON device list: ' + context$1$0.t1.message);
        log.debug('Falling back to manually parsing');
        context$1$0.next = 42;
        return _regeneratorRuntime.awrap(getDevicesByParsing());

      case 42:
        devices = context$1$0.sent;

      case 43:
        if (!forSdk) {
          context$1$0.next = 47;
          break;
        }

        if (devices[forSdk]) {
          context$1$0.next = 46;
          break;
        }

        throw new Error('Sdk \'' + forSdk + '\' was not in list of simctl sdks');

      case 46:
        return context$1$0.abrupt('return', devices[forSdk]);

      case 47:
        return context$1$0.abrupt('return', devices);

      case 48:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 36], [10, 22, 26, 34], [27,, 29, 33]]);
}

/**
 * Gets base64 screenshot for device (xcode >= 8.1 only)
 * @param {string} udid 
 */
function getScreenshot(udid) {
  var pathToScreenshotPng, screenshotImg;
  return _regeneratorRuntime.async(function getScreenshot$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.path({ prefix: 'screenshot-' + udid, suffix: '.png' }));

      case 2:
        pathToScreenshotPng = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(simExec('io', 0, [udid, 'screenshot', pathToScreenshotPng]));

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(pathToScreenshotPng));

      case 7:
        screenshotImg = context$1$0.sent;
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(pathToScreenshotPng));

      case 10:
        return context$1$0.abrupt('return', screenshotImg.toString('base64'));

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.installApp = installApp;
exports.removeApp = removeApp;
exports.launch = launch;
exports.spawn = spawn;
exports.spawnSubProcess = spawnSubProcess;
exports.openUrl = openUrl;
exports.terminate = terminate;
exports.shutdown = shutdown;
exports.createDevice = createDevice;
exports.getAppContainer = getAppContainer;
exports.getScreenshot = getScreenshot;
exports.deleteDevice = deleteDevice;
exports.eraseDevice = eraseDevice;
exports.getDevices = getDevices;

// if we don't want to see the errors, just throw and allow the calling
// code do what it wants

// make sure that it gets out of the "Creating" state

// need to retry

// stop looking, we're done

// retry erase with a sleep in between because it's flakey

// expect to get a listing like
// -- iOS 8.1 --
//     iPhone 4s (3CA6E7DD-220E-45E5-B716-1E992B3A429C) (Shutdown)
//     ...
// -- iOS 8.2 --
//     iPhone 4s (A99FFFC3-8E19-4DCF-B585-7D9D46B4C16E) (Shutdown)
//     ...
// so, get the `-- iOS X.X --` line to find the sdk (X.X)
// and the rest of the listing in order to later find the devices

// a line is something like
//    iPhone 4s (A99FFFC3-8E19-4DCF-B585-7D9D46B4C16E) (Shutdown)
// retrieve:
//   iPhone 4s
//   A99FFFC3-8E19-4DCF-B585-7D9D46B4C16E
//   Shutdown
// https://regex101.com/r/lG7mK6/3

// if a `forSdk` was passed in, return only the corresponding list

// otherwise return everything
//# sourceMappingURL=data:application/json;charset=utf8;base64,
